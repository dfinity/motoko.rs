// auto-generated: "lalrpop 0.19.8"
// sha3: a894e823038d91cea00d409b29593b438caf7fb551a434bc9cc04379d28a0a01
use crate::parser_utils::{dec_node_into_exp, get_one, node};
use crate::ast::{Node, Source, Id, Id_, Pat, Pat_, Exp, Exp_, ExpField, Type, Type_, PrimType, Literal, Case, Cases, Decs, Dec, Dec_, UnOp, BinOp, RelOp, Delim, Mut, SortPat, SortPat_, Sugar, Vis, Vis_, Stab, Stab_, DecField, DecField_, DecFields};
use line_col::LineColLookup;
#[allow(unused_extern_crates)]
extern crate lalrpop_util as __lalrpop_util;
#[allow(unused_imports)]
use self::__lalrpop_util::state_machine as __state_machine;
extern crate core;
extern crate alloc;

#[cfg_attr(rustfmt, rustfmt_skip)]
mod __parse__Literal {
    #![allow(non_snake_case, non_camel_case_types, unused_mut, unused_variables, unused_imports, unused_parens, clippy::all)]

    use crate::parser_utils::{dec_node_into_exp, get_one, node};
    use crate::ast::{Node, Source, Id, Id_, Pat, Pat_, Exp, Exp_, ExpField, Type, Type_, PrimType, Literal, Case, Cases, Decs, Dec, Dec_, UnOp, BinOp, RelOp, Delim, Mut, SortPat, SortPat_, Sugar, Vis, Vis_, Stab, Stab_, DecField, DecField_, DecFields};
    use line_col::LineColLookup;
    #[allow(unused_extern_crates)]
    extern crate lalrpop_util as __lalrpop_util;
    #[allow(unused_imports)]
    use self::__lalrpop_util::state_machine as __state_machine;
    extern crate core;
    extern crate alloc;
    use self::__lalrpop_util::lexer::Token;
    #[allow(dead_code)]
    pub(crate) enum __Symbol<'input>
     {
        Variant0(&'input str),
        Variant1(core::option::Option<&'input str>),
        Variant2(Type_),
        Variant3(core::option::Option<Type_>),
        Variant4((&'input str, Type_)),
        Variant5(core::option::Option<(&'input str, Type_)>),
        Variant6(DecField_),
        Variant7(alloc::vec::Vec<DecField_>),
        Variant8(Dec_),
        Variant9(alloc::vec::Vec<Dec_>),
        Variant10(Node<ExpField>),
        Variant11(alloc::vec::Vec<Node<ExpField>>),
        Variant12(Exp_),
        Variant13(alloc::vec::Vec<Exp_>),
        Variant14(Node<Case>),
        Variant15(alloc::vec::Vec<Node<Case>>),
        Variant16(Pat_),
        Variant17(alloc::vec::Vec<Pat_>),
        Variant18(core::option::Option<Exp_>),
        Variant19(Id_),
        Variant20(core::option::Option<Id_>),
        Variant21(Stab_),
        Variant22(core::option::Option<Stab_>),
        Variant23(Vis_),
        Variant24(core::option::Option<Vis_>),
        Variant25(usize),
        Variant26(BinOp),
        Variant27(Exp),
        Variant28(Case),
        Variant29(Cases),
        Variant30(Dec),
        Variant31(DecField),
        Variant32(core::option::Option<DecField_>),
        Variant33(core::option::Option<Dec_>),
        Variant34(Decs),
        Variant35(Delim<DecField_>),
        Variant36(Delim<Dec_>),
        Variant37(Delim<Node<ExpField>>),
        Variant38(Delim<Exp_>),
        Variant39(Delim<Node<Case>>),
        Variant40(Delim<Pat_>),
        Variant41(ExpField),
        Variant42(core::option::Option<Node<ExpField>>),
        Variant43(Id),
        Variant44(Literal),
        Variant45(Node<Exp>),
        Variant46(core::option::Option<Node<Case>>),
        Variant47(Node<Dec>),
        Variant48(Node<DecField>),
        Variant49(Node<Id>),
        Variant50(Node<Pat>),
        Variant51(Node<SortPat>),
        Variant52(Node<Stab>),
        Variant53(Node<Type>),
        Variant54(Node<Vis>),
        Variant55(DecFields),
        Variant56(Pat),
        Variant57(core::option::Option<Pat_>),
        Variant58(PrimType),
        Variant59(SortPat),
        Variant60(SortPat_),
        Variant61(Stab),
        Variant62(String),
        Variant63(Type),
        Variant64(UnOp),
        Variant65(Mut),
        Variant66(Vis),
    }
    const __ACTION: &[i16] = &[
        // State 0
        0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 8, 9, 10, 11, 12, 13, 0, 0,
        // State 1
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 2
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 3
        0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 4
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 5
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 6
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 7
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 8
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 9
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 10
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 11
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 12
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 13
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    ];
    fn __action(state: i16, integer: usize) -> i16 {
        __ACTION[(state as usize) * 83 + integer]
    }
    const __EOF_ACTION: &[i16] = &[
        // State 0
        0,
        // State 1
        -395,
        // State 2
        -299,
        // State 3
        0,
        // State 4
        -292,
        // State 5
        -290,
        // State 6
        -291,
        // State 7
        -383,
        // State 8
        -298,
        // State 9
        -296,
        // State 10
        -294,
        // State 11
        -295,
        // State 12
        -297,
        // State 13
        -293,
    ];
    fn __goto(state: i16, nt: usize) -> i16 {
        match nt {
            124 => 1,
            186 => 2,
            _ => 0,
        }
    }
    fn __expected_tokens(__state: i16) -> alloc::vec::Vec<alloc::string::String> {
        const __TERMINAL: &[&str] = &[
            r###""!""###,
            r###""!=""###,
            r###""#""###,
            r###""%""###,
            r###""&""###,
            r###""(""###,
            r###"")""###,
            r###""*""###,
            r###""*%""###,
            r###""**""###,
            r###""**%""###,
            r###""+""###,
            r###""+%""###,
            r###"",""###,
            r###""-""###,
            r###""-%""###,
            r###"".""###,
            r###""/""###,
            r###"":""###,
            r###"":=""###,
            r###"";""###,
            r###""<<""###,
            r###""<<>""###,
            r###""<>>""###,
            r###""=""###,
            r###""==""###,
            r###""?""###,
            r###""Bool""###,
            r###""Int""###,
            r###""Int16""###,
            r###""Int32""###,
            r###""Int64""###,
            r###""Int8""###,
            r###""Nat""###,
            r###""Nat16""###,
            r###""Nat32""###,
            r###""Nat64""###,
            r###""Nat8""###,
            r###""Principal""###,
            r###""Text""###,
            r###""[""###,
            r###""\\no_else""###,
            r###""]""###,
            r###""^""###,
            r###""_""###,
            r###""and""###,
            r###""assert""###,
            r###""case""###,
            r###""debug""###,
            r###""do""###,
            r###""else""###,
            r###""false""###,
            r###""flexible""###,
            r###""for""###,
            r###""func""###,
            r###""if""###,
            r###""ignore""###,
            r###""in""###,
            r###""let""###,
            r###""module""###,
            r###""not""###,
            r###""null""###,
            r###""or""###,
            r###""prim""###,
            r###""private""###,
            r###""public""###,
            r###""return""###,
            r###""stable""###,
            r###""switch""###,
            r###""true""###,
            r###""var""###,
            r###""while""###,
            r###""{""###,
            r###""|""###,
            r###""}""###,
            r###"r#"\"(?:[^\\\\\"\\n]|\\\\.)*\""#"###,
            r###"r#"'(?:[^\\\\'\\s]|\\\\.)*'|' '"#"###,
            r###"r#"0x[0-9a-fA-F]+"#"###,
            r###"r#"[+-]?[0-9]([0-9_]*[0-9])?[Ee][0-9]([0-9_]*[0-9])?"#"###,
            r###"r#"[+-]?[0-9]([0-9_]*[0-9])?\\.([0-9]([0-9_]*[0-9])?)?([Ee][0-9]([0-9_]*[0-9])?)?"#"###,
            r###"r#"[0-9]([0-9_]*[0-9])?"#"###,
            r###"r#"[a-zA-Z_][a-zA-Z_0-9]*"#"###,
            r###"r#"\\\\\\\\BIG.FART."#"###,
        ];
        __TERMINAL.iter().enumerate().filter_map(|(index, terminal)| {
            let next_state = __action(__state, index);
            if next_state == 0 {
                None
            } else {
                Some(alloc::string::ToString::to_string(terminal))
            }
        }).collect()
    }
    pub(crate) struct __StateMachine<'input, '__1>
    where 'input: '__1
    {
        lookup: &'__1 LineColLookup<'input>,
        input: &'input str,
        __phantom: core::marker::PhantomData<(&'input ())>,
    }
    impl<'input, '__1> __state_machine::ParserDefinition for __StateMachine<'input, '__1>
    where 'input: '__1
    {
        type Location = usize;
        type Error = &'static str;
        type Token = Token<'input>;
        type TokenIndex = usize;
        type Symbol = __Symbol<'input>;
        type Success = Literal;
        type StateIndex = i16;
        type Action = i16;
        type ReduceIndex = i16;
        type NonterminalIndex = usize;

        #[inline]
        fn start_location(&self) -> Self::Location {
              Default::default()
        }

        #[inline]
        fn start_state(&self) -> Self::StateIndex {
              0
        }

        #[inline]
        fn token_to_index(&self, token: &Self::Token) -> Option<usize> {
            __token_to_integer(token, core::marker::PhantomData::<(&())>)
        }

        #[inline]
        fn action(&self, state: i16, integer: usize) -> i16 {
            __action(state, integer)
        }

        #[inline]
        fn error_action(&self, state: i16) -> i16 {
            __action(state, 83 - 1)
        }

        #[inline]
        fn eof_action(&self, state: i16) -> i16 {
            __EOF_ACTION[state as usize]
        }

        #[inline]
        fn goto(&self, state: i16, nt: usize) -> i16 {
            __goto(state, nt)
        }

        fn token_to_symbol(&self, token_index: usize, token: Self::Token) -> Self::Symbol {
            __token_to_symbol(token_index, token, core::marker::PhantomData::<(&())>)
        }

        fn expected_tokens(&self, state: i16) -> alloc::vec::Vec<alloc::string::String> {
            __expected_tokens(state)
        }

        #[inline]
        fn uses_error_recovery(&self) -> bool {
            false
        }

        #[inline]
        fn error_recovery_symbol(
            &self,
            recovery: __state_machine::ErrorRecovery<Self>,
        ) -> Self::Symbol {
            panic!("error recovery not enabled for this grammar")
        }

        fn reduce(
            &mut self,
            action: i16,
            start_location: Option<&Self::Location>,
            states: &mut alloc::vec::Vec<i16>,
            symbols: &mut alloc::vec::Vec<__state_machine::SymbolTriple<Self>>,
        ) -> Option<__state_machine::ParseResult<Self>> {
            __reduce(
                self.lookup,
                self.input,
                action,
                start_location,
                states,
                symbols,
                core::marker::PhantomData::<(&())>,
            )
        }

        fn simulate_reduce(&self, action: i16) -> __state_machine::SimulatedReduce<Self> {
            panic!("error recovery not enabled for this grammar")
        }
    }
    fn __token_to_integer<
        'input,
    >(
        __token: &Token<'input>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> Option<usize>
    {
        match *__token {
            Token(8, _) if true => Some(0),
            Token(9, _) if true => Some(1),
            Token(10, _) if true => Some(2),
            Token(11, _) if true => Some(3),
            Token(12, _) if true => Some(4),
            Token(13, _) if true => Some(5),
            Token(14, _) if true => Some(6),
            Token(15, _) if true => Some(7),
            Token(16, _) if true => Some(8),
            Token(17, _) if true => Some(9),
            Token(18, _) if true => Some(10),
            Token(19, _) if true => Some(11),
            Token(20, _) if true => Some(12),
            Token(21, _) if true => Some(13),
            Token(22, _) if true => Some(14),
            Token(23, _) if true => Some(15),
            Token(24, _) if true => Some(16),
            Token(25, _) if true => Some(17),
            Token(26, _) if true => Some(18),
            Token(27, _) if true => Some(19),
            Token(28, _) if true => Some(20),
            Token(29, _) if true => Some(21),
            Token(30, _) if true => Some(22),
            Token(31, _) if true => Some(23),
            Token(32, _) if true => Some(24),
            Token(33, _) if true => Some(25),
            Token(34, _) if true => Some(26),
            Token(35, _) if true => Some(27),
            Token(36, _) if true => Some(28),
            Token(37, _) if true => Some(29),
            Token(38, _) if true => Some(30),
            Token(39, _) if true => Some(31),
            Token(40, _) if true => Some(32),
            Token(41, _) if true => Some(33),
            Token(42, _) if true => Some(34),
            Token(43, _) if true => Some(35),
            Token(44, _) if true => Some(36),
            Token(45, _) if true => Some(37),
            Token(46, _) if true => Some(38),
            Token(47, _) if true => Some(39),
            Token(48, _) if true => Some(40),
            Token(49, _) if true => Some(41),
            Token(50, _) if true => Some(42),
            Token(51, _) if true => Some(43),
            Token(52, _) if true => Some(44),
            Token(53, _) if true => Some(45),
            Token(54, _) if true => Some(46),
            Token(55, _) if true => Some(47),
            Token(56, _) if true => Some(48),
            Token(57, _) if true => Some(49),
            Token(58, _) if true => Some(50),
            Token(59, _) if true => Some(51),
            Token(60, _) if true => Some(52),
            Token(61, _) if true => Some(53),
            Token(62, _) if true => Some(54),
            Token(63, _) if true => Some(55),
            Token(64, _) if true => Some(56),
            Token(65, _) if true => Some(57),
            Token(66, _) if true => Some(58),
            Token(67, _) if true => Some(59),
            Token(68, _) if true => Some(60),
            Token(69, _) if true => Some(61),
            Token(70, _) if true => Some(62),
            Token(71, _) if true => Some(63),
            Token(72, _) if true => Some(64),
            Token(73, _) if true => Some(65),
            Token(74, _) if true => Some(66),
            Token(75, _) if true => Some(67),
            Token(76, _) if true => Some(68),
            Token(77, _) if true => Some(69),
            Token(78, _) if true => Some(70),
            Token(79, _) if true => Some(71),
            Token(80, _) if true => Some(72),
            Token(81, _) if true => Some(73),
            Token(82, _) if true => Some(74),
            Token(0, _) if true => Some(75),
            Token(1, _) if true => Some(76),
            Token(2, _) if true => Some(77),
            Token(3, _) if true => Some(78),
            Token(4, _) if true => Some(79),
            Token(5, _) if true => Some(80),
            Token(6, _) if true => Some(81),
            Token(7, _) if true => Some(82),
            _ => None,
        }
    }
    fn __token_to_symbol<
        'input,
    >(
        __token_index: usize,
        __token: Token<'input>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> __Symbol<'input>
    {
        match __token_index {
            0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 | 42 | 43 | 44 | 45 | 46 | 47 | 48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 | 58 | 59 | 60 | 61 | 62 | 63 | 64 | 65 | 66 | 67 | 68 | 69 | 70 | 71 | 72 | 73 | 74 | 75 | 76 | 77 | 78 | 79 | 80 | 81 | 82 => match __token {
                Token(8, __tok0) | Token(9, __tok0) | Token(10, __tok0) | Token(11, __tok0) | Token(12, __tok0) | Token(13, __tok0) | Token(14, __tok0) | Token(15, __tok0) | Token(16, __tok0) | Token(17, __tok0) | Token(18, __tok0) | Token(19, __tok0) | Token(20, __tok0) | Token(21, __tok0) | Token(22, __tok0) | Token(23, __tok0) | Token(24, __tok0) | Token(25, __tok0) | Token(26, __tok0) | Token(27, __tok0) | Token(28, __tok0) | Token(29, __tok0) | Token(30, __tok0) | Token(31, __tok0) | Token(32, __tok0) | Token(33, __tok0) | Token(34, __tok0) | Token(35, __tok0) | Token(36, __tok0) | Token(37, __tok0) | Token(38, __tok0) | Token(39, __tok0) | Token(40, __tok0) | Token(41, __tok0) | Token(42, __tok0) | Token(43, __tok0) | Token(44, __tok0) | Token(45, __tok0) | Token(46, __tok0) | Token(47, __tok0) | Token(48, __tok0) | Token(49, __tok0) | Token(50, __tok0) | Token(51, __tok0) | Token(52, __tok0) | Token(53, __tok0) | Token(54, __tok0) | Token(55, __tok0) | Token(56, __tok0) | Token(57, __tok0) | Token(58, __tok0) | Token(59, __tok0) | Token(60, __tok0) | Token(61, __tok0) | Token(62, __tok0) | Token(63, __tok0) | Token(64, __tok0) | Token(65, __tok0) | Token(66, __tok0) | Token(67, __tok0) | Token(68, __tok0) | Token(69, __tok0) | Token(70, __tok0) | Token(71, __tok0) | Token(72, __tok0) | Token(73, __tok0) | Token(74, __tok0) | Token(75, __tok0) | Token(76, __tok0) | Token(77, __tok0) | Token(78, __tok0) | Token(79, __tok0) | Token(80, __tok0) | Token(81, __tok0) | Token(82, __tok0) | Token(0, __tok0) | Token(1, __tok0) | Token(2, __tok0) | Token(3, __tok0) | Token(4, __tok0) | Token(5, __tok0) | Token(6, __tok0) | Token(7, __tok0) if true => __Symbol::Variant0(__tok0),
                _ => unreachable!(),
            },
            _ => unreachable!(),
        }
    }
    pub struct LiteralParser {
        builder: __lalrpop_util::lexer::MatcherBuilder,
        _priv: (),
    }

    impl LiteralParser {
        pub fn new() -> LiteralParser {
            let __builder = super::__intern_token::new_builder();
            LiteralParser {
                builder: __builder,
                _priv: (),
            }
        }

        #[allow(dead_code)]
        pub fn parse<
            'input,
        >(
            &self,
            lookup: &LineColLookup<'input>,
            input: &'input str,
        ) -> Result<Literal, __lalrpop_util::ParseError<usize, Token<'input>, &'static str>>
        {
            let mut __tokens = self.builder.matcher(input);
            __state_machine::Parser::drive(
                __StateMachine {
                    lookup,
                    input,
                    __phantom: core::marker::PhantomData::<(&())>,
                },
                __tokens,
            )
        }
    }
    pub(crate) fn __reduce<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut alloc::vec::Vec<i16>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> Option<Result<Literal,__lalrpop_util::ParseError<usize, Token<'input>, &'static str>>>
    {
        let (__pop_states, __nonterminal) = match __action {
            0 => {
                __reduce0(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1 => {
                __reduce1(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            2 => {
                __reduce2(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            3 => {
                __reduce3(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            4 => {
                __reduce4(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            5 => {
                __reduce5(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            6 => {
                __reduce6(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            7 => {
                __reduce7(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            8 => {
                __reduce8(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            9 => {
                __reduce9(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            10 => {
                __reduce10(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            11 => {
                __reduce11(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            12 => {
                __reduce12(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            13 => {
                __reduce13(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            14 => {
                __reduce14(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            15 => {
                __reduce15(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            16 => {
                __reduce16(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            17 => {
                __reduce17(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            18 => {
                __reduce18(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            19 => {
                __reduce19(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            20 => {
                __reduce20(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            21 => {
                __reduce21(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            22 => {
                __reduce22(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            23 => {
                __reduce23(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            24 => {
                __reduce24(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            25 => {
                __reduce25(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            26 => {
                __reduce26(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            27 => {
                __reduce27(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            28 => {
                __reduce28(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            29 => {
                __reduce29(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            30 => {
                __reduce30(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            31 => {
                __reduce31(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            32 => {
                __reduce32(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            33 => {
                __reduce33(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            34 => {
                __reduce34(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            35 => {
                __reduce35(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            36 => {
                __reduce36(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            37 => {
                __reduce37(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            38 => {
                __reduce38(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            39 => {
                __reduce39(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            40 => {
                __reduce40(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            41 => {
                __reduce41(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            42 => {
                __reduce42(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            43 => {
                __reduce43(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            44 => {
                __reduce44(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            45 => {
                __reduce45(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            46 => {
                __reduce46(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            47 => {
                __reduce47(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            48 => {
                __reduce48(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            49 => {
                __reduce49(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            50 => {
                __reduce50(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            51 => {
                __reduce51(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            52 => {
                __reduce52(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            53 => {
                __reduce53(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            54 => {
                __reduce54(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            55 => {
                __reduce55(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            56 => {
                __reduce56(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            57 => {
                __reduce57(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            58 => {
                __reduce58(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            59 => {
                __reduce59(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            60 => {
                __reduce60(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            61 => {
                __reduce61(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            62 => {
                __reduce62(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            63 => {
                __reduce63(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            64 => {
                __reduce64(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            65 => {
                __reduce65(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            66 => {
                __reduce66(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            67 => {
                __reduce67(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            68 => {
                __reduce68(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            69 => {
                __reduce69(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            70 => {
                __reduce70(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            71 => {
                __reduce71(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            72 => {
                __reduce72(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            73 => {
                __reduce73(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            74 => {
                __reduce74(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            75 => {
                __reduce75(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            76 => {
                __reduce76(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            77 => {
                __reduce77(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            78 => {
                __reduce78(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            79 => {
                __reduce79(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            80 => {
                __reduce80(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            81 => {
                __reduce81(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            82 => {
                __reduce82(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            83 => {
                __reduce83(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            84 => {
                __reduce84(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            85 => {
                __reduce85(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            86 => {
                __reduce86(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            87 => {
                __reduce87(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            88 => {
                __reduce88(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            89 => {
                __reduce89(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            90 => {
                __reduce90(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            91 => {
                __reduce91(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            92 => {
                __reduce92(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            93 => {
                __reduce93(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            94 => {
                __reduce94(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            95 => {
                __reduce95(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            96 => {
                __reduce96(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            97 => {
                __reduce97(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            98 => {
                __reduce98(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            99 => {
                __reduce99(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            100 => {
                __reduce100(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            101 => {
                __reduce101(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            102 => {
                __reduce102(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            103 => {
                __reduce103(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            104 => {
                __reduce104(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            105 => {
                __reduce105(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            106 => {
                __reduce106(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            107 => {
                __reduce107(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            108 => {
                __reduce108(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            109 => {
                __reduce109(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            110 => {
                __reduce110(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            111 => {
                __reduce111(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            112 => {
                __reduce112(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            113 => {
                __reduce113(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            114 => {
                __reduce114(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            115 => {
                __reduce115(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            116 => {
                __reduce116(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            117 => {
                __reduce117(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            118 => {
                __reduce118(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            119 => {
                __reduce119(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            120 => {
                __reduce120(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            121 => {
                __reduce121(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            122 => {
                __reduce122(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            123 => {
                __reduce123(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            124 => {
                __reduce124(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            125 => {
                __reduce125(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            126 => {
                __reduce126(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            127 => {
                __reduce127(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            128 => {
                __reduce128(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            129 => {
                __reduce129(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            130 => {
                __reduce130(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            131 => {
                __reduce131(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            132 => {
                __reduce132(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            133 => {
                __reduce133(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            134 => {
                __reduce134(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            135 => {
                __reduce135(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            136 => {
                __reduce136(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            137 => {
                __reduce137(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            138 => {
                __reduce138(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            139 => {
                __reduce139(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            140 => {
                __reduce140(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            141 => {
                __reduce141(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            142 => {
                __reduce142(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            143 => {
                __reduce143(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            144 => {
                __reduce144(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            145 => {
                __reduce145(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            146 => {
                __reduce146(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            147 => {
                __reduce147(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            148 => {
                __reduce148(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            149 => {
                __reduce149(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            150 => {
                __reduce150(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            151 => {
                __reduce151(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            152 => {
                __reduce152(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            153 => {
                __reduce153(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            154 => {
                __reduce154(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            155 => {
                __reduce155(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            156 => {
                __reduce156(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            157 => {
                __reduce157(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            158 => {
                __reduce158(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            159 => {
                __reduce159(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            160 => {
                __reduce160(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            161 => {
                __reduce161(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            162 => {
                __reduce162(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            163 => {
                __reduce163(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            164 => {
                __reduce164(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            165 => {
                __reduce165(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            166 => {
                __reduce166(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            167 => {
                __reduce167(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            168 => {
                __reduce168(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            169 => {
                __reduce169(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            170 => {
                __reduce170(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            171 => {
                __reduce171(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            172 => {
                __reduce172(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            173 => {
                __reduce173(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            174 => {
                __reduce174(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            175 => {
                __reduce175(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            176 => {
                __reduce176(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            177 => {
                __reduce177(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            178 => {
                __reduce178(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            179 => {
                __reduce179(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            180 => {
                __reduce180(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            181 => {
                __reduce181(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            182 => {
                __reduce182(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            183 => {
                __reduce183(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            184 => {
                __reduce184(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            185 => {
                __reduce185(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            186 => {
                __reduce186(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            187 => {
                __reduce187(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            188 => {
                __reduce188(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            189 => {
                __reduce189(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            190 => {
                __reduce190(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            191 => {
                __reduce191(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            192 => {
                __reduce192(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            193 => {
                __reduce193(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            194 => {
                __reduce194(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            195 => {
                __reduce195(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            196 => {
                __reduce196(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            197 => {
                __reduce197(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            198 => {
                __reduce198(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            199 => {
                __reduce199(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            200 => {
                __reduce200(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            201 => {
                __reduce201(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            202 => {
                __reduce202(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            203 => {
                __reduce203(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            204 => {
                __reduce204(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            205 => {
                __reduce205(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            206 => {
                __reduce206(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            207 => {
                __reduce207(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            208 => {
                __reduce208(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            209 => {
                __reduce209(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            210 => {
                __reduce210(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            211 => {
                __reduce211(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            212 => {
                __reduce212(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            213 => {
                __reduce213(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            214 => {
                __reduce214(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            215 => {
                __reduce215(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            216 => {
                __reduce216(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            217 => {
                __reduce217(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            218 => {
                __reduce218(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            219 => {
                __reduce219(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            220 => {
                __reduce220(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            221 => {
                __reduce221(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            222 => {
                __reduce222(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            223 => {
                __reduce223(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            224 => {
                __reduce224(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            225 => {
                __reduce225(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            226 => {
                __reduce226(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            227 => {
                __reduce227(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            228 => {
                __reduce228(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            229 => {
                __reduce229(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            230 => {
                __reduce230(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            231 => {
                __reduce231(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            232 => {
                __reduce232(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            233 => {
                __reduce233(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            234 => {
                __reduce234(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            235 => {
                __reduce235(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            236 => {
                __reduce236(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            237 => {
                __reduce237(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            238 => {
                __reduce238(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            239 => {
                __reduce239(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            240 => {
                __reduce240(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            241 => {
                __reduce241(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            242 => {
                __reduce242(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            243 => {
                __reduce243(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            244 => {
                __reduce244(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            245 => {
                __reduce245(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            246 => {
                __reduce246(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            247 => {
                __reduce247(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            248 => {
                __reduce248(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            249 => {
                __reduce249(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            250 => {
                __reduce250(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            251 => {
                __reduce251(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            252 => {
                __reduce252(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            253 => {
                __reduce253(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            254 => {
                __reduce254(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            255 => {
                __reduce255(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            256 => {
                __reduce256(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            257 => {
                __reduce257(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            258 => {
                __reduce258(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            259 => {
                __reduce259(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            260 => {
                __reduce260(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            261 => {
                __reduce261(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            262 => {
                __reduce262(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            263 => {
                __reduce263(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            264 => {
                __reduce264(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            265 => {
                __reduce265(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            266 => {
                __reduce266(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            267 => {
                __reduce267(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            268 => {
                __reduce268(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            269 => {
                __reduce269(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            270 => {
                __reduce270(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            271 => {
                __reduce271(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            272 => {
                __reduce272(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            273 => {
                __reduce273(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            274 => {
                __reduce274(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            275 => {
                __reduce275(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            276 => {
                __reduce276(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            277 => {
                __reduce277(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            278 => {
                __reduce278(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            279 => {
                __reduce279(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            280 => {
                __reduce280(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            281 => {
                __reduce281(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            282 => {
                __reduce282(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            283 => {
                __reduce283(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            284 => {
                __reduce284(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            285 => {
                __reduce285(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            286 => {
                __reduce286(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            287 => {
                __reduce287(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            288 => {
                __reduce288(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            289 => {
                __reduce289(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            290 => {
                __reduce290(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            291 => {
                __reduce291(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            292 => {
                __reduce292(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            293 => {
                __reduce293(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            294 => {
                __reduce294(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            295 => {
                __reduce295(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            296 => {
                __reduce296(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            297 => {
                __reduce297(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            298 => {
                __reduce298(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            299 => {
                __reduce299(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            300 => {
                __reduce300(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            301 => {
                __reduce301(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            302 => {
                __reduce302(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            303 => {
                __reduce303(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            304 => {
                __reduce304(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            305 => {
                __reduce305(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            306 => {
                __reduce306(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            307 => {
                __reduce307(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            308 => {
                __reduce308(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            309 => {
                __reduce309(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            310 => {
                __reduce310(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            311 => {
                __reduce311(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            312 => {
                __reduce312(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            313 => {
                __reduce313(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            314 => {
                __reduce314(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            315 => {
                __reduce315(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            316 => {
                __reduce316(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            317 => {
                __reduce317(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            318 => {
                __reduce318(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            319 => {
                __reduce319(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            320 => {
                __reduce320(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            321 => {
                __reduce321(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            322 => {
                __reduce322(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            323 => {
                __reduce323(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            324 => {
                __reduce324(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            325 => {
                __reduce325(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            326 => {
                __reduce326(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            327 => {
                __reduce327(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            328 => {
                __reduce328(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            329 => {
                __reduce329(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            330 => {
                __reduce330(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            331 => {
                __reduce331(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            332 => {
                __reduce332(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            333 => {
                __reduce333(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            334 => {
                __reduce334(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            335 => {
                __reduce335(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            336 => {
                __reduce336(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            337 => {
                __reduce337(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            338 => {
                __reduce338(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            339 => {
                __reduce339(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            340 => {
                __reduce340(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            341 => {
                __reduce341(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            342 => {
                __reduce342(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            343 => {
                __reduce343(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            344 => {
                __reduce344(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            345 => {
                __reduce345(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            346 => {
                __reduce346(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            347 => {
                __reduce347(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            348 => {
                __reduce348(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            349 => {
                __reduce349(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            350 => {
                __reduce350(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            351 => {
                __reduce351(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            352 => {
                __reduce352(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            353 => {
                __reduce353(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            354 => {
                __reduce354(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            355 => {
                __reduce355(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            356 => {
                __reduce356(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            357 => {
                __reduce357(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            358 => {
                __reduce358(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            359 => {
                __reduce359(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            360 => {
                __reduce360(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            361 => {
                __reduce361(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            362 => {
                __reduce362(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            363 => {
                __reduce363(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            364 => {
                __reduce364(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            365 => {
                __reduce365(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            366 => {
                __reduce366(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            367 => {
                __reduce367(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            368 => {
                __reduce368(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            369 => {
                __reduce369(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            370 => {
                __reduce370(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            371 => {
                __reduce371(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            372 => {
                __reduce372(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            373 => {
                __reduce373(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            374 => {
                __reduce374(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            375 => {
                __reduce375(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            376 => {
                __reduce376(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            377 => {
                __reduce377(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            378 => {
                __reduce378(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            379 => {
                __reduce379(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            380 => {
                __reduce380(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            381 => {
                __reduce381(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            382 => {
                __reduce382(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            383 => {
                __reduce383(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            384 => {
                __reduce384(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            385 => {
                __reduce385(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            386 => {
                __reduce386(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            387 => {
                __reduce387(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            388 => {
                __reduce388(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            389 => {
                __reduce389(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            390 => {
                __reduce390(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            391 => {
                __reduce391(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            392 => {
                __reduce392(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            393 => {
                __reduce393(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            394 => {
                // __Literal = Literal => ActionFn(0);
                let __sym0 = __pop_Variant44(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action0::<>(lookup, input, __sym0);
                return Some(Ok(__nt));
            }
            395 => {
                __reduce395(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            396 => {
                __reduce396(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            397 => {
                __reduce397(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            398 => {
                __reduce398(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            _ => panic!("invalid action code {}", __action)
        };
        let __states_len = __states.len();
        __states.truncate(__states_len - __pop_states);
        let __state = *__states.last().unwrap();
        let __next_state = __goto(__state, __nonterminal);
        __states.push(__next_state);
        None
    }
    #[inline(never)]
    fn __symbol_type_mismatch() -> ! {
        panic!("symbol type mismatch")
    }
    fn __pop_Variant4<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, (&'input str, Type_), usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant4(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant26<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, BinOp, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant26(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant28<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Case, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant28(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant29<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Cases, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant29(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant30<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Dec, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant30(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant31<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, DecField, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant31(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant6<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, DecField_, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant6(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant55<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, DecFields, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant55(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant8<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Dec_, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant8(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant34<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Decs, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant34(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant35<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Delim<DecField_>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant35(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant36<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Delim<Dec_>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant36(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant38<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Delim<Exp_>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant38(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant39<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Delim<Node<Case>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant39(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant37<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Delim<Node<ExpField>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant37(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant40<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Delim<Pat_>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant40(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant27<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Exp, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant27(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant41<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, ExpField, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant41(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant12<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Exp_, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant12(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant43<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Id, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant43(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant19<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Id_, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant19(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant44<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Literal, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant44(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant65<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Mut, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant65(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant14<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Node<Case>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant14(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant47<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Node<Dec>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant47(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant48<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Node<DecField>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant48(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant45<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Node<Exp>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant45(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant10<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Node<ExpField>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant10(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant49<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Node<Id>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant49(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant50<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Node<Pat>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant50(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant51<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Node<SortPat>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant51(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant52<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Node<Stab>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant52(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant53<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Node<Type>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant53(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant54<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Node<Vis>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant54(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant56<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Pat, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant56(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant16<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Pat_, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant16(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant58<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, PrimType, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant58(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant59<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, SortPat, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant59(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant60<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, SortPat_, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant60(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant61<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Stab, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant61(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant21<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Stab_, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant21(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant62<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, String, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant62(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant63<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Type, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant63(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant2<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Type_, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant2(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant64<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, UnOp, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant64(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant66<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Vis, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant66(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant23<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Vis_, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant23(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant7<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, alloc::vec::Vec<DecField_>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant7(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant9<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, alloc::vec::Vec<Dec_>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant9(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant13<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, alloc::vec::Vec<Exp_>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant13(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant15<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, alloc::vec::Vec<Node<Case>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant15(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant11<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, alloc::vec::Vec<Node<ExpField>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant11(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant17<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, alloc::vec::Vec<Pat_>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant17(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant5<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, core::option::Option<(&'input str, Type_)>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant5(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant32<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, core::option::Option<DecField_>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant32(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant33<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, core::option::Option<Dec_>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant33(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant18<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, core::option::Option<Exp_>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant18(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant20<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, core::option::Option<Id_>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant20(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant46<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, core::option::Option<Node<Case>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant46(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant42<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, core::option::Option<Node<ExpField>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant42(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant57<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, core::option::Option<Pat_>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant57(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant22<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, core::option::Option<Stab_>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant22(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant3<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, core::option::Option<Type_>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant3(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant24<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, core::option::Option<Vis_>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant24(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant1<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, core::option::Option<&'input str>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant1(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant25<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, usize, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant25(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant0<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, &'input str, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant0(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    pub(crate) fn __reduce0<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // "="? = "=" => ActionFn(130);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action130::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 0)
    }
    pub(crate) fn __reduce1<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // "="? =  => ActionFn(131);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action131::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (0, 0)
    }
    pub(crate) fn __reduce2<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (":" <Type_>) = ":", Type => ActionFn(449);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant63(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action449::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (2, 1)
    }
    pub(crate) fn __reduce3<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (":" <Type_>)? = ":", Type => ActionFn(454);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant63(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action454::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (2, 2)
    }
    pub(crate) fn __reduce4<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (":" <Type_>)? =  => ActionFn(152);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action152::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (0, 2)
    }
    pub(crate) fn __reduce5<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (":" Type_) = ":", Type => ActionFn(450);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant63(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action450::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (2, 3)
    }
    pub(crate) fn __reduce6<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (":" Type_)? = ":", Type => ActionFn(457);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant63(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action457::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (2, 4)
    }
    pub(crate) fn __reduce7<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (":" Type_)? =  => ActionFn(128);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action128::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (0, 4)
    }
    pub(crate) fn __reduce8<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<DecField_> ";") = DecField, ";" => ActionFn(463);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant31(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action463::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 5)
    }
    pub(crate) fn __reduce9<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<DecField_> ";")* =  => ActionFn(211);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action211::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (0, 6)
    }
    pub(crate) fn __reduce10<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<DecField_> ";")* = (<DecField_> ";")+ => ActionFn(212);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action212::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 6)
    }
    pub(crate) fn __reduce11<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<DecField_> ";")+ = DecField, ";" => ActionFn(465);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant31(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action465::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (2, 7)
    }
    pub(crate) fn __reduce12<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<DecField_> ";")+ = (<DecField_> ";")+, DecField, ";" => ActionFn(466);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant31(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action466::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (3, 7)
    }
    pub(crate) fn __reduce13<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<Dec_> ";") = Dec, ";" => ActionFn(470);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action470::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (2, 8)
    }
    pub(crate) fn __reduce14<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<Dec_> ";")* =  => ActionFn(199);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action199::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (0, 9)
    }
    pub(crate) fn __reduce15<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<Dec_> ";")* = (<Dec_> ";")+ => ActionFn(200);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action200::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce16<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<Dec_> ";")+ = Dec, ";" => ActionFn(473);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action473::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (2, 10)
    }
    pub(crate) fn __reduce17<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<Dec_> ";")+ = (<Dec_> ";")+, Dec, ";" => ActionFn(474);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant30(__symbols);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action474::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (3, 10)
    }
    pub(crate) fn __reduce18<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<ExpField_> ";") = ExpField, ";" => ActionFn(478);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant41(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action478::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (2, 11)
    }
    pub(crate) fn __reduce19<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<ExpField_> ";")* =  => ActionFn(189);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action189::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (0, 12)
    }
    pub(crate) fn __reduce20<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<ExpField_> ";")* = (<ExpField_> ";")+ => ActionFn(190);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action190::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 12)
    }
    pub(crate) fn __reduce21<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<ExpField_> ";")+ = ExpField, ";" => ActionFn(480);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant41(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action480::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (2, 13)
    }
    pub(crate) fn __reduce22<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<ExpField_> ";")+ = (<ExpField_> ";")+, ExpField, ";" => ActionFn(481);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant41(__symbols);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action481::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (3, 13)
    }
    pub(crate) fn __reduce23<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<ExpNonVar_<Ob>> ",") = ExpNonVar<Ob>, "," => ActionFn(485);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action485::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (2, 14)
    }
    pub(crate) fn __reduce24<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<ExpNonVar_<Ob>> ",")* =  => ActionFn(339);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action339::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (0, 15)
    }
    pub(crate) fn __reduce25<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<ExpNonVar_<Ob>> ",")* = (<ExpNonVar_<Ob>> ",")+ => ActionFn(340);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action340::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (1, 15)
    }
    pub(crate) fn __reduce26<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<ExpNonVar_<Ob>> ",")+ = ExpNonVar<Ob>, "," => ActionFn(487);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action487::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (2, 16)
    }
    pub(crate) fn __reduce27<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<ExpNonVar_<Ob>> ",")+ = (<ExpNonVar_<Ob>> ",")+, ExpNonVar<Ob>, "," => ActionFn(488);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action488::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (3, 16)
    }
    pub(crate) fn __reduce28<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<Exp_<Ob>> ",") = Exp<Ob>, "," => ActionFn(492);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action492::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (2, 17)
    }
    pub(crate) fn __reduce29<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<Exp_<Ob>> ",")+ = Exp<Ob>, "," => ActionFn(507);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action507::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (2, 18)
    }
    pub(crate) fn __reduce30<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<Exp_<Ob>> ",")+ = (<Exp_<Ob>> ",")+, Exp<Ob>, "," => ActionFn(508);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action508::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (3, 18)
    }
    pub(crate) fn __reduce31<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<Node<Case>> ";") = Case, ";" => ActionFn(509);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant28(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action509::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (2, 19)
    }
    pub(crate) fn __reduce32<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<Node<Case>> ";")* =  => ActionFn(194);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action194::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (0, 20)
    }
    pub(crate) fn __reduce33<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<Node<Case>> ";")* = (<Node<Case>> ";")+ => ActionFn(195);
        let __sym0 = __pop_Variant15(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action195::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 20)
    }
    pub(crate) fn __reduce34<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<Node<Case>> ";")+ = Case, ";" => ActionFn(511);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant28(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action511::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (2, 21)
    }
    pub(crate) fn __reduce35<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<Node<Case>> ";")+ = (<Node<Case>> ";")+, Case, ";" => ActionFn(512);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant28(__symbols);
        let __sym0 = __pop_Variant15(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action512::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (3, 21)
    }
    pub(crate) fn __reduce36<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<PatBin_> ",") = PatBin, "," => ActionFn(516);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant56(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action516::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (2, 22)
    }
    pub(crate) fn __reduce37<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<PatBin_> ",")+ = PatBin, "," => ActionFn(520);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant56(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action520::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (2, 23)
    }
    pub(crate) fn __reduce38<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<PatBin_> ",")+ = (<PatBin_> ",")+, PatBin, "," => ActionFn(521);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant56(__symbols);
        let __sym0 = __pop_Variant17(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action521::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (3, 23)
    }
    pub(crate) fn __reduce39<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (ExpNullary_<Bl>) = ExpNullary<Bl> => ActionFn(523);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action523::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 24)
    }
    pub(crate) fn __reduce40<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (ExpNullary_<Bl>)? = ExpNullary<Bl> => ActionFn(524);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action524::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (1, 25)
    }
    pub(crate) fn __reduce41<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (ExpNullary_<Bl>)? =  => ActionFn(345);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action345::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (0, 25)
    }
    pub(crate) fn __reduce42<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (ExpNullary_<Ob>) = ExpNullary<Ob> => ActionFn(528);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action528::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 26)
    }
    pub(crate) fn __reduce43<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (ExpNullary_<Ob>)? = ExpNullary<Ob> => ActionFn(539);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action539::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (1, 27)
    }
    pub(crate) fn __reduce44<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (ExpNullary_<Ob>)? =  => ActionFn(313);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action313::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (0, 27)
    }
    pub(crate) fn __reduce45<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (Id_) = Id => ActionFn(543);
        let __sym0 = __pop_Variant43(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action543::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (1, 28)
    }
    pub(crate) fn __reduce46<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (Id_)? = Id => ActionFn(556);
        let __sym0 = __pop_Variant43(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action556::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 29)
    }
    pub(crate) fn __reduce47<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (Id_)? =  => ActionFn(133);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action133::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (0, 29)
    }
    pub(crate) fn __reduce48<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (Id_?) = Id => ActionFn(565);
        let __sym0 = __pop_Variant43(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action565::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 30)
    }
    pub(crate) fn __reduce49<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (Id_?) =  => ActionFn(566);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action566::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (0, 30)
    }
    pub(crate) fn __reduce50<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (Stab_) = Stab => ActionFn(572);
        let __sym0 = __pop_Variant61(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action572::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (1, 31)
    }
    pub(crate) fn __reduce51<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (Stab_)? = Stab => ActionFn(573);
        let __sym0 = __pop_Variant61(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action573::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (1, 32)
    }
    pub(crate) fn __reduce52<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (Stab_)? =  => ActionFn(113);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action113::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (0, 32)
    }
    pub(crate) fn __reduce53<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (Vis_) = Vis => ActionFn(577);
        let __sym0 = __pop_Variant66(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action577::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (1, 33)
    }
    pub(crate) fn __reduce54<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (Vis_)? = Vis => ActionFn(578);
        let __sym0 = __pop_Variant66(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action578::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (1, 34)
    }
    pub(crate) fn __reduce55<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (Vis_)? =  => ActionFn(116);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action116::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (0, 34)
    }
    pub(crate) fn __reduce56<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // @L =  => ActionFn(215);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action215::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (0, 35)
    }
    pub(crate) fn __reduce57<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // @R =  => ActionFn(214);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action214::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (0, 36)
    }
    pub(crate) fn __reduce58<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BinOp = "+" => ActionFn(86);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action86::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce59<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BinOp = "-" => ActionFn(87);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action87::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce60<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BinOp = "*" => ActionFn(88);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action88::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce61<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BinOp = "/" => ActionFn(89);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action89::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce62<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BinOp = "%" => ActionFn(90);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action90::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce63<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BinOp = "**" => ActionFn(91);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action91::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce64<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BinOp = "+%" => ActionFn(92);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action92::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce65<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BinOp = "-%" => ActionFn(93);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action93::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce66<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BinOp = "*%" => ActionFn(94);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action94::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce67<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BinOp = "**%" => ActionFn(95);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action95::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce68<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BinOp = "&" => ActionFn(96);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action96::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce69<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BinOp = "|" => ActionFn(97);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action97::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce70<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BinOp = "^" => ActionFn(98);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action98::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce71<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BinOp = "<<" => ActionFn(99);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action99::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce72<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BinOp = "<<>" => ActionFn(100);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action100::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce73<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BinOp = "<>>" => ActionFn(101);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action101::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce74<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BinOp = "#" => ActionFn(102);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action102::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce75<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Bl = r#"\\\\\\\\BIG.FART."# => ActionFn(5);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action5::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 38)
    }
    pub(crate) fn __reduce76<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Block = "{", Decs, "}" => ActionFn(61);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant34(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action61::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 39)
    }
    pub(crate) fn __reduce77<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Block_ = Block => ActionFn(583);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action583::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 40)
    }
    pub(crate) fn __reduce78<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Case = "case", PatNullary, ExpNest => ActionFn(731);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant56(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action731::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant28(__nt), __end));
        (3, 41)
    }
    pub(crate) fn __reduce79<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Cases = Delim0<Node<Case>, ";"> => ActionFn(65);
        let __sym0 = __pop_Variant39(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action65::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 42)
    }
    pub(crate) fn __reduce80<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Dec = DecVar => ActionFn(71);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action71::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 43)
    }
    pub(crate) fn __reduce81<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Dec = DecNonVar => ActionFn(72);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action72::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 43)
    }
    pub(crate) fn __reduce82<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Dec = ExpNonDec<Ob> => ActionFn(73);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action73::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 43)
    }
    pub(crate) fn __reduce83<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecField = Vis, Stab, Dec => ActionFn(579);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant30(__symbols);
        let __sym1 = __pop_Variant61(__symbols);
        let __sym0 = __pop_Variant66(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action579::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant31(__nt), __end));
        (3, 44)
    }
    pub(crate) fn __reduce84<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecField = Stab, Dec => ActionFn(580);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant30(__symbols);
        let __sym0 = __pop_Variant61(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action580::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant31(__nt), __end));
        (2, 44)
    }
    pub(crate) fn __reduce85<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecField = Vis, Dec => ActionFn(581);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant30(__symbols);
        let __sym0 = __pop_Variant66(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action581::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant31(__nt), __end));
        (2, 44)
    }
    pub(crate) fn __reduce86<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecField = Dec => ActionFn(582);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action582::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant31(__nt), __end));
        (1, 44)
    }
    pub(crate) fn __reduce87<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecField_ = DecField => ActionFn(462);
        let __sym0 = __pop_Variant31(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action462::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 45)
    }
    pub(crate) fn __reduce88<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecField_? = DecField => ActionFn(464);
        let __sym0 = __pop_Variant31(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action464::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant32(__nt), __end));
        (1, 46)
    }
    pub(crate) fn __reduce89<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecField_? =  => ActionFn(210);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action210::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant32(__nt), __end));
        (0, 46)
    }
    pub(crate) fn __reduce90<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecNonVar = "let", Pat, "=", Exp<Ob> => ActionFn(741);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant27(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant56(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action741::<>(lookup, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (4, 47)
    }
    pub(crate) fn __reduce91<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecNonVar = "module", Id, "=", ObjBody => ActionFn(557);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant55(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant43(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action557::<>(lookup, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (4, 47)
    }
    pub(crate) fn __reduce92<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecNonVar = "module", "=", ObjBody => ActionFn(558);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant55(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action558::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (3, 47)
    }
    pub(crate) fn __reduce93<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecNonVar = "module", Id, ObjBody => ActionFn(559);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant55(__symbols);
        let __sym1 = __pop_Variant43(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action559::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (3, 47)
    }
    pub(crate) fn __reduce94<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecNonVar = "module", ObjBody => ActionFn(560);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant55(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action560::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (2, 47)
    }
    pub(crate) fn __reduce95<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecNonVar = SortPat, "func", Id, PatPlain, ":", Type, Block => ActionFn(745);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant27(__symbols);
        let __sym5 = __pop_Variant63(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant56(__symbols);
        let __sym2 = __pop_Variant43(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant59(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym6.2.clone();
        let __nt = super::__action745::<>(lookup, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (7, 47)
    }
    pub(crate) fn __reduce96<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecNonVar = SortPat, "func", PatPlain, ":", Type, Block => ActionFn(746);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant27(__symbols);
        let __sym4 = __pop_Variant63(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant56(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant59(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action746::<>(lookup, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (6, 47)
    }
    pub(crate) fn __reduce97<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecNonVar = SortPat, "func", Id, PatPlain, Block => ActionFn(747);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant27(__symbols);
        let __sym3 = __pop_Variant56(__symbols);
        let __sym2 = __pop_Variant43(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant59(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action747::<>(lookup, input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (5, 47)
    }
    pub(crate) fn __reduce98<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecNonVar = SortPat, "func", PatPlain, Block => ActionFn(748);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant27(__symbols);
        let __sym2 = __pop_Variant56(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant59(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action748::<>(lookup, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (4, 47)
    }
    pub(crate) fn __reduce99<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecNonVar = SortPat, "func", Id, PatPlain, ":", Type, "=", Exp<Ob> => ActionFn(749);
        assert!(__symbols.len() >= 8);
        let __sym7 = __pop_Variant27(__symbols);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant63(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant56(__symbols);
        let __sym2 = __pop_Variant43(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant59(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym7.2.clone();
        let __nt = super::__action749::<>(lookup, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (8, 47)
    }
    pub(crate) fn __reduce100<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecNonVar = SortPat, "func", PatPlain, ":", Type, "=", Exp<Ob> => ActionFn(750);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant27(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant63(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant56(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant59(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym6.2.clone();
        let __nt = super::__action750::<>(lookup, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (7, 47)
    }
    pub(crate) fn __reduce101<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecNonVar = SortPat, "func", Id, PatPlain, "=", Exp<Ob> => ActionFn(751);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant27(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant56(__symbols);
        let __sym2 = __pop_Variant43(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant59(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action751::<>(lookup, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (6, 47)
    }
    pub(crate) fn __reduce102<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecNonVar = SortPat, "func", PatPlain, "=", Exp<Ob> => ActionFn(752);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant27(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant56(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant59(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action752::<>(lookup, input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (5, 47)
    }
    pub(crate) fn __reduce103<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecNonVar_ = DecNonVar => ActionFn(596);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action596::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 48)
    }
    pub(crate) fn __reduce104<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecVar = "var", Pat, "=", Exp<Ob> => ActionFn(742);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant27(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant56(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action742::<>(lookup, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (4, 49)
    }
    pub(crate) fn __reduce105<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecVar_ = DecVar => ActionFn(599);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action599::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 50)
    }
    pub(crate) fn __reduce106<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Dec_ = Dec => ActionFn(469);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action469::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 51)
    }
    pub(crate) fn __reduce107<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Dec_? = Dec => ActionFn(472);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action472::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant33(__nt), __end));
        (1, 52)
    }
    pub(crate) fn __reduce108<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Dec_? =  => ActionFn(198);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action198::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant33(__nt), __end));
        (0, 52)
    }
    pub(crate) fn __reduce109<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Decs = Delim0<Dec_, ";"> => ActionFn(69);
        let __sym0 = __pop_Variant36(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action69::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant34(__nt), __end));
        (1, 53)
    }
    pub(crate) fn __reduce110<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim0<DecField_, ";"> = DecField => ActionFn(592);
        let __sym0 = __pop_Variant31(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action592::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant35(__nt), __end));
        (1, 54)
    }
    pub(crate) fn __reduce111<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim0<DecField_, ";"> =  => ActionFn(593);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action593::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant35(__nt), __end));
        (0, 54)
    }
    pub(crate) fn __reduce112<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim0<DecField_, ";"> = (<DecField_> ";")+, DecField => ActionFn(594);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant31(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action594::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant35(__nt), __end));
        (2, 54)
    }
    pub(crate) fn __reduce113<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim0<DecField_, ";"> = (<DecField_> ";")+ => ActionFn(595);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action595::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant35(__nt), __end));
        (1, 54)
    }
    pub(crate) fn __reduce114<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim0<Dec_, ";"> = Dec => ActionFn(602);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action602::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 55)
    }
    pub(crate) fn __reduce115<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim0<Dec_, ";"> =  => ActionFn(603);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action603::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (0, 55)
    }
    pub(crate) fn __reduce116<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim0<Dec_, ";"> = (<Dec_> ";")+, Dec => ActionFn(604);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant30(__symbols);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action604::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (2, 55)
    }
    pub(crate) fn __reduce117<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim0<Dec_, ";"> = (<Dec_> ";")+ => ActionFn(605);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action605::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 55)
    }
    pub(crate) fn __reduce118<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim0<ExpField_, ";"> = ExpField => ActionFn(666);
        let __sym0 = __pop_Variant41(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action666::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant37(__nt), __end));
        (1, 56)
    }
    pub(crate) fn __reduce119<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim0<ExpField_, ";"> =  => ActionFn(667);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action667::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant37(__nt), __end));
        (0, 56)
    }
    pub(crate) fn __reduce120<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim0<ExpField_, ";"> = (<ExpField_> ";")+, ExpField => ActionFn(668);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant41(__symbols);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action668::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant37(__nt), __end));
        (2, 56)
    }
    pub(crate) fn __reduce121<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim0<ExpField_, ";"> = (<ExpField_> ";")+ => ActionFn(669);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action669::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant37(__nt), __end));
        (1, 56)
    }
    pub(crate) fn __reduce122<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim0<ExpNonVar_<Ob>, ","> = ExpNonVar<Ob> => ActionFn(686);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action686::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant38(__nt), __end));
        (1, 57)
    }
    pub(crate) fn __reduce123<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim0<ExpNonVar_<Ob>, ","> =  => ActionFn(687);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action687::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant38(__nt), __end));
        (0, 57)
    }
    pub(crate) fn __reduce124<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim0<ExpNonVar_<Ob>, ","> = (<ExpNonVar_<Ob>> ",")+, ExpNonVar<Ob> => ActionFn(688);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action688::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant38(__nt), __end));
        (2, 57)
    }
    pub(crate) fn __reduce125<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim0<ExpNonVar_<Ob>, ","> = (<ExpNonVar_<Ob>> ",")+ => ActionFn(689);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action689::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant38(__nt), __end));
        (1, 57)
    }
    pub(crate) fn __reduce126<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim0<Node<Case>, ";"> = Case => ActionFn(721);
        let __sym0 = __pop_Variant28(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action721::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant39(__nt), __end));
        (1, 58)
    }
    pub(crate) fn __reduce127<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim0<Node<Case>, ";"> =  => ActionFn(722);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action722::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant39(__nt), __end));
        (0, 58)
    }
    pub(crate) fn __reduce128<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim0<Node<Case>, ";"> = (<Node<Case>> ";")+, Case => ActionFn(723);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant28(__symbols);
        let __sym0 = __pop_Variant15(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action723::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant39(__nt), __end));
        (2, 58)
    }
    pub(crate) fn __reduce129<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim0<Node<Case>, ";"> = (<Node<Case>> ";")+ => ActionFn(724);
        let __sym0 = __pop_Variant15(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action724::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant39(__nt), __end));
        (1, 58)
    }
    pub(crate) fn __reduce130<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim1<Exp_<Ob>, ","> = Exp<Ob> => ActionFn(497);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action497::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant38(__nt), __end));
        (1, 59)
    }
    pub(crate) fn __reduce131<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim1<Exp_<Ob>, ","> = (<Exp_<Ob>> ",")+, Exp<Ob> => ActionFn(717);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action717::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant38(__nt), __end));
        (2, 59)
    }
    pub(crate) fn __reduce132<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim1<Exp_<Ob>, ","> = (<Exp_<Ob>> ",")+ => ActionFn(718);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action718::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant38(__nt), __end));
        (1, 59)
    }
    pub(crate) fn __reduce133<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim1<PatBin_, ","> = PatBin => ActionFn(517);
        let __sym0 = __pop_Variant56(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action517::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant40(__nt), __end));
        (1, 60)
    }
    pub(crate) fn __reduce134<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim1<PatBin_, ","> = (<PatBin_> ",")+, PatBin => ActionFn(729);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant56(__symbols);
        let __sym0 = __pop_Variant17(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action729::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant40(__nt), __end));
        (2, 60)
    }
    pub(crate) fn __reduce135<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim1<PatBin_, ","> = (<PatBin_> ",")+ => ActionFn(730);
        let __sym0 = __pop_Variant17(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action730::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant40(__nt), __end));
        (1, 60)
    }
    pub(crate) fn __reduce136<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Exp<Bl> = ExpNonVar<Bl> => ActionFn(159);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action159::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 61)
    }
    pub(crate) fn __reduce137<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Exp<Bl> = DecVar => ActionFn(600);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action600::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 61)
    }
    pub(crate) fn __reduce138<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Exp<Ob> = ExpNonVar<Ob> => ActionFn(180);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action180::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 62)
    }
    pub(crate) fn __reduce139<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Exp<Ob> = DecVar => ActionFn(601);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action601::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 62)
    }
    pub(crate) fn __reduce140<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin000<Bl> = ExpBin000<Bl>, "or", ExpBin00<Bl> => ActionFn(611);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action611::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 63)
    }
    pub(crate) fn __reduce141<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin000<Bl> = ExpBin00<Bl> => ActionFn(272);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action272::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 63)
    }
    pub(crate) fn __reduce142<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin000<Ob> = ExpBin000<Ob>, "or", ExpBin00<Ob> => ActionFn(614);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action614::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 64)
    }
    pub(crate) fn __reduce143<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin000<Ob> = ExpBin00<Ob> => ActionFn(219);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action219::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 64)
    }
    pub(crate) fn __reduce144<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin000_<Bl> = ExpBin000<Bl> => ActionFn(606);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action606::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 65)
    }
    pub(crate) fn __reduce145<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin000_<Ob> = ExpBin000<Ob> => ActionFn(608);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action608::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 66)
    }
    pub(crate) fn __reduce146<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin00<Bl> = ExpBin00<Bl>, "and", ExpBin0<Bl> => ActionFn(617);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action617::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 67)
    }
    pub(crate) fn __reduce147<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin00<Bl> = ExpBin0<Bl> => ActionFn(283);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action283::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 67)
    }
    pub(crate) fn __reduce148<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin00<Ob> = ExpBin00<Ob>, "and", ExpBin0<Ob> => ActionFn(625);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action625::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 68)
    }
    pub(crate) fn __reduce149<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin00<Ob> = ExpBin0<Ob> => ActionFn(262);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action262::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 68)
    }
    pub(crate) fn __reduce150<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin00_<Bl> = ExpBin00<Bl> => ActionFn(610);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action610::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 69)
    }
    pub(crate) fn __reduce151<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin00_<Ob> = ExpBin00<Ob> => ActionFn(613);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action613::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 70)
    }
    pub(crate) fn __reduce152<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin0<Bl> = ExpBin0<Bl>, "+", ExpBin1<Bl> => ActionFn(633);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action633::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 71)
    }
    pub(crate) fn __reduce153<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin0<Bl> = ExpBin0<Bl>, "+%", ExpBin1<Bl> => ActionFn(634);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action634::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 71)
    }
    pub(crate) fn __reduce154<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin0<Bl> = ExpBin0<Bl>, "-", ExpBin1<Bl> => ActionFn(635);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action635::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 71)
    }
    pub(crate) fn __reduce155<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin0<Bl> = ExpBin0<Bl>, ":", Type => ActionFn(621);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant63(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action621::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 71)
    }
    pub(crate) fn __reduce156<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin0<Bl> = ExpBin1<Bl> => ActionFn(281);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action281::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 71)
    }
    pub(crate) fn __reduce157<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin0<Ob> = ExpBin0<Ob>, "+", ExpBin1<Ob> => ActionFn(639);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action639::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 72)
    }
    pub(crate) fn __reduce158<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin0<Ob> = ExpBin0<Ob>, "+%", ExpBin1<Ob> => ActionFn(640);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action640::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 72)
    }
    pub(crate) fn __reduce159<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin0<Ob> = ExpBin0<Ob>, "-", ExpBin1<Ob> => ActionFn(641);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action641::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 72)
    }
    pub(crate) fn __reduce160<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin0<Ob> = ExpBin0<Ob>, ":", Type => ActionFn(629);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant63(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action629::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 72)
    }
    pub(crate) fn __reduce161<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin0<Ob> = ExpBin1<Ob> => ActionFn(260);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action260::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 72)
    }
    pub(crate) fn __reduce162<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin0_<Bl> = ExpBin0<Bl> => ActionFn(616);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action616::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 73)
    }
    pub(crate) fn __reduce163<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin0_<Ob> = ExpBin0<Ob> => ActionFn(624);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action624::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 74)
    }
    pub(crate) fn __reduce164<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin1<Bl> = ExpBin2<Bl>, "*", ExpBin1<Bl> => ActionFn(645);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action645::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 75)
    }
    pub(crate) fn __reduce165<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin1<Bl> = ExpBin2<Bl>, "/", ExpBin1<Bl> => ActionFn(646);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action646::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 75)
    }
    pub(crate) fn __reduce166<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin1<Bl> = ExpBin2<Bl> => ActionFn(298);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action298::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 75)
    }
    pub(crate) fn __reduce167<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin1<Ob> = ExpBin2<Ob>, "*", ExpBin1<Ob> => ActionFn(649);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action649::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 76)
    }
    pub(crate) fn __reduce168<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin1<Ob> = ExpBin2<Ob>, "/", ExpBin1<Ob> => ActionFn(650);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action650::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 76)
    }
    pub(crate) fn __reduce169<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin1<Ob> = ExpBin2<Ob> => ActionFn(269);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action269::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 76)
    }
    pub(crate) fn __reduce170<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin1_<Bl> = ExpBin1<Bl> => ActionFn(632);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action632::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 77)
    }
    pub(crate) fn __reduce171<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin1_<Ob> = ExpBin1<Ob> => ActionFn(638);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action638::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 78)
    }
    pub(crate) fn __reduce172<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin2<Bl> = ExpBin3<Bl>, "|", ExpBin2<Bl> => ActionFn(653);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action653::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 79)
    }
    pub(crate) fn __reduce173<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin2<Bl> = ExpBin3<Bl> => ActionFn(302);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action302::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 79)
    }
    pub(crate) fn __reduce174<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin2<Ob> = ExpBin3<Ob>, "|", ExpBin2<Ob> => ActionFn(656);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action656::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 80)
    }
    pub(crate) fn __reduce175<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin2<Ob> = ExpBin3<Ob> => ActionFn(288);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action288::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 80)
    }
    pub(crate) fn __reduce176<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin2_<Bl> = ExpBin2<Bl> => ActionFn(644);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action644::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 81)
    }
    pub(crate) fn __reduce177<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin2_<Ob> = ExpBin2<Ob> => ActionFn(648);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action648::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 82)
    }
    pub(crate) fn __reduce178<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin3<Bl> = ExpUn<Bl>, "&", ExpBin3<Bl> => ActionFn(704);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action704::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 83)
    }
    pub(crate) fn __reduce179<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin3<Bl> = ExpUn<Bl> => ActionFn(324);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action324::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 83)
    }
    pub(crate) fn __reduce180<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin3<Ob> = ExpUn<Ob>, "&", ExpBin3<Ob> => ActionFn(708);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action708::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 84)
    }
    pub(crate) fn __reduce181<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin3<Ob> = ExpUn<Ob> => ActionFn(292);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action292::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 84)
    }
    pub(crate) fn __reduce182<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin3_<Bl> = ExpBin3<Bl> => ActionFn(652);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action652::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 85)
    }
    pub(crate) fn __reduce183<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin3_<Ob> = ExpBin3<Ob> => ActionFn(655);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action655::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 86)
    }
    pub(crate) fn __reduce184<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin<Bl> = ExpBin<Bl>, "==", ExpBin0<Bl> => ActionFn(659);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action659::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 87)
    }
    pub(crate) fn __reduce185<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin<Bl> = ExpBin<Bl>, "!=", ExpBin0<Bl> => ActionFn(660);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action660::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 87)
    }
    pub(crate) fn __reduce186<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin<Bl> = ExpBin000<Bl> => ActionFn(254);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action254::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 87)
    }
    pub(crate) fn __reduce187<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin<Ob> = ExpBin<Ob>, "==", ExpBin0<Ob> => ActionFn(663);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action663::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 88)
    }
    pub(crate) fn __reduce188<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin<Ob> = ExpBin<Ob>, "!=", ExpBin0<Ob> => ActionFn(664);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action664::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 88)
    }
    pub(crate) fn __reduce189<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin<Ob> = ExpBin000<Ob> => ActionFn(208);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action208::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 88)
    }
    pub(crate) fn __reduce190<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin_<Bl> = ExpBin<Bl> => ActionFn(658);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action658::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 89)
    }
    pub(crate) fn __reduce191<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin_<Ob> = ExpBin<Ob> => ActionFn(662);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action662::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 90)
    }
    pub(crate) fn __reduce192<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpField = VarOpt, Id, ":", Type, "=", Exp<Ob> => ActionFn(544);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant27(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant63(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant43(__symbols);
        let __sym0 = __pop_Variant65(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action544::<>(lookup, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant41(__nt), __end));
        (6, 91)
    }
    pub(crate) fn __reduce193<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpField = VarOpt, Id, "=", Exp<Ob> => ActionFn(545);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant27(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant43(__symbols);
        let __sym0 = __pop_Variant65(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action545::<>(lookup, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant41(__nt), __end));
        (4, 91)
    }
    pub(crate) fn __reduce194<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpField_ = ExpField => ActionFn(477);
        let __sym0 = __pop_Variant41(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action477::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (1, 92)
    }
    pub(crate) fn __reduce195<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpField_? = ExpField => ActionFn(479);
        let __sym0 = __pop_Variant41(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action479::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant42(__nt), __end));
        (1, 93)
    }
    pub(crate) fn __reduce196<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpField_? =  => ActionFn(188);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action188::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant42(__nt), __end));
        (0, 93)
    }
    pub(crate) fn __reduce197<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNest = Block => ActionFn(59);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action59::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 94)
    }
    pub(crate) fn __reduce198<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNest = Exp<Bl> => ActionFn(60);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action60::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 94)
    }
    pub(crate) fn __reduce199<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNest_ = ExpNest => ActionFn(670);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action670::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 95)
    }
    pub(crate) fn __reduce200<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Bl> = ExpBin<Bl> => ActionFn(233);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action233::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 96)
    }
    pub(crate) fn __reduce201<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Bl> = ExpBin<Bl>, ":=", Exp<Ob> => ActionFn(661);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action661::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 96)
    }
    pub(crate) fn __reduce202<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Bl> = "if", ExpNullary<Ob>, ExpNest, "else", ExpNest => ActionFn(672);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant27(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action672::<>(lookup, input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (5, 96)
    }
    pub(crate) fn __reduce203<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Bl> = "if", ExpNullary<Ob>, ExpNest, "\\no_else" => ActionFn(673);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action673::<>(lookup, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (4, 96)
    }
    pub(crate) fn __reduce204<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Bl> = "return", Exp<Bl> => ActionFn(715);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action715::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 96)
    }
    pub(crate) fn __reduce205<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Bl> = "return" => ActionFn(716);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action716::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 96)
    }
    pub(crate) fn __reduce206<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Bl> = "switch", ExpNullary<Ob>, "{", Cases, "}" => ActionFn(531);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant29(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action531::<>(lookup, input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (5, 96)
    }
    pub(crate) fn __reduce207<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Bl> = "while", ExpNullary<Ob>, ExpNest => ActionFn(674);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action674::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 96)
    }
    pub(crate) fn __reduce208<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Bl> = "for", "(", Pat, "in", Exp<Ob>, ")", ExpNest => ActionFn(743);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant27(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant27(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant56(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym6.2.clone();
        let __nt = super::__action743::<>(lookup, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (7, 96)
    }
    pub(crate) fn __reduce209<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Bl> = "ignore", ExpNest => ActionFn(676);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action676::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 96)
    }
    pub(crate) fn __reduce210<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Bl> = "do", Block => ActionFn(588);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action588::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 96)
    }
    pub(crate) fn __reduce211<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Bl> = "do", "?", Block => ActionFn(589);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action589::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 96)
    }
    pub(crate) fn __reduce212<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Bl> = "assert", ExpNest => ActionFn(677);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action677::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 96)
    }
    pub(crate) fn __reduce213<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Bl> = "debug", ExpNest => ActionFn(678);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action678::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 96)
    }
    pub(crate) fn __reduce214<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Ob> = ExpBin<Ob> => ActionFn(136);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action136::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 97)
    }
    pub(crate) fn __reduce215<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Ob> = ExpBin<Ob>, ":=", Exp<Ob> => ActionFn(665);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action665::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 97)
    }
    pub(crate) fn __reduce216<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Ob> = "if", ExpNullary<Ob>, ExpNest, "else", ExpNest => ActionFn(679);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant27(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action679::<>(lookup, input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (5, 97)
    }
    pub(crate) fn __reduce217<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Ob> = "if", ExpNullary<Ob>, ExpNest, "\\no_else" => ActionFn(680);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action680::<>(lookup, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (4, 97)
    }
    pub(crate) fn __reduce218<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Ob> = "return", Exp<Ob> => ActionFn(719);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action719::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 97)
    }
    pub(crate) fn __reduce219<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Ob> = "return" => ActionFn(720);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action720::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 97)
    }
    pub(crate) fn __reduce220<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Ob> = "switch", ExpNullary<Ob>, "{", Cases, "}" => ActionFn(535);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant29(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action535::<>(lookup, input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (5, 97)
    }
    pub(crate) fn __reduce221<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Ob> = "while", ExpNullary<Ob>, ExpNest => ActionFn(681);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action681::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 97)
    }
    pub(crate) fn __reduce222<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Ob> = "for", "(", Pat, "in", Exp<Ob>, ")", ExpNest => ActionFn(744);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant27(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant27(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant56(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym6.2.clone();
        let __nt = super::__action744::<>(lookup, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (7, 97)
    }
    pub(crate) fn __reduce223<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Ob> = "ignore", ExpNest => ActionFn(683);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action683::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 97)
    }
    pub(crate) fn __reduce224<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Ob> = "do", Block => ActionFn(590);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action590::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 97)
    }
    pub(crate) fn __reduce225<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Ob> = "do", "?", Block => ActionFn(591);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action591::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 97)
    }
    pub(crate) fn __reduce226<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Ob> = "assert", ExpNest => ActionFn(684);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action684::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 97)
    }
    pub(crate) fn __reduce227<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Ob> = "debug", ExpNest => ActionFn(685);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action685::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 97)
    }
    pub(crate) fn __reduce228<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonVar<Bl> = ExpNonDec<Bl> => ActionFn(185);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action185::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 98)
    }
    pub(crate) fn __reduce229<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonVar<Bl> = DecNonVar => ActionFn(597);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action597::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 98)
    }
    pub(crate) fn __reduce230<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonVar<Ob> = ExpNonDec<Ob> => ActionFn(246);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action246::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 99)
    }
    pub(crate) fn __reduce231<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonVar<Ob> = DecNonVar => ActionFn(598);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action598::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 99)
    }
    pub(crate) fn __reduce232<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonVar_<Ob> = ExpNonVar<Ob> => ActionFn(484);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action484::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 100)
    }
    pub(crate) fn __reduce233<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonVar_<Ob>? = ExpNonVar<Ob> => ActionFn(486);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action486::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (1, 101)
    }
    pub(crate) fn __reduce234<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonVar_<Ob>? =  => ActionFn(338);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action338::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (0, 101)
    }
    pub(crate) fn __reduce235<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNullary<Bl> = Bl => ActionFn(357);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action357::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 102)
    }
    pub(crate) fn __reduce236<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNullary<Bl> = ExpPlain => ActionFn(358);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action358::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 102)
    }
    pub(crate) fn __reduce237<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNullary<Bl> = Id => ActionFn(359);
        let __sym0 = __pop_Variant43(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action359::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 102)
    }
    pub(crate) fn __reduce238<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNullary<Bl> = "prim", StringLiteral => ActionFn(360);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant62(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action360::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 102)
    }
    pub(crate) fn __reduce239<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNullary<Ob> = Ob => ActionFn(223);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action223::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 103)
    }
    pub(crate) fn __reduce240<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNullary<Ob> = ExpPlain => ActionFn(224);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action224::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 103)
    }
    pub(crate) fn __reduce241<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNullary<Ob> = Id => ActionFn(225);
        let __sym0 = __pop_Variant43(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action225::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 103)
    }
    pub(crate) fn __reduce242<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNullary<Ob> = "prim", StringLiteral => ActionFn(226);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant62(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action226::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 103)
    }
    pub(crate) fn __reduce243<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNullary_<Bl> = ExpNullary<Bl> => ActionFn(522);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action522::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 104)
    }
    pub(crate) fn __reduce244<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNullary_<Ob> = ExpNullary<Ob> => ActionFn(527);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action527::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 105)
    }
    pub(crate) fn __reduce245<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpObj = "{", Delim0<ExpField_, ";">, "}" => ActionFn(63);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant37(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action63::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 106)
    }
    pub(crate) fn __reduce246<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpPlain = Literal => ActionFn(54);
        let __sym0 = __pop_Variant44(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action54::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 107)
    }
    pub(crate) fn __reduce247<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpPlain = "(", Delim1<Exp_<Ob>, ",">, ")" => ActionFn(55);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant38(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action55::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 107)
    }
    pub(crate) fn __reduce248<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpPlain_ = ExpPlain => ActionFn(690);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action690::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 108)
    }
    pub(crate) fn __reduce249<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpPost<Bl> = ExpNullary<Bl> => ActionFn(348);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action348::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 109)
    }
    pub(crate) fn __reduce250<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpPost<Bl> = "[", VarOpt, Delim0<ExpNonVar_<Ob>, ",">, "]" => ActionFn(349);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant38(__symbols);
        let __sym1 = __pop_Variant65(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action349::<>(lookup, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (4, 109)
    }
    pub(crate) fn __reduce251<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpPost<Bl> = ExpPost<Bl>, "[", Exp<Ob>, "]" => ActionFn(692);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action692::<>(lookup, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (4, 109)
    }
    pub(crate) fn __reduce252<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpPost<Bl> = ExpPost<Bl>, ".", NatIndex => ActionFn(693);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant25(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action693::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 109)
    }
    pub(crate) fn __reduce253<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpPost<Bl> = ExpPost<Bl>, ".", Id => ActionFn(694);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant43(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action694::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 109)
    }
    pub(crate) fn __reduce254<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpPost<Bl> = ExpPost<Bl>, ExpNullary<Ob> => ActionFn(695);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action695::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 109)
    }
    pub(crate) fn __reduce255<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpPost<Bl> = ExpPost<Bl>, "!" => ActionFn(696);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action696::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 109)
    }
    pub(crate) fn __reduce256<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpPost<Ob> = ExpNullary<Ob> => ActionFn(315);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action315::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 110)
    }
    pub(crate) fn __reduce257<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpPost<Ob> = "[", VarOpt, Delim0<ExpNonVar_<Ob>, ",">, "]" => ActionFn(316);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant38(__symbols);
        let __sym1 = __pop_Variant65(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action316::<>(lookup, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (4, 110)
    }
    pub(crate) fn __reduce258<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpPost<Ob> = ExpPost<Ob>, "[", Exp<Ob>, "]" => ActionFn(698);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action698::<>(lookup, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (4, 110)
    }
    pub(crate) fn __reduce259<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpPost<Ob> = ExpPost<Ob>, ".", NatIndex => ActionFn(699);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant25(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action699::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 110)
    }
    pub(crate) fn __reduce260<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpPost<Ob> = ExpPost<Ob>, ".", Id => ActionFn(700);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant43(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action700::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 110)
    }
    pub(crate) fn __reduce261<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpPost<Ob> = ExpPost<Ob>, ExpNullary<Ob> => ActionFn(701);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action701::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 110)
    }
    pub(crate) fn __reduce262<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpPost<Ob> = ExpPost<Ob>, "!" => ActionFn(702);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action702::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 110)
    }
    pub(crate) fn __reduce263<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpPost_<Bl> = ExpPost<Bl> => ActionFn(691);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action691::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 111)
    }
    pub(crate) fn __reduce264<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpPost_<Ob> = ExpPost<Ob> => ActionFn(697);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action697::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 112)
    }
    pub(crate) fn __reduce265<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpUn<Bl> = ExpPost<Bl> => ActionFn(327);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action327::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 113)
    }
    pub(crate) fn __reduce266<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpUn<Bl> = "#", Id, ExpNullary<Bl> => ActionFn(548);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant43(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action548::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 113)
    }
    pub(crate) fn __reduce267<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpUn<Bl> = "#", Id => ActionFn(549);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant43(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action549::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 113)
    }
    pub(crate) fn __reduce268<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpUn<Bl> = "?", ExpUn<Ob> => ActionFn(709);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action709::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 113)
    }
    pub(crate) fn __reduce269<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpUn<Bl> = UnOp, ExpUn<Bl> => ActionFn(705);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant64(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action705::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 113)
    }
    pub(crate) fn __reduce270<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpUn<Bl> = "not", ExpUn<Bl> => ActionFn(706);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action706::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 113)
    }
    pub(crate) fn __reduce271<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpUn<Ob> = ExpPost<Ob> => ActionFn(305);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action305::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 114)
    }
    pub(crate) fn __reduce272<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpUn<Ob> = "#", Id, ExpNullary<Ob> => ActionFn(550);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant43(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action550::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 114)
    }
    pub(crate) fn __reduce273<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpUn<Ob> = "#", Id => ActionFn(551);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant43(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action551::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 114)
    }
    pub(crate) fn __reduce274<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpUn<Ob> = "?", ExpUn<Ob> => ActionFn(710);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action710::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 114)
    }
    pub(crate) fn __reduce275<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpUn<Ob> = UnOp, ExpUn<Ob> => ActionFn(711);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant64(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action711::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 114)
    }
    pub(crate) fn __reduce276<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpUn<Ob> = "not", ExpUn<Ob> => ActionFn(712);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action712::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 114)
    }
    pub(crate) fn __reduce277<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpUn_<Bl> = ExpUn<Bl> => ActionFn(703);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action703::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 115)
    }
    pub(crate) fn __reduce278<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpUn_<Ob> = ExpUn<Ob> => ActionFn(707);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action707::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 116)
    }
    pub(crate) fn __reduce279<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Exp_<Bl> = Exp<Bl> => ActionFn(713);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action713::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 117)
    }
    pub(crate) fn __reduce280<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Exp_<Bl>? = Exp<Bl> => ActionFn(714);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action714::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (1, 118)
    }
    pub(crate) fn __reduce281<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Exp_<Bl>? =  => ActionFn(249);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action249::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (0, 118)
    }
    pub(crate) fn __reduce282<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Exp_<Ob> = Exp<Ob> => ActionFn(491);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action491::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 119)
    }
    pub(crate) fn __reduce283<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Exp_<Ob>? = Exp<Ob> => ActionFn(506);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action506::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (1, 120)
    }
    pub(crate) fn __reduce284<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Exp_<Ob>? =  => ActionFn(203);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action203::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (0, 120)
    }
    pub(crate) fn __reduce285<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Id = r#"[a-zA-Z_][a-zA-Z_0-9]*"# => ActionFn(8);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action8::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant43(__nt), __end));
        (1, 121)
    }
    pub(crate) fn __reduce286<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Id_ = Id => ActionFn(542);
        let __sym0 = __pop_Variant43(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action542::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (1, 122)
    }
    pub(crate) fn __reduce287<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Id_? = Id => ActionFn(552);
        let __sym0 = __pop_Variant43(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action552::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 123)
    }
    pub(crate) fn __reduce288<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Id_? =  => ActionFn(126);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action126::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (0, 123)
    }
    pub(crate) fn __reduce289<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Literal = "null" => ActionFn(10);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action10::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant44(__nt), __end));
        (1, 124)
    }
    pub(crate) fn __reduce290<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Literal = "true" => ActionFn(11);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action11::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant44(__nt), __end));
        (1, 124)
    }
    pub(crate) fn __reduce291<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Literal = "false" => ActionFn(12);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action12::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant44(__nt), __end));
        (1, 124)
    }
    pub(crate) fn __reduce292<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Literal = "(", ")" => ActionFn(13);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action13::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant44(__nt), __end));
        (2, 124)
    }
    pub(crate) fn __reduce293<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Literal = r#"[+-]?[0-9]([0-9_]*[0-9])?[Ee][0-9]([0-9_]*[0-9])?"# => ActionFn(14);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action14::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant44(__nt), __end));
        (1, 124)
    }
    pub(crate) fn __reduce294<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Literal = r#"[+-]?[0-9]([0-9_]*[0-9])?\\.([0-9]([0-9_]*[0-9])?)?([Ee][0-9]([0-9_]*[0-9])?)?"# => ActionFn(15);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action15::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant44(__nt), __end));
        (1, 124)
    }
    pub(crate) fn __reduce295<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Literal = r#"0x[0-9a-fA-F]+"# => ActionFn(16);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action16::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant44(__nt), __end));
        (1, 124)
    }
    pub(crate) fn __reduce296<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Literal = r#"[0-9]([0-9_]*[0-9])?"# => ActionFn(17);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action17::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant44(__nt), __end));
        (1, 124)
    }
    pub(crate) fn __reduce297<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Literal = r#"'(?:[^\\\\'\\s]|\\\\.)*'|' '"# => ActionFn(18);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action18::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant44(__nt), __end));
        (1, 124)
    }
    pub(crate) fn __reduce298<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Literal = StringLiteral => ActionFn(19);
        let __sym0 = __pop_Variant62(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action19::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant44(__nt), __end));
        (1, 124)
    }
    pub(crate) fn __reduce299<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // NatIndex = r#"[0-9]([0-9_]*[0-9])?"# => ActionFn(7);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action7::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (1, 125)
    }
    pub(crate) fn __reduce300<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<Block> = Block => ActionFn(407);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action407::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 126)
    }
    pub(crate) fn __reduce301<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<Case> = Case => ActionFn(408);
        let __sym0 = __pop_Variant28(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action408::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (1, 127)
    }
    pub(crate) fn __reduce302<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<Case>? = Case => ActionFn(510);
        let __sym0 = __pop_Variant28(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action510::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant46(__nt), __end));
        (1, 128)
    }
    pub(crate) fn __reduce303<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<Case>? =  => ActionFn(193);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action193::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant46(__nt), __end));
        (0, 128)
    }
    pub(crate) fn __reduce304<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<Dec> = Dec => ActionFn(409);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action409::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant47(__nt), __end));
        (1, 129)
    }
    pub(crate) fn __reduce305<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<DecField> = DecField => ActionFn(410);
        let __sym0 = __pop_Variant31(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action410::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant48(__nt), __end));
        (1, 130)
    }
    pub(crate) fn __reduce306<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<DecNonVar> = DecNonVar => ActionFn(411);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action411::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant47(__nt), __end));
        (1, 131)
    }
    pub(crate) fn __reduce307<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<DecVar> = DecVar => ActionFn(412);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action412::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant47(__nt), __end));
        (1, 132)
    }
    pub(crate) fn __reduce308<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<Exp<Bl>> = Exp<Bl> => ActionFn(413);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action413::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 133)
    }
    pub(crate) fn __reduce309<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<Exp<Ob>> = Exp<Ob> => ActionFn(414);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action414::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 134)
    }
    pub(crate) fn __reduce310<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpBin000<Bl>> = ExpBin000<Bl> => ActionFn(415);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action415::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 135)
    }
    pub(crate) fn __reduce311<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpBin000<Ob>> = ExpBin000<Ob> => ActionFn(416);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action416::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 136)
    }
    pub(crate) fn __reduce312<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpBin00<Bl>> = ExpBin00<Bl> => ActionFn(417);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action417::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 137)
    }
    pub(crate) fn __reduce313<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpBin00<Ob>> = ExpBin00<Ob> => ActionFn(418);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action418::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 138)
    }
    pub(crate) fn __reduce314<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpBin0<Bl>> = ExpBin0<Bl> => ActionFn(419);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action419::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 139)
    }
    pub(crate) fn __reduce315<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpBin0<Ob>> = ExpBin0<Ob> => ActionFn(420);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action420::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 140)
    }
    pub(crate) fn __reduce316<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpBin1<Bl>> = ExpBin1<Bl> => ActionFn(421);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action421::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 141)
    }
    pub(crate) fn __reduce317<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpBin1<Ob>> = ExpBin1<Ob> => ActionFn(422);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action422::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 142)
    }
    pub(crate) fn __reduce318<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpBin2<Bl>> = ExpBin2<Bl> => ActionFn(423);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action423::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 143)
    }
    pub(crate) fn __reduce319<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpBin2<Ob>> = ExpBin2<Ob> => ActionFn(424);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action424::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 144)
    }
    pub(crate) fn __reduce320<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpBin3<Bl>> = ExpBin3<Bl> => ActionFn(425);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action425::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 145)
    }
    pub(crate) fn __reduce321<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpBin3<Ob>> = ExpBin3<Ob> => ActionFn(426);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action426::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 146)
    }
    pub(crate) fn __reduce322<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpBin<Bl>> = ExpBin<Bl> => ActionFn(427);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action427::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 147)
    }
    pub(crate) fn __reduce323<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpBin<Ob>> = ExpBin<Ob> => ActionFn(428);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action428::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 148)
    }
    pub(crate) fn __reduce324<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpField> = ExpField => ActionFn(429);
        let __sym0 = __pop_Variant41(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action429::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (1, 149)
    }
    pub(crate) fn __reduce325<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpNest> = ExpNest => ActionFn(430);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action430::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 150)
    }
    pub(crate) fn __reduce326<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpNonVar<Ob>> = ExpNonVar<Ob> => ActionFn(431);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action431::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 151)
    }
    pub(crate) fn __reduce327<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpNullary<Bl>> = ExpNullary<Bl> => ActionFn(432);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action432::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 152)
    }
    pub(crate) fn __reduce328<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpNullary<Ob>> = ExpNullary<Ob> => ActionFn(433);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action433::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 153)
    }
    pub(crate) fn __reduce329<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpPlain> = ExpPlain => ActionFn(434);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action434::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 154)
    }
    pub(crate) fn __reduce330<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpPost<Bl>> = ExpPost<Bl> => ActionFn(435);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action435::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 155)
    }
    pub(crate) fn __reduce331<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpPost<Ob>> = ExpPost<Ob> => ActionFn(436);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action436::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 156)
    }
    pub(crate) fn __reduce332<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpUn<Bl>> = ExpUn<Bl> => ActionFn(437);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action437::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 157)
    }
    pub(crate) fn __reduce333<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpUn<Ob>> = ExpUn<Ob> => ActionFn(438);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action438::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 158)
    }
    pub(crate) fn __reduce334<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<Id> = Id => ActionFn(439);
        let __sym0 = __pop_Variant43(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action439::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant49(__nt), __end));
        (1, 159)
    }
    pub(crate) fn __reduce335<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<Pat> = Pat => ActionFn(440);
        let __sym0 = __pop_Variant56(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action440::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant50(__nt), __end));
        (1, 160)
    }
    pub(crate) fn __reduce336<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<PatBin> = PatBin => ActionFn(441);
        let __sym0 = __pop_Variant56(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action441::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant50(__nt), __end));
        (1, 161)
    }
    pub(crate) fn __reduce337<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<PatNullary> = PatNullary => ActionFn(442);
        let __sym0 = __pop_Variant56(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action442::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant50(__nt), __end));
        (1, 162)
    }
    pub(crate) fn __reduce338<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<PatPlain> = PatPlain => ActionFn(443);
        let __sym0 = __pop_Variant56(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action443::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant50(__nt), __end));
        (1, 163)
    }
    pub(crate) fn __reduce339<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<SortPat> = SortPat => ActionFn(444);
        let __sym0 = __pop_Variant59(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action444::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant51(__nt), __end));
        (1, 164)
    }
    pub(crate) fn __reduce340<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<Stab> = Stab => ActionFn(445);
        let __sym0 = __pop_Variant61(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action445::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant52(__nt), __end));
        (1, 165)
    }
    pub(crate) fn __reduce341<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<Type> = Type => ActionFn(446);
        let __sym0 = __pop_Variant63(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action446::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant53(__nt), __end));
        (1, 166)
    }
    pub(crate) fn __reduce342<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<Vis> = Vis => ActionFn(447);
        let __sym0 = __pop_Variant66(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action447::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant54(__nt), __end));
        (1, 167)
    }
    pub(crate) fn __reduce343<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Ob = ExpObj => ActionFn(6);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action6::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 168)
    }
    pub(crate) fn __reduce344<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ObjBody = "{", Delim0<DecField_, ";">, "}" => ActionFn(103);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant35(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action103::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant55(__nt), __end));
        (3, 169)
    }
    pub(crate) fn __reduce345<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Pat = PatBin => ActionFn(35);
        let __sym0 = __pop_Variant56(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action35::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant56(__nt), __end));
        (1, 170)
    }
    pub(crate) fn __reduce346<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PatBin = PatBin, ":", Type => ActionFn(518);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant63(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant56(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action518::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant56(__nt), __end));
        (3, 171)
    }
    pub(crate) fn __reduce347<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PatBin = PatUn => ActionFn(30);
        let __sym0 = __pop_Variant56(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action30::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant56(__nt), __end));
        (1, 171)
    }
    pub(crate) fn __reduce348<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PatBin_ = PatBin => ActionFn(515);
        let __sym0 = __pop_Variant56(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action515::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (1, 172)
    }
    pub(crate) fn __reduce349<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PatBin_? = PatBin => ActionFn(519);
        let __sym0 = __pop_Variant56(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action519::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 173)
    }
    pub(crate) fn __reduce350<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PatBin_? =  => ActionFn(175);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action175::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (0, 173)
    }
    pub(crate) fn __reduce351<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PatNullary = PatPlain => ActionFn(27);
        let __sym0 = __pop_Variant56(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action27::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant56(__nt), __end));
        (1, 174)
    }
    pub(crate) fn __reduce352<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PatNullary_ = PatNullary => ActionFn(726);
        let __sym0 = __pop_Variant56(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action726::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (1, 175)
    }
    pub(crate) fn __reduce353<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PatPlain = "_" => ActionFn(22);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action22::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant56(__nt), __end));
        (1, 176)
    }
    pub(crate) fn __reduce354<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PatPlain = Id => ActionFn(553);
        let __sym0 = __pop_Variant43(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action553::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant56(__nt), __end));
        (1, 176)
    }
    pub(crate) fn __reduce355<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PatPlain = Literal => ActionFn(24);
        let __sym0 = __pop_Variant44(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action24::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant56(__nt), __end));
        (1, 176)
    }
    pub(crate) fn __reduce356<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PatPlain = "(", Delim1<PatBin_, ",">, ")" => ActionFn(25);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant40(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action25::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant56(__nt), __end));
        (3, 176)
    }
    pub(crate) fn __reduce357<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PatPlain_ = PatPlain => ActionFn(727);
        let __sym0 = __pop_Variant56(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action727::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (1, 177)
    }
    pub(crate) fn __reduce358<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PatUn = PatNullary => ActionFn(31);
        let __sym0 = __pop_Variant56(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action31::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant56(__nt), __end));
        (1, 178)
    }
    pub(crate) fn __reduce359<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PatUn = "#", Id => ActionFn(554);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant43(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action554::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant56(__nt), __end));
        (2, 178)
    }
    pub(crate) fn __reduce360<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PatUn = "#", Id, PatNullary => ActionFn(732);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant56(__symbols);
        let __sym1 = __pop_Variant43(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action732::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant56(__nt), __end));
        (3, 178)
    }
    pub(crate) fn __reduce361<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Pat_ = Pat => ActionFn(725);
        let __sym0 = __pop_Variant56(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action725::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (1, 179)
    }
    pub(crate) fn __reduce362<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PrimType = "(", ")" => ActionFn(36);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action36::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant58(__nt), __end));
        (2, 180)
    }
    pub(crate) fn __reduce363<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PrimType = "Bool" => ActionFn(37);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action37::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant58(__nt), __end));
        (1, 180)
    }
    pub(crate) fn __reduce364<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PrimType = "Nat" => ActionFn(38);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action38::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant58(__nt), __end));
        (1, 180)
    }
    pub(crate) fn __reduce365<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PrimType = "Nat8" => ActionFn(39);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action39::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant58(__nt), __end));
        (1, 180)
    }
    pub(crate) fn __reduce366<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PrimType = "Nat16" => ActionFn(40);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action40::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant58(__nt), __end));
        (1, 180)
    }
    pub(crate) fn __reduce367<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PrimType = "Nat32" => ActionFn(41);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action41::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant58(__nt), __end));
        (1, 180)
    }
    pub(crate) fn __reduce368<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PrimType = "Nat64" => ActionFn(42);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action42::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant58(__nt), __end));
        (1, 180)
    }
    pub(crate) fn __reduce369<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PrimType = "Int" => ActionFn(43);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action43::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant58(__nt), __end));
        (1, 180)
    }
    pub(crate) fn __reduce370<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PrimType = "Int8" => ActionFn(44);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action44::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant58(__nt), __end));
        (1, 180)
    }
    pub(crate) fn __reduce371<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PrimType = "Int16" => ActionFn(45);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action45::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant58(__nt), __end));
        (1, 180)
    }
    pub(crate) fn __reduce372<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PrimType = "Int32" => ActionFn(46);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action46::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant58(__nt), __end));
        (1, 180)
    }
    pub(crate) fn __reduce373<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PrimType = "Int64" => ActionFn(47);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action47::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant58(__nt), __end));
        (1, 180)
    }
    pub(crate) fn __reduce374<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PrimType = "Principal" => ActionFn(48);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action48::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant58(__nt), __end));
        (1, 180)
    }
    pub(crate) fn __reduce375<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PrimType = "Text" => ActionFn(49);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action49::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant58(__nt), __end));
        (1, 180)
    }
    pub(crate) fn __reduce376<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Prog = Decs => ActionFn(52);
        let __sym0 = __pop_Variant34(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action52::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant34(__nt), __end));
        (1, 181)
    }
    pub(crate) fn __reduce377<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // SortPat =  => ActionFn(80);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action80::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant59(__nt), __end));
        (0, 182)
    }
    pub(crate) fn __reduce378<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // SortPat_ = SortPat => ActionFn(728);
        let __sym0 = __pop_Variant59(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action728::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant60(__nt), __end));
        (1, 183)
    }
    pub(crate) fn __reduce379<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Stab = "stable" => ActionFn(108);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action108::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant61(__nt), __end));
        (1, 184)
    }
    pub(crate) fn __reduce380<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Stab = "flexible" => ActionFn(109);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action109::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant61(__nt), __end));
        (1, 184)
    }
    pub(crate) fn __reduce381<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Stab_ = Stab => ActionFn(571);
        let __sym0 = __pop_Variant61(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action571::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (1, 185)
    }
    pub(crate) fn __reduce382<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // StringLiteral = r#"\"(?:[^\\\\\"\\n]|\\\\.)*\""# => ActionFn(20);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action20::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant62(__nt), __end));
        (1, 186)
    }
    pub(crate) fn __reduce383<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // TextId = Id => ActionFn(64);
        let __sym0 = __pop_Variant43(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action64::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant62(__nt), __end));
        (1, 187)
    }
    pub(crate) fn __reduce384<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Type = PrimType => ActionFn(51);
        let __sym0 = __pop_Variant58(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action51::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant63(__nt), __end));
        (1, 188)
    }
    pub(crate) fn __reduce385<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Type_ = Type => ActionFn(448);
        let __sym0 = __pop_Variant63(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action448::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 189)
    }
    pub(crate) fn __reduce386<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // UnOp = "+" => ActionFn(83);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action83::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant64(__nt), __end));
        (1, 190)
    }
    pub(crate) fn __reduce387<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // UnOp = "-" => ActionFn(84);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action84::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant64(__nt), __end));
        (1, 190)
    }
    pub(crate) fn __reduce388<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // UnOp = "^" => ActionFn(85);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action85::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant64(__nt), __end));
        (1, 190)
    }
    pub(crate) fn __reduce389<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // VarOpt = "var" => ActionFn(56);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action56::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant65(__nt), __end));
        (1, 191)
    }
    pub(crate) fn __reduce390<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // VarOpt =  => ActionFn(57);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action57::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant65(__nt), __end));
        (0, 191)
    }
    pub(crate) fn __reduce391<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Vis = "public" => ActionFn(105);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action105::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant66(__nt), __end));
        (1, 192)
    }
    pub(crate) fn __reduce392<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Vis = "private" => ActionFn(106);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action106::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant66(__nt), __end));
        (1, 192)
    }
    pub(crate) fn __reduce393<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Vis_ = Vis => ActionFn(576);
        let __sym0 = __pop_Variant66(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action576::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (1, 193)
    }
    pub(crate) fn __reduce395<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // __Pat = Pat => ActionFn(1);
        let __sym0 = __pop_Variant56(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action1::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant56(__nt), __end));
        (1, 195)
    }
    pub(crate) fn __reduce396<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // __PrimType = PrimType => ActionFn(2);
        let __sym0 = __pop_Variant58(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action2::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant58(__nt), __end));
        (1, 196)
    }
    pub(crate) fn __reduce397<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // __Prog = Prog => ActionFn(4);
        let __sym0 = __pop_Variant34(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action4::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant34(__nt), __end));
        (1, 197)
    }
    pub(crate) fn __reduce398<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // __Type = Type => ActionFn(3);
        let __sym0 = __pop_Variant63(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action3::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant63(__nt), __end));
        (1, 198)
    }
}
pub use self::__parse__Literal::LiteralParser;

#[cfg_attr(rustfmt, rustfmt_skip)]
mod __parse__Pat {
    #![allow(non_snake_case, non_camel_case_types, unused_mut, unused_variables, unused_imports, unused_parens, clippy::all)]

    use crate::parser_utils::{dec_node_into_exp, get_one, node};
    use crate::ast::{Node, Source, Id, Id_, Pat, Pat_, Exp, Exp_, ExpField, Type, Type_, PrimType, Literal, Case, Cases, Decs, Dec, Dec_, UnOp, BinOp, RelOp, Delim, Mut, SortPat, SortPat_, Sugar, Vis, Vis_, Stab, Stab_, DecField, DecField_, DecFields};
    use line_col::LineColLookup;
    #[allow(unused_extern_crates)]
    extern crate lalrpop_util as __lalrpop_util;
    #[allow(unused_imports)]
    use self::__lalrpop_util::state_machine as __state_machine;
    extern crate core;
    extern crate alloc;
    use self::__lalrpop_util::lexer::Token;
    #[allow(dead_code)]
    pub(crate) enum __Symbol<'input>
     {
        Variant0(&'input str),
        Variant1(core::option::Option<&'input str>),
        Variant2(Type_),
        Variant3(core::option::Option<Type_>),
        Variant4((&'input str, Type_)),
        Variant5(core::option::Option<(&'input str, Type_)>),
        Variant6(DecField_),
        Variant7(alloc::vec::Vec<DecField_>),
        Variant8(Dec_),
        Variant9(alloc::vec::Vec<Dec_>),
        Variant10(Node<ExpField>),
        Variant11(alloc::vec::Vec<Node<ExpField>>),
        Variant12(Exp_),
        Variant13(alloc::vec::Vec<Exp_>),
        Variant14(Node<Case>),
        Variant15(alloc::vec::Vec<Node<Case>>),
        Variant16(Pat_),
        Variant17(alloc::vec::Vec<Pat_>),
        Variant18(core::option::Option<Exp_>),
        Variant19(Id_),
        Variant20(core::option::Option<Id_>),
        Variant21(Stab_),
        Variant22(core::option::Option<Stab_>),
        Variant23(Vis_),
        Variant24(core::option::Option<Vis_>),
        Variant25(usize),
        Variant26(BinOp),
        Variant27(Exp),
        Variant28(Case),
        Variant29(Cases),
        Variant30(Dec),
        Variant31(DecField),
        Variant32(core::option::Option<DecField_>),
        Variant33(core::option::Option<Dec_>),
        Variant34(Decs),
        Variant35(Delim<DecField_>),
        Variant36(Delim<Dec_>),
        Variant37(Delim<Node<ExpField>>),
        Variant38(Delim<Exp_>),
        Variant39(Delim<Node<Case>>),
        Variant40(Delim<Pat_>),
        Variant41(ExpField),
        Variant42(core::option::Option<Node<ExpField>>),
        Variant43(Id),
        Variant44(Literal),
        Variant45(Node<Exp>),
        Variant46(core::option::Option<Node<Case>>),
        Variant47(Node<Dec>),
        Variant48(Node<DecField>),
        Variant49(Node<Id>),
        Variant50(Node<Pat>),
        Variant51(Node<SortPat>),
        Variant52(Node<Stab>),
        Variant53(Node<Type>),
        Variant54(Node<Vis>),
        Variant55(DecFields),
        Variant56(Pat),
        Variant57(core::option::Option<Pat_>),
        Variant58(PrimType),
        Variant59(SortPat),
        Variant60(SortPat_),
        Variant61(Stab),
        Variant62(String),
        Variant63(Type),
        Variant64(UnOp),
        Variant65(Mut),
        Variant66(Vis),
    }
    const __ACTION: &[i16] = &[
        // State 0
        0, 0, 2, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 19, 20, 21, 22, 23, 24, 25, 0,
        // State 1
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 0,
        // State 2
        0, 0, 2, 0, 0, 3, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 19, 20, 21, 22, 23, 24, 25, 0,
        // State 3
        0, 0, 0, 0, 0, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 4
        0, 0, 0, 0, 0, 3, -360, 0, 0, 0, 0, 0, 0, -360, 0, 0, 0, 0, -360, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 19, 20, 21, 22, 23, 24, 25, 0,
        // State 5
        0, 0, 2, 0, 0, 3, -136, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 19, 20, 21, 22, 23, 24, 25, 0,
        // State 6
        0, 0, 0, 0, 0, 0, -355, 0, 0, 0, 0, 0, 0, -355, 0, 0, 0, 0, -355, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 7
        0, 0, 0, 0, 0, 0, -356, 0, 0, 0, 0, 0, 0, -356, 0, 0, 0, 0, -356, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 8
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 9
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 10
        0, 0, 0, 0, 0, 0, -359, 0, 0, 0, 0, 0, 0, -359, 0, 0, 0, 0, -359, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 11
        0, 0, 0, 0, 0, 0, -352, 0, 0, 0, 0, 0, 0, -352, 0, 0, 0, 0, -352, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 12
        0, 0, 0, 0, 0, 0, -348, 0, 0, 0, 0, 0, 0, -348, 0, 0, 0, 0, -348, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 13
        0, 0, 0, 0, 0, 0, -299, 0, 0, 0, 0, 0, 0, -299, 0, 0, 0, 0, -299, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 14
        0, 0, 0, 0, 0, 0, -354, 0, 0, 0, 0, 0, 0, -354, 0, 0, 0, 0, -354, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 15
        0, 0, 0, 0, 0, 0, -292, 0, 0, 0, 0, 0, 0, -292, 0, 0, 0, 0, -292, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 16
        0, 0, 0, 0, 0, 0, -290, 0, 0, 0, 0, 0, 0, -290, 0, 0, 0, 0, -290, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 17
        0, 0, 0, 0, 0, 0, -291, 0, 0, 0, 0, 0, 0, -291, 0, 0, 0, 0, -291, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 18
        0, 0, 0, 0, 0, 0, -383, 0, 0, 0, 0, 0, 0, -383, 0, 0, 0, 0, -383, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 19
        0, 0, 0, 0, 0, 0, -298, 0, 0, 0, 0, 0, 0, -298, 0, 0, 0, 0, -298, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 20
        0, 0, 0, 0, 0, 0, -296, 0, 0, 0, 0, 0, 0, -296, 0, 0, 0, 0, -296, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 21
        0, 0, 0, 0, 0, 0, -294, 0, 0, 0, 0, 0, 0, -294, 0, 0, 0, 0, -294, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 22
        0, 0, 0, 0, 0, 0, -295, 0, 0, 0, 0, 0, 0, -295, 0, 0, 0, 0, -295, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 23
        0, 0, 0, 0, 0, 0, -297, 0, 0, 0, 0, 0, 0, -297, 0, 0, 0, 0, -297, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 24
        0, 0, 0, 0, 0, -286, -286, 0, 0, 0, 0, 0, 0, -286, 0, 0, 0, 0, -286, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -286, 0, 0, 0, 0, 0, 0, -286, 0, 0, 0, 0, 0, 0, 0, 0, 0, -286, 0, 0, 0, 0, 0, 0, 0, -286, 0, 0, 0, 0, 0, -286, -286, -286, -286, -286, -286, -286, 0,
        // State 25
        0, 0, 0, 0, 0, 0, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 26
        0, 0, 0, 0, 0, 0, -134, 0, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 27
        0, 0, 0, 0, 0, 0, -293, 0, 0, 0, 0, 0, 0, -293, 0, 0, 0, 0, -293, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 28
        0, 0, 0, 0, 0, 0, -385, 0, 0, 0, 0, 0, 0, -385, 0, 0, 0, 0, -385, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 29
        0, 0, 0, 0, 0, 0, -347, 0, 0, 0, 0, 0, 0, -347, 0, 0, 0, 0, -347, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 30
        0, 0, 0, 0, 0, 0, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 31
        0, 0, 0, 0, 0, 0, -364, 0, 0, 0, 0, 0, 0, -364, 0, 0, 0, 0, -364, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 32
        0, 0, 0, 0, 0, 0, -370, 0, 0, 0, 0, 0, 0, -370, 0, 0, 0, 0, -370, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 33
        0, 0, 0, 0, 0, 0, -372, 0, 0, 0, 0, 0, 0, -372, 0, 0, 0, 0, -372, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 34
        0, 0, 0, 0, 0, 0, -373, 0, 0, 0, 0, 0, 0, -373, 0, 0, 0, 0, -373, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 35
        0, 0, 0, 0, 0, 0, -374, 0, 0, 0, 0, 0, 0, -374, 0, 0, 0, 0, -374, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 36
        0, 0, 0, 0, 0, 0, -371, 0, 0, 0, 0, 0, 0, -371, 0, 0, 0, 0, -371, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 37
        0, 0, 0, 0, 0, 0, -365, 0, 0, 0, 0, 0, 0, -365, 0, 0, 0, 0, -365, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 38
        0, 0, 0, 0, 0, 0, -367, 0, 0, 0, 0, 0, 0, -367, 0, 0, 0, 0, -367, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 39
        0, 0, 0, 0, 0, 0, -368, 0, 0, 0, 0, 0, 0, -368, 0, 0, 0, 0, -368, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 40
        0, 0, 0, 0, 0, 0, -369, 0, 0, 0, 0, 0, 0, -369, 0, 0, 0, 0, -369, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 41
        0, 0, 0, 0, 0, 0, -366, 0, 0, 0, 0, 0, 0, -366, 0, 0, 0, 0, -366, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 42
        0, 0, 0, 0, 0, 0, -375, 0, 0, 0, 0, 0, 0, -375, 0, 0, 0, 0, -375, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 43
        0, 0, 0, 0, 0, 0, -376, 0, 0, 0, 0, 0, 0, -376, 0, 0, 0, 0, -376, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 44
        0, 0, 0, 0, 0, 0, -361, 0, 0, 0, 0, 0, 0, -361, 0, 0, 0, 0, -361, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 45
        0, 0, 0, 0, 0, 0, -135, 0, 0, 0, 0, 0, 0, 50, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 46
        0, 0, 0, 0, 0, 0, -357, 0, 0, 0, 0, 0, 0, -357, 0, 0, 0, 0, -357, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 47
        0, 0, -38, 0, 0, -38, -38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -38, 0, 0, 0, 0, 0, 0, -38, 0, 0, 0, 0, 0, 0, 0, 0, 0, -38, 0, 0, 0, 0, 0, 0, 0, -38, 0, 0, 0, 0, 0, -38, -38, -38, -38, -38, -38, -38, 0,
        // State 48
        0, 0, 0, 0, 0, 0, -363, 0, 0, 0, 0, 0, 0, -363, 0, 0, 0, 0, -363, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 49
        0, 0, -39, 0, 0, -39, -39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -39, 0, 0, 0, 0, 0, 0, -39, 0, 0, 0, 0, 0, 0, 0, 0, 0, -39, 0, 0, 0, 0, 0, 0, 0, -39, 0, 0, 0, 0, 0, -39, -39, -39, -39, -39, -39, -39, 0,
    ];
    fn __action(state: i16, integer: usize) -> i16 {
        __ACTION[(state as usize) * 83 + integer]
    }
    const __EOF_ACTION: &[i16] = &[
        // State 0
        0,
        // State 1
        0,
        // State 2
        0,
        // State 3
        0,
        // State 4
        -360,
        // State 5
        0,
        // State 6
        -355,
        // State 7
        -356,
        // State 8
        -396,
        // State 9
        -346,
        // State 10
        -359,
        // State 11
        -352,
        // State 12
        -348,
        // State 13
        -299,
        // State 14
        -354,
        // State 15
        -292,
        // State 16
        -290,
        // State 17
        -291,
        // State 18
        -383,
        // State 19
        -298,
        // State 20
        -296,
        // State 21
        -294,
        // State 22
        -295,
        // State 23
        -297,
        // State 24
        -286,
        // State 25
        0,
        // State 26
        0,
        // State 27
        -293,
        // State 28
        -385,
        // State 29
        -347,
        // State 30
        0,
        // State 31
        -364,
        // State 32
        -370,
        // State 33
        -372,
        // State 34
        -373,
        // State 35
        -374,
        // State 36
        -371,
        // State 37
        -365,
        // State 38
        -367,
        // State 39
        -368,
        // State 40
        -369,
        // State 41
        -366,
        // State 42
        -375,
        // State 43
        -376,
        // State 44
        -361,
        // State 45
        0,
        // State 46
        -357,
        // State 47
        0,
        // State 48
        -363,
        // State 49
        0,
    ];
    fn __goto(state: i16, nt: usize) -> i16 {
        match nt {
            23 => 5,
            60 => 25,
            121 => match state {
                1 => 4,
                _ => 6,
            },
            124 => 7,
            170 => 8,
            171 => match state {
                2 => 26,
                5 => 45,
                _ => 9,
            },
            174 => match state {
                4 => 44,
                _ => 10,
            },
            176 => 11,
            178 => 12,
            180 => 28,
            186 => 13,
            188 => 29,
            _ => 0,
        }
    }
    fn __expected_tokens(__state: i16) -> alloc::vec::Vec<alloc::string::String> {
        const __TERMINAL: &[&str] = &[
            r###""!""###,
            r###""!=""###,
            r###""#""###,
            r###""%""###,
            r###""&""###,
            r###""(""###,
            r###"")""###,
            r###""*""###,
            r###""*%""###,
            r###""**""###,
            r###""**%""###,
            r###""+""###,
            r###""+%""###,
            r###"",""###,
            r###""-""###,
            r###""-%""###,
            r###"".""###,
            r###""/""###,
            r###"":""###,
            r###"":=""###,
            r###"";""###,
            r###""<<""###,
            r###""<<>""###,
            r###""<>>""###,
            r###""=""###,
            r###""==""###,
            r###""?""###,
            r###""Bool""###,
            r###""Int""###,
            r###""Int16""###,
            r###""Int32""###,
            r###""Int64""###,
            r###""Int8""###,
            r###""Nat""###,
            r###""Nat16""###,
            r###""Nat32""###,
            r###""Nat64""###,
            r###""Nat8""###,
            r###""Principal""###,
            r###""Text""###,
            r###""[""###,
            r###""\\no_else""###,
            r###""]""###,
            r###""^""###,
            r###""_""###,
            r###""and""###,
            r###""assert""###,
            r###""case""###,
            r###""debug""###,
            r###""do""###,
            r###""else""###,
            r###""false""###,
            r###""flexible""###,
            r###""for""###,
            r###""func""###,
            r###""if""###,
            r###""ignore""###,
            r###""in""###,
            r###""let""###,
            r###""module""###,
            r###""not""###,
            r###""null""###,
            r###""or""###,
            r###""prim""###,
            r###""private""###,
            r###""public""###,
            r###""return""###,
            r###""stable""###,
            r###""switch""###,
            r###""true""###,
            r###""var""###,
            r###""while""###,
            r###""{""###,
            r###""|""###,
            r###""}""###,
            r###"r#"\"(?:[^\\\\\"\\n]|\\\\.)*\""#"###,
            r###"r#"'(?:[^\\\\'\\s]|\\\\.)*'|' '"#"###,
            r###"r#"0x[0-9a-fA-F]+"#"###,
            r###"r#"[+-]?[0-9]([0-9_]*[0-9])?[Ee][0-9]([0-9_]*[0-9])?"#"###,
            r###"r#"[+-]?[0-9]([0-9_]*[0-9])?\\.([0-9]([0-9_]*[0-9])?)?([Ee][0-9]([0-9_]*[0-9])?)?"#"###,
            r###"r#"[0-9]([0-9_]*[0-9])?"#"###,
            r###"r#"[a-zA-Z_][a-zA-Z_0-9]*"#"###,
            r###"r#"\\\\\\\\BIG.FART."#"###,
        ];
        __TERMINAL.iter().enumerate().filter_map(|(index, terminal)| {
            let next_state = __action(__state, index);
            if next_state == 0 {
                None
            } else {
                Some(alloc::string::ToString::to_string(terminal))
            }
        }).collect()
    }
    pub(crate) struct __StateMachine<'input, '__1>
    where 'input: '__1
    {
        lookup: &'__1 LineColLookup<'input>,
        input: &'input str,
        __phantom: core::marker::PhantomData<(&'input ())>,
    }
    impl<'input, '__1> __state_machine::ParserDefinition for __StateMachine<'input, '__1>
    where 'input: '__1
    {
        type Location = usize;
        type Error = &'static str;
        type Token = Token<'input>;
        type TokenIndex = usize;
        type Symbol = __Symbol<'input>;
        type Success = Pat;
        type StateIndex = i16;
        type Action = i16;
        type ReduceIndex = i16;
        type NonterminalIndex = usize;

        #[inline]
        fn start_location(&self) -> Self::Location {
              Default::default()
        }

        #[inline]
        fn start_state(&self) -> Self::StateIndex {
              0
        }

        #[inline]
        fn token_to_index(&self, token: &Self::Token) -> Option<usize> {
            __token_to_integer(token, core::marker::PhantomData::<(&())>)
        }

        #[inline]
        fn action(&self, state: i16, integer: usize) -> i16 {
            __action(state, integer)
        }

        #[inline]
        fn error_action(&self, state: i16) -> i16 {
            __action(state, 83 - 1)
        }

        #[inline]
        fn eof_action(&self, state: i16) -> i16 {
            __EOF_ACTION[state as usize]
        }

        #[inline]
        fn goto(&self, state: i16, nt: usize) -> i16 {
            __goto(state, nt)
        }

        fn token_to_symbol(&self, token_index: usize, token: Self::Token) -> Self::Symbol {
            __token_to_symbol(token_index, token, core::marker::PhantomData::<(&())>)
        }

        fn expected_tokens(&self, state: i16) -> alloc::vec::Vec<alloc::string::String> {
            __expected_tokens(state)
        }

        #[inline]
        fn uses_error_recovery(&self) -> bool {
            false
        }

        #[inline]
        fn error_recovery_symbol(
            &self,
            recovery: __state_machine::ErrorRecovery<Self>,
        ) -> Self::Symbol {
            panic!("error recovery not enabled for this grammar")
        }

        fn reduce(
            &mut self,
            action: i16,
            start_location: Option<&Self::Location>,
            states: &mut alloc::vec::Vec<i16>,
            symbols: &mut alloc::vec::Vec<__state_machine::SymbolTriple<Self>>,
        ) -> Option<__state_machine::ParseResult<Self>> {
            __reduce(
                self.lookup,
                self.input,
                action,
                start_location,
                states,
                symbols,
                core::marker::PhantomData::<(&())>,
            )
        }

        fn simulate_reduce(&self, action: i16) -> __state_machine::SimulatedReduce<Self> {
            panic!("error recovery not enabled for this grammar")
        }
    }
    fn __token_to_integer<
        'input,
    >(
        __token: &Token<'input>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> Option<usize>
    {
        match *__token {
            Token(8, _) if true => Some(0),
            Token(9, _) if true => Some(1),
            Token(10, _) if true => Some(2),
            Token(11, _) if true => Some(3),
            Token(12, _) if true => Some(4),
            Token(13, _) if true => Some(5),
            Token(14, _) if true => Some(6),
            Token(15, _) if true => Some(7),
            Token(16, _) if true => Some(8),
            Token(17, _) if true => Some(9),
            Token(18, _) if true => Some(10),
            Token(19, _) if true => Some(11),
            Token(20, _) if true => Some(12),
            Token(21, _) if true => Some(13),
            Token(22, _) if true => Some(14),
            Token(23, _) if true => Some(15),
            Token(24, _) if true => Some(16),
            Token(25, _) if true => Some(17),
            Token(26, _) if true => Some(18),
            Token(27, _) if true => Some(19),
            Token(28, _) if true => Some(20),
            Token(29, _) if true => Some(21),
            Token(30, _) if true => Some(22),
            Token(31, _) if true => Some(23),
            Token(32, _) if true => Some(24),
            Token(33, _) if true => Some(25),
            Token(34, _) if true => Some(26),
            Token(35, _) if true => Some(27),
            Token(36, _) if true => Some(28),
            Token(37, _) if true => Some(29),
            Token(38, _) if true => Some(30),
            Token(39, _) if true => Some(31),
            Token(40, _) if true => Some(32),
            Token(41, _) if true => Some(33),
            Token(42, _) if true => Some(34),
            Token(43, _) if true => Some(35),
            Token(44, _) if true => Some(36),
            Token(45, _) if true => Some(37),
            Token(46, _) if true => Some(38),
            Token(47, _) if true => Some(39),
            Token(48, _) if true => Some(40),
            Token(49, _) if true => Some(41),
            Token(50, _) if true => Some(42),
            Token(51, _) if true => Some(43),
            Token(52, _) if true => Some(44),
            Token(53, _) if true => Some(45),
            Token(54, _) if true => Some(46),
            Token(55, _) if true => Some(47),
            Token(56, _) if true => Some(48),
            Token(57, _) if true => Some(49),
            Token(58, _) if true => Some(50),
            Token(59, _) if true => Some(51),
            Token(60, _) if true => Some(52),
            Token(61, _) if true => Some(53),
            Token(62, _) if true => Some(54),
            Token(63, _) if true => Some(55),
            Token(64, _) if true => Some(56),
            Token(65, _) if true => Some(57),
            Token(66, _) if true => Some(58),
            Token(67, _) if true => Some(59),
            Token(68, _) if true => Some(60),
            Token(69, _) if true => Some(61),
            Token(70, _) if true => Some(62),
            Token(71, _) if true => Some(63),
            Token(72, _) if true => Some(64),
            Token(73, _) if true => Some(65),
            Token(74, _) if true => Some(66),
            Token(75, _) if true => Some(67),
            Token(76, _) if true => Some(68),
            Token(77, _) if true => Some(69),
            Token(78, _) if true => Some(70),
            Token(79, _) if true => Some(71),
            Token(80, _) if true => Some(72),
            Token(81, _) if true => Some(73),
            Token(82, _) if true => Some(74),
            Token(0, _) if true => Some(75),
            Token(1, _) if true => Some(76),
            Token(2, _) if true => Some(77),
            Token(3, _) if true => Some(78),
            Token(4, _) if true => Some(79),
            Token(5, _) if true => Some(80),
            Token(6, _) if true => Some(81),
            Token(7, _) if true => Some(82),
            _ => None,
        }
    }
    fn __token_to_symbol<
        'input,
    >(
        __token_index: usize,
        __token: Token<'input>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> __Symbol<'input>
    {
        match __token_index {
            0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 | 42 | 43 | 44 | 45 | 46 | 47 | 48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 | 58 | 59 | 60 | 61 | 62 | 63 | 64 | 65 | 66 | 67 | 68 | 69 | 70 | 71 | 72 | 73 | 74 | 75 | 76 | 77 | 78 | 79 | 80 | 81 | 82 => match __token {
                Token(8, __tok0) | Token(9, __tok0) | Token(10, __tok0) | Token(11, __tok0) | Token(12, __tok0) | Token(13, __tok0) | Token(14, __tok0) | Token(15, __tok0) | Token(16, __tok0) | Token(17, __tok0) | Token(18, __tok0) | Token(19, __tok0) | Token(20, __tok0) | Token(21, __tok0) | Token(22, __tok0) | Token(23, __tok0) | Token(24, __tok0) | Token(25, __tok0) | Token(26, __tok0) | Token(27, __tok0) | Token(28, __tok0) | Token(29, __tok0) | Token(30, __tok0) | Token(31, __tok0) | Token(32, __tok0) | Token(33, __tok0) | Token(34, __tok0) | Token(35, __tok0) | Token(36, __tok0) | Token(37, __tok0) | Token(38, __tok0) | Token(39, __tok0) | Token(40, __tok0) | Token(41, __tok0) | Token(42, __tok0) | Token(43, __tok0) | Token(44, __tok0) | Token(45, __tok0) | Token(46, __tok0) | Token(47, __tok0) | Token(48, __tok0) | Token(49, __tok0) | Token(50, __tok0) | Token(51, __tok0) | Token(52, __tok0) | Token(53, __tok0) | Token(54, __tok0) | Token(55, __tok0) | Token(56, __tok0) | Token(57, __tok0) | Token(58, __tok0) | Token(59, __tok0) | Token(60, __tok0) | Token(61, __tok0) | Token(62, __tok0) | Token(63, __tok0) | Token(64, __tok0) | Token(65, __tok0) | Token(66, __tok0) | Token(67, __tok0) | Token(68, __tok0) | Token(69, __tok0) | Token(70, __tok0) | Token(71, __tok0) | Token(72, __tok0) | Token(73, __tok0) | Token(74, __tok0) | Token(75, __tok0) | Token(76, __tok0) | Token(77, __tok0) | Token(78, __tok0) | Token(79, __tok0) | Token(80, __tok0) | Token(81, __tok0) | Token(82, __tok0) | Token(0, __tok0) | Token(1, __tok0) | Token(2, __tok0) | Token(3, __tok0) | Token(4, __tok0) | Token(5, __tok0) | Token(6, __tok0) | Token(7, __tok0) if true => __Symbol::Variant0(__tok0),
                _ => unreachable!(),
            },
            _ => unreachable!(),
        }
    }
    pub struct PatParser {
        builder: __lalrpop_util::lexer::MatcherBuilder,
        _priv: (),
    }

    impl PatParser {
        pub fn new() -> PatParser {
            let __builder = super::__intern_token::new_builder();
            PatParser {
                builder: __builder,
                _priv: (),
            }
        }

        #[allow(dead_code)]
        pub fn parse<
            'input,
        >(
            &self,
            lookup: &LineColLookup<'input>,
            input: &'input str,
        ) -> Result<Pat, __lalrpop_util::ParseError<usize, Token<'input>, &'static str>>
        {
            let mut __tokens = self.builder.matcher(input);
            __state_machine::Parser::drive(
                __StateMachine {
                    lookup,
                    input,
                    __phantom: core::marker::PhantomData::<(&())>,
                },
                __tokens,
            )
        }
    }
    pub(crate) fn __reduce<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut alloc::vec::Vec<i16>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> Option<Result<Pat,__lalrpop_util::ParseError<usize, Token<'input>, &'static str>>>
    {
        let (__pop_states, __nonterminal) = match __action {
            0 => {
                __reduce0(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1 => {
                __reduce1(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            2 => {
                __reduce2(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            3 => {
                __reduce3(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            4 => {
                __reduce4(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            5 => {
                __reduce5(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            6 => {
                __reduce6(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            7 => {
                __reduce7(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            8 => {
                __reduce8(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            9 => {
                __reduce9(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            10 => {
                __reduce10(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            11 => {
                __reduce11(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            12 => {
                __reduce12(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            13 => {
                __reduce13(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            14 => {
                __reduce14(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            15 => {
                __reduce15(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            16 => {
                __reduce16(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            17 => {
                __reduce17(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            18 => {
                __reduce18(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            19 => {
                __reduce19(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            20 => {
                __reduce20(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            21 => {
                __reduce21(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            22 => {
                __reduce22(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            23 => {
                __reduce23(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            24 => {
                __reduce24(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            25 => {
                __reduce25(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            26 => {
                __reduce26(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            27 => {
                __reduce27(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            28 => {
                __reduce28(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            29 => {
                __reduce29(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            30 => {
                __reduce30(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            31 => {
                __reduce31(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            32 => {
                __reduce32(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            33 => {
                __reduce33(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            34 => {
                __reduce34(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            35 => {
                __reduce35(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            36 => {
                __reduce36(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            37 => {
                __reduce37(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            38 => {
                __reduce38(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            39 => {
                __reduce39(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            40 => {
                __reduce40(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            41 => {
                __reduce41(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            42 => {
                __reduce42(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            43 => {
                __reduce43(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            44 => {
                __reduce44(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            45 => {
                __reduce45(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            46 => {
                __reduce46(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            47 => {
                __reduce47(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            48 => {
                __reduce48(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            49 => {
                __reduce49(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            50 => {
                __reduce50(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            51 => {
                __reduce51(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            52 => {
                __reduce52(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            53 => {
                __reduce53(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            54 => {
                __reduce54(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            55 => {
                __reduce55(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            56 => {
                __reduce56(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            57 => {
                __reduce57(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            58 => {
                __reduce58(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            59 => {
                __reduce59(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            60 => {
                __reduce60(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            61 => {
                __reduce61(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            62 => {
                __reduce62(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            63 => {
                __reduce63(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            64 => {
                __reduce64(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            65 => {
                __reduce65(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            66 => {
                __reduce66(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            67 => {
                __reduce67(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            68 => {
                __reduce68(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            69 => {
                __reduce69(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            70 => {
                __reduce70(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            71 => {
                __reduce71(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            72 => {
                __reduce72(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            73 => {
                __reduce73(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            74 => {
                __reduce74(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            75 => {
                __reduce75(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            76 => {
                __reduce76(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            77 => {
                __reduce77(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            78 => {
                __reduce78(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            79 => {
                __reduce79(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            80 => {
                __reduce80(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            81 => {
                __reduce81(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            82 => {
                __reduce82(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            83 => {
                __reduce83(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            84 => {
                __reduce84(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            85 => {
                __reduce85(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            86 => {
                __reduce86(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            87 => {
                __reduce87(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            88 => {
                __reduce88(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            89 => {
                __reduce89(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            90 => {
                __reduce90(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            91 => {
                __reduce91(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            92 => {
                __reduce92(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            93 => {
                __reduce93(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            94 => {
                __reduce94(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            95 => {
                __reduce95(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            96 => {
                __reduce96(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            97 => {
                __reduce97(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            98 => {
                __reduce98(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            99 => {
                __reduce99(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            100 => {
                __reduce100(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            101 => {
                __reduce101(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            102 => {
                __reduce102(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            103 => {
                __reduce103(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            104 => {
                __reduce104(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            105 => {
                __reduce105(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            106 => {
                __reduce106(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            107 => {
                __reduce107(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            108 => {
                __reduce108(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            109 => {
                __reduce109(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            110 => {
                __reduce110(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            111 => {
                __reduce111(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            112 => {
                __reduce112(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            113 => {
                __reduce113(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            114 => {
                __reduce114(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            115 => {
                __reduce115(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            116 => {
                __reduce116(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            117 => {
                __reduce117(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            118 => {
                __reduce118(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            119 => {
                __reduce119(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            120 => {
                __reduce120(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            121 => {
                __reduce121(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            122 => {
                __reduce122(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            123 => {
                __reduce123(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            124 => {
                __reduce124(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            125 => {
                __reduce125(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            126 => {
                __reduce126(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            127 => {
                __reduce127(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            128 => {
                __reduce128(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            129 => {
                __reduce129(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            130 => {
                __reduce130(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            131 => {
                __reduce131(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            132 => {
                __reduce132(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            133 => {
                __reduce133(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            134 => {
                __reduce134(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            135 => {
                __reduce135(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            136 => {
                __reduce136(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            137 => {
                __reduce137(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            138 => {
                __reduce138(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            139 => {
                __reduce139(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            140 => {
                __reduce140(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            141 => {
                __reduce141(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            142 => {
                __reduce142(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            143 => {
                __reduce143(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            144 => {
                __reduce144(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            145 => {
                __reduce145(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            146 => {
                __reduce146(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            147 => {
                __reduce147(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            148 => {
                __reduce148(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            149 => {
                __reduce149(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            150 => {
                __reduce150(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            151 => {
                __reduce151(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            152 => {
                __reduce152(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            153 => {
                __reduce153(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            154 => {
                __reduce154(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            155 => {
                __reduce155(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            156 => {
                __reduce156(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            157 => {
                __reduce157(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            158 => {
                __reduce158(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            159 => {
                __reduce159(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            160 => {
                __reduce160(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            161 => {
                __reduce161(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            162 => {
                __reduce162(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            163 => {
                __reduce163(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            164 => {
                __reduce164(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            165 => {
                __reduce165(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            166 => {
                __reduce166(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            167 => {
                __reduce167(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            168 => {
                __reduce168(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            169 => {
                __reduce169(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            170 => {
                __reduce170(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            171 => {
                __reduce171(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            172 => {
                __reduce172(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            173 => {
                __reduce173(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            174 => {
                __reduce174(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            175 => {
                __reduce175(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            176 => {
                __reduce176(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            177 => {
                __reduce177(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            178 => {
                __reduce178(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            179 => {
                __reduce179(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            180 => {
                __reduce180(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            181 => {
                __reduce181(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            182 => {
                __reduce182(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            183 => {
                __reduce183(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            184 => {
                __reduce184(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            185 => {
                __reduce185(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            186 => {
                __reduce186(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            187 => {
                __reduce187(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            188 => {
                __reduce188(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            189 => {
                __reduce189(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            190 => {
                __reduce190(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            191 => {
                __reduce191(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            192 => {
                __reduce192(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            193 => {
                __reduce193(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            194 => {
                __reduce194(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            195 => {
                __reduce195(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            196 => {
                __reduce196(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            197 => {
                __reduce197(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            198 => {
                __reduce198(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            199 => {
                __reduce199(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            200 => {
                __reduce200(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            201 => {
                __reduce201(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            202 => {
                __reduce202(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            203 => {
                __reduce203(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            204 => {
                __reduce204(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            205 => {
                __reduce205(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            206 => {
                __reduce206(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            207 => {
                __reduce207(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            208 => {
                __reduce208(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            209 => {
                __reduce209(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            210 => {
                __reduce210(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            211 => {
                __reduce211(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            212 => {
                __reduce212(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            213 => {
                __reduce213(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            214 => {
                __reduce214(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            215 => {
                __reduce215(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            216 => {
                __reduce216(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            217 => {
                __reduce217(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            218 => {
                __reduce218(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            219 => {
                __reduce219(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            220 => {
                __reduce220(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            221 => {
                __reduce221(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            222 => {
                __reduce222(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            223 => {
                __reduce223(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            224 => {
                __reduce224(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            225 => {
                __reduce225(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            226 => {
                __reduce226(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            227 => {
                __reduce227(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            228 => {
                __reduce228(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            229 => {
                __reduce229(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            230 => {
                __reduce230(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            231 => {
                __reduce231(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            232 => {
                __reduce232(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            233 => {
                __reduce233(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            234 => {
                __reduce234(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            235 => {
                __reduce235(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            236 => {
                __reduce236(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            237 => {
                __reduce237(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            238 => {
                __reduce238(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            239 => {
                __reduce239(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            240 => {
                __reduce240(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            241 => {
                __reduce241(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            242 => {
                __reduce242(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            243 => {
                __reduce243(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            244 => {
                __reduce244(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            245 => {
                __reduce245(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            246 => {
                __reduce246(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            247 => {
                __reduce247(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            248 => {
                __reduce248(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            249 => {
                __reduce249(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            250 => {
                __reduce250(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            251 => {
                __reduce251(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            252 => {
                __reduce252(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            253 => {
                __reduce253(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            254 => {
                __reduce254(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            255 => {
                __reduce255(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            256 => {
                __reduce256(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            257 => {
                __reduce257(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            258 => {
                __reduce258(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            259 => {
                __reduce259(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            260 => {
                __reduce260(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            261 => {
                __reduce261(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            262 => {
                __reduce262(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            263 => {
                __reduce263(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            264 => {
                __reduce264(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            265 => {
                __reduce265(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            266 => {
                __reduce266(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            267 => {
                __reduce267(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            268 => {
                __reduce268(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            269 => {
                __reduce269(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            270 => {
                __reduce270(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            271 => {
                __reduce271(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            272 => {
                __reduce272(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            273 => {
                __reduce273(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            274 => {
                __reduce274(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            275 => {
                __reduce275(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            276 => {
                __reduce276(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            277 => {
                __reduce277(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            278 => {
                __reduce278(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            279 => {
                __reduce279(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            280 => {
                __reduce280(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            281 => {
                __reduce281(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            282 => {
                __reduce282(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            283 => {
                __reduce283(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            284 => {
                __reduce284(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            285 => {
                __reduce285(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            286 => {
                __reduce286(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            287 => {
                __reduce287(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            288 => {
                __reduce288(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            289 => {
                __reduce289(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            290 => {
                __reduce290(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            291 => {
                __reduce291(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            292 => {
                __reduce292(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            293 => {
                __reduce293(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            294 => {
                __reduce294(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            295 => {
                __reduce295(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            296 => {
                __reduce296(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            297 => {
                __reduce297(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            298 => {
                __reduce298(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            299 => {
                __reduce299(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            300 => {
                __reduce300(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            301 => {
                __reduce301(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            302 => {
                __reduce302(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            303 => {
                __reduce303(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            304 => {
                __reduce304(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            305 => {
                __reduce305(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            306 => {
                __reduce306(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            307 => {
                __reduce307(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            308 => {
                __reduce308(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            309 => {
                __reduce309(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            310 => {
                __reduce310(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            311 => {
                __reduce311(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            312 => {
                __reduce312(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            313 => {
                __reduce313(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            314 => {
                __reduce314(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            315 => {
                __reduce315(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            316 => {
                __reduce316(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            317 => {
                __reduce317(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            318 => {
                __reduce318(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            319 => {
                __reduce319(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            320 => {
                __reduce320(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            321 => {
                __reduce321(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            322 => {
                __reduce322(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            323 => {
                __reduce323(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            324 => {
                __reduce324(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            325 => {
                __reduce325(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            326 => {
                __reduce326(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            327 => {
                __reduce327(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            328 => {
                __reduce328(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            329 => {
                __reduce329(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            330 => {
                __reduce330(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            331 => {
                __reduce331(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            332 => {
                __reduce332(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            333 => {
                __reduce333(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            334 => {
                __reduce334(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            335 => {
                __reduce335(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            336 => {
                __reduce336(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            337 => {
                __reduce337(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            338 => {
                __reduce338(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            339 => {
                __reduce339(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            340 => {
                __reduce340(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            341 => {
                __reduce341(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            342 => {
                __reduce342(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            343 => {
                __reduce343(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            344 => {
                __reduce344(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            345 => {
                __reduce345(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            346 => {
                __reduce346(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            347 => {
                __reduce347(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            348 => {
                __reduce348(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            349 => {
                __reduce349(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            350 => {
                __reduce350(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            351 => {
                __reduce351(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            352 => {
                __reduce352(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            353 => {
                __reduce353(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            354 => {
                __reduce354(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            355 => {
                __reduce355(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            356 => {
                __reduce356(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            357 => {
                __reduce357(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            358 => {
                __reduce358(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            359 => {
                __reduce359(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            360 => {
                __reduce360(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            361 => {
                __reduce361(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            362 => {
                __reduce362(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            363 => {
                __reduce363(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            364 => {
                __reduce364(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            365 => {
                __reduce365(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            366 => {
                __reduce366(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            367 => {
                __reduce367(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            368 => {
                __reduce368(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            369 => {
                __reduce369(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            370 => {
                __reduce370(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            371 => {
                __reduce371(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            372 => {
                __reduce372(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            373 => {
                __reduce373(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            374 => {
                __reduce374(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            375 => {
                __reduce375(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            376 => {
                __reduce376(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            377 => {
                __reduce377(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            378 => {
                __reduce378(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            379 => {
                __reduce379(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            380 => {
                __reduce380(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            381 => {
                __reduce381(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            382 => {
                __reduce382(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            383 => {
                __reduce383(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            384 => {
                __reduce384(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            385 => {
                __reduce385(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            386 => {
                __reduce386(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            387 => {
                __reduce387(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            388 => {
                __reduce388(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            389 => {
                __reduce389(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            390 => {
                __reduce390(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            391 => {
                __reduce391(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            392 => {
                __reduce392(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            393 => {
                __reduce393(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            394 => {
                __reduce394(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            395 => {
                // __Pat = Pat => ActionFn(1);
                let __sym0 = __pop_Variant56(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action1::<>(lookup, input, __sym0);
                return Some(Ok(__nt));
            }
            396 => {
                __reduce396(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            397 => {
                __reduce397(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            398 => {
                __reduce398(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            _ => panic!("invalid action code {}", __action)
        };
        let __states_len = __states.len();
        __states.truncate(__states_len - __pop_states);
        let __state = *__states.last().unwrap();
        let __next_state = __goto(__state, __nonterminal);
        __states.push(__next_state);
        None
    }
    #[inline(never)]
    fn __symbol_type_mismatch() -> ! {
        panic!("symbol type mismatch")
    }
    fn __pop_Variant4<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, (&'input str, Type_), usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant4(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant26<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, BinOp, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant26(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant28<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Case, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant28(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant29<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Cases, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant29(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant30<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Dec, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant30(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant31<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, DecField, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant31(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant6<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, DecField_, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant6(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant55<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, DecFields, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant55(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant8<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Dec_, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant8(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant34<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Decs, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant34(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant35<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Delim<DecField_>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant35(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant36<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Delim<Dec_>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant36(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant38<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Delim<Exp_>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant38(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant39<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Delim<Node<Case>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant39(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant37<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Delim<Node<ExpField>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant37(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant40<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Delim<Pat_>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant40(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant27<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Exp, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant27(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant41<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, ExpField, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant41(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant12<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Exp_, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant12(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant43<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Id, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant43(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant19<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Id_, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant19(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant44<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Literal, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant44(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant65<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Mut, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant65(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant14<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Node<Case>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant14(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant47<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Node<Dec>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant47(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant48<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Node<DecField>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant48(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant45<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Node<Exp>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant45(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant10<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Node<ExpField>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant10(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant49<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Node<Id>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant49(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant50<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Node<Pat>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant50(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant51<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Node<SortPat>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant51(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant52<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Node<Stab>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant52(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant53<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Node<Type>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant53(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant54<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Node<Vis>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant54(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant56<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Pat, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant56(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant16<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Pat_, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant16(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant58<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, PrimType, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant58(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant59<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, SortPat, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant59(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant60<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, SortPat_, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant60(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant61<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Stab, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant61(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant21<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Stab_, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant21(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant62<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, String, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant62(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant63<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Type, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant63(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant2<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Type_, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant2(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant64<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, UnOp, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant64(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant66<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Vis, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant66(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant23<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Vis_, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant23(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant7<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, alloc::vec::Vec<DecField_>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant7(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant9<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, alloc::vec::Vec<Dec_>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant9(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant13<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, alloc::vec::Vec<Exp_>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant13(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant15<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, alloc::vec::Vec<Node<Case>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant15(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant11<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, alloc::vec::Vec<Node<ExpField>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant11(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant17<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, alloc::vec::Vec<Pat_>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant17(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant5<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, core::option::Option<(&'input str, Type_)>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant5(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant32<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, core::option::Option<DecField_>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant32(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant33<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, core::option::Option<Dec_>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant33(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant18<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, core::option::Option<Exp_>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant18(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant20<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, core::option::Option<Id_>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant20(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant46<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, core::option::Option<Node<Case>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant46(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant42<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, core::option::Option<Node<ExpField>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant42(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant57<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, core::option::Option<Pat_>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant57(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant22<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, core::option::Option<Stab_>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant22(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant3<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, core::option::Option<Type_>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant3(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant24<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, core::option::Option<Vis_>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant24(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant1<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, core::option::Option<&'input str>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant1(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant25<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, usize, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant25(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant0<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, &'input str, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant0(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    pub(crate) fn __reduce0<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // "="? = "=" => ActionFn(130);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action130::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 0)
    }
    pub(crate) fn __reduce1<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // "="? =  => ActionFn(131);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action131::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (0, 0)
    }
    pub(crate) fn __reduce2<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (":" <Type_>) = ":", Type => ActionFn(449);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant63(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action449::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (2, 1)
    }
    pub(crate) fn __reduce3<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (":" <Type_>)? = ":", Type => ActionFn(454);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant63(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action454::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (2, 2)
    }
    pub(crate) fn __reduce4<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (":" <Type_>)? =  => ActionFn(152);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action152::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (0, 2)
    }
    pub(crate) fn __reduce5<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (":" Type_) = ":", Type => ActionFn(450);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant63(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action450::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (2, 3)
    }
    pub(crate) fn __reduce6<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (":" Type_)? = ":", Type => ActionFn(457);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant63(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action457::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (2, 4)
    }
    pub(crate) fn __reduce7<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (":" Type_)? =  => ActionFn(128);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action128::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (0, 4)
    }
    pub(crate) fn __reduce8<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<DecField_> ";") = DecField, ";" => ActionFn(463);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant31(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action463::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 5)
    }
    pub(crate) fn __reduce9<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<DecField_> ";")* =  => ActionFn(211);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action211::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (0, 6)
    }
    pub(crate) fn __reduce10<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<DecField_> ";")* = (<DecField_> ";")+ => ActionFn(212);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action212::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 6)
    }
    pub(crate) fn __reduce11<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<DecField_> ";")+ = DecField, ";" => ActionFn(465);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant31(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action465::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (2, 7)
    }
    pub(crate) fn __reduce12<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<DecField_> ";")+ = (<DecField_> ";")+, DecField, ";" => ActionFn(466);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant31(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action466::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (3, 7)
    }
    pub(crate) fn __reduce13<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<Dec_> ";") = Dec, ";" => ActionFn(470);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action470::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (2, 8)
    }
    pub(crate) fn __reduce14<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<Dec_> ";")* =  => ActionFn(199);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action199::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (0, 9)
    }
    pub(crate) fn __reduce15<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<Dec_> ";")* = (<Dec_> ";")+ => ActionFn(200);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action200::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce16<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<Dec_> ";")+ = Dec, ";" => ActionFn(473);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action473::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (2, 10)
    }
    pub(crate) fn __reduce17<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<Dec_> ";")+ = (<Dec_> ";")+, Dec, ";" => ActionFn(474);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant30(__symbols);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action474::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (3, 10)
    }
    pub(crate) fn __reduce18<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<ExpField_> ";") = ExpField, ";" => ActionFn(478);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant41(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action478::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (2, 11)
    }
    pub(crate) fn __reduce19<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<ExpField_> ";")* =  => ActionFn(189);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action189::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (0, 12)
    }
    pub(crate) fn __reduce20<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<ExpField_> ";")* = (<ExpField_> ";")+ => ActionFn(190);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action190::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 12)
    }
    pub(crate) fn __reduce21<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<ExpField_> ";")+ = ExpField, ";" => ActionFn(480);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant41(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action480::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (2, 13)
    }
    pub(crate) fn __reduce22<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<ExpField_> ";")+ = (<ExpField_> ";")+, ExpField, ";" => ActionFn(481);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant41(__symbols);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action481::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (3, 13)
    }
    pub(crate) fn __reduce23<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<ExpNonVar_<Ob>> ",") = ExpNonVar<Ob>, "," => ActionFn(485);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action485::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (2, 14)
    }
    pub(crate) fn __reduce24<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<ExpNonVar_<Ob>> ",")* =  => ActionFn(339);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action339::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (0, 15)
    }
    pub(crate) fn __reduce25<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<ExpNonVar_<Ob>> ",")* = (<ExpNonVar_<Ob>> ",")+ => ActionFn(340);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action340::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (1, 15)
    }
    pub(crate) fn __reduce26<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<ExpNonVar_<Ob>> ",")+ = ExpNonVar<Ob>, "," => ActionFn(487);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action487::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (2, 16)
    }
    pub(crate) fn __reduce27<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<ExpNonVar_<Ob>> ",")+ = (<ExpNonVar_<Ob>> ",")+, ExpNonVar<Ob>, "," => ActionFn(488);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action488::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (3, 16)
    }
    pub(crate) fn __reduce28<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<Exp_<Ob>> ",") = Exp<Ob>, "," => ActionFn(492);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action492::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (2, 17)
    }
    pub(crate) fn __reduce29<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<Exp_<Ob>> ",")+ = Exp<Ob>, "," => ActionFn(507);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action507::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (2, 18)
    }
    pub(crate) fn __reduce30<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<Exp_<Ob>> ",")+ = (<Exp_<Ob>> ",")+, Exp<Ob>, "," => ActionFn(508);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action508::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (3, 18)
    }
    pub(crate) fn __reduce31<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<Node<Case>> ";") = Case, ";" => ActionFn(509);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant28(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action509::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (2, 19)
    }
    pub(crate) fn __reduce32<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<Node<Case>> ";")* =  => ActionFn(194);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action194::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (0, 20)
    }
    pub(crate) fn __reduce33<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<Node<Case>> ";")* = (<Node<Case>> ";")+ => ActionFn(195);
        let __sym0 = __pop_Variant15(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action195::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 20)
    }
    pub(crate) fn __reduce34<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<Node<Case>> ";")+ = Case, ";" => ActionFn(511);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant28(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action511::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (2, 21)
    }
    pub(crate) fn __reduce35<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<Node<Case>> ";")+ = (<Node<Case>> ";")+, Case, ";" => ActionFn(512);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant28(__symbols);
        let __sym0 = __pop_Variant15(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action512::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (3, 21)
    }
    pub(crate) fn __reduce36<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<PatBin_> ",") = PatBin, "," => ActionFn(516);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant56(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action516::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (2, 22)
    }
    pub(crate) fn __reduce37<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<PatBin_> ",")+ = PatBin, "," => ActionFn(520);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant56(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action520::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (2, 23)
    }
    pub(crate) fn __reduce38<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<PatBin_> ",")+ = (<PatBin_> ",")+, PatBin, "," => ActionFn(521);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant56(__symbols);
        let __sym0 = __pop_Variant17(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action521::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (3, 23)
    }
    pub(crate) fn __reduce39<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (ExpNullary_<Bl>) = ExpNullary<Bl> => ActionFn(523);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action523::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 24)
    }
    pub(crate) fn __reduce40<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (ExpNullary_<Bl>)? = ExpNullary<Bl> => ActionFn(524);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action524::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (1, 25)
    }
    pub(crate) fn __reduce41<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (ExpNullary_<Bl>)? =  => ActionFn(345);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action345::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (0, 25)
    }
    pub(crate) fn __reduce42<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (ExpNullary_<Ob>) = ExpNullary<Ob> => ActionFn(528);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action528::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 26)
    }
    pub(crate) fn __reduce43<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (ExpNullary_<Ob>)? = ExpNullary<Ob> => ActionFn(539);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action539::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (1, 27)
    }
    pub(crate) fn __reduce44<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (ExpNullary_<Ob>)? =  => ActionFn(313);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action313::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (0, 27)
    }
    pub(crate) fn __reduce45<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (Id_) = Id => ActionFn(543);
        let __sym0 = __pop_Variant43(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action543::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (1, 28)
    }
    pub(crate) fn __reduce46<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (Id_)? = Id => ActionFn(556);
        let __sym0 = __pop_Variant43(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action556::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 29)
    }
    pub(crate) fn __reduce47<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (Id_)? =  => ActionFn(133);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action133::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (0, 29)
    }
    pub(crate) fn __reduce48<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (Id_?) = Id => ActionFn(565);
        let __sym0 = __pop_Variant43(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action565::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 30)
    }
    pub(crate) fn __reduce49<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (Id_?) =  => ActionFn(566);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action566::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (0, 30)
    }
    pub(crate) fn __reduce50<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (Stab_) = Stab => ActionFn(572);
        let __sym0 = __pop_Variant61(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action572::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (1, 31)
    }
    pub(crate) fn __reduce51<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (Stab_)? = Stab => ActionFn(573);
        let __sym0 = __pop_Variant61(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action573::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (1, 32)
    }
    pub(crate) fn __reduce52<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (Stab_)? =  => ActionFn(113);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action113::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (0, 32)
    }
    pub(crate) fn __reduce53<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (Vis_) = Vis => ActionFn(577);
        let __sym0 = __pop_Variant66(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action577::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (1, 33)
    }
    pub(crate) fn __reduce54<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (Vis_)? = Vis => ActionFn(578);
        let __sym0 = __pop_Variant66(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action578::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (1, 34)
    }
    pub(crate) fn __reduce55<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (Vis_)? =  => ActionFn(116);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action116::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (0, 34)
    }
    pub(crate) fn __reduce56<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // @L =  => ActionFn(215);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action215::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (0, 35)
    }
    pub(crate) fn __reduce57<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // @R =  => ActionFn(214);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action214::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (0, 36)
    }
    pub(crate) fn __reduce58<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BinOp = "+" => ActionFn(86);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action86::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce59<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BinOp = "-" => ActionFn(87);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action87::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce60<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BinOp = "*" => ActionFn(88);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action88::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce61<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BinOp = "/" => ActionFn(89);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action89::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce62<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BinOp = "%" => ActionFn(90);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action90::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce63<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BinOp = "**" => ActionFn(91);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action91::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce64<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BinOp = "+%" => ActionFn(92);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action92::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce65<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BinOp = "-%" => ActionFn(93);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action93::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce66<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BinOp = "*%" => ActionFn(94);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action94::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce67<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BinOp = "**%" => ActionFn(95);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action95::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce68<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BinOp = "&" => ActionFn(96);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action96::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce69<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BinOp = "|" => ActionFn(97);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action97::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce70<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BinOp = "^" => ActionFn(98);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action98::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce71<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BinOp = "<<" => ActionFn(99);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action99::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce72<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BinOp = "<<>" => ActionFn(100);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action100::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce73<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BinOp = "<>>" => ActionFn(101);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action101::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce74<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BinOp = "#" => ActionFn(102);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action102::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce75<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Bl = r#"\\\\\\\\BIG.FART."# => ActionFn(5);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action5::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 38)
    }
    pub(crate) fn __reduce76<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Block = "{", Decs, "}" => ActionFn(61);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant34(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action61::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 39)
    }
    pub(crate) fn __reduce77<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Block_ = Block => ActionFn(583);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action583::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 40)
    }
    pub(crate) fn __reduce78<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Case = "case", PatNullary, ExpNest => ActionFn(731);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant56(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action731::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant28(__nt), __end));
        (3, 41)
    }
    pub(crate) fn __reduce79<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Cases = Delim0<Node<Case>, ";"> => ActionFn(65);
        let __sym0 = __pop_Variant39(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action65::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 42)
    }
    pub(crate) fn __reduce80<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Dec = DecVar => ActionFn(71);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action71::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 43)
    }
    pub(crate) fn __reduce81<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Dec = DecNonVar => ActionFn(72);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action72::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 43)
    }
    pub(crate) fn __reduce82<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Dec = ExpNonDec<Ob> => ActionFn(73);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action73::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 43)
    }
    pub(crate) fn __reduce83<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecField = Vis, Stab, Dec => ActionFn(579);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant30(__symbols);
        let __sym1 = __pop_Variant61(__symbols);
        let __sym0 = __pop_Variant66(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action579::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant31(__nt), __end));
        (3, 44)
    }
    pub(crate) fn __reduce84<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecField = Stab, Dec => ActionFn(580);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant30(__symbols);
        let __sym0 = __pop_Variant61(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action580::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant31(__nt), __end));
        (2, 44)
    }
    pub(crate) fn __reduce85<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecField = Vis, Dec => ActionFn(581);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant30(__symbols);
        let __sym0 = __pop_Variant66(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action581::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant31(__nt), __end));
        (2, 44)
    }
    pub(crate) fn __reduce86<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecField = Dec => ActionFn(582);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action582::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant31(__nt), __end));
        (1, 44)
    }
    pub(crate) fn __reduce87<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecField_ = DecField => ActionFn(462);
        let __sym0 = __pop_Variant31(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action462::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 45)
    }
    pub(crate) fn __reduce88<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecField_? = DecField => ActionFn(464);
        let __sym0 = __pop_Variant31(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action464::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant32(__nt), __end));
        (1, 46)
    }
    pub(crate) fn __reduce89<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecField_? =  => ActionFn(210);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action210::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant32(__nt), __end));
        (0, 46)
    }
    pub(crate) fn __reduce90<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecNonVar = "let", Pat, "=", Exp<Ob> => ActionFn(741);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant27(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant56(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action741::<>(lookup, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (4, 47)
    }
    pub(crate) fn __reduce91<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecNonVar = "module", Id, "=", ObjBody => ActionFn(557);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant55(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant43(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action557::<>(lookup, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (4, 47)
    }
    pub(crate) fn __reduce92<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecNonVar = "module", "=", ObjBody => ActionFn(558);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant55(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action558::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (3, 47)
    }
    pub(crate) fn __reduce93<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecNonVar = "module", Id, ObjBody => ActionFn(559);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant55(__symbols);
        let __sym1 = __pop_Variant43(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action559::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (3, 47)
    }
    pub(crate) fn __reduce94<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecNonVar = "module", ObjBody => ActionFn(560);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant55(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action560::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (2, 47)
    }
    pub(crate) fn __reduce95<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecNonVar = SortPat, "func", Id, PatPlain, ":", Type, Block => ActionFn(745);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant27(__symbols);
        let __sym5 = __pop_Variant63(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant56(__symbols);
        let __sym2 = __pop_Variant43(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant59(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym6.2.clone();
        let __nt = super::__action745::<>(lookup, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (7, 47)
    }
    pub(crate) fn __reduce96<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecNonVar = SortPat, "func", PatPlain, ":", Type, Block => ActionFn(746);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant27(__symbols);
        let __sym4 = __pop_Variant63(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant56(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant59(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action746::<>(lookup, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (6, 47)
    }
    pub(crate) fn __reduce97<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecNonVar = SortPat, "func", Id, PatPlain, Block => ActionFn(747);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant27(__symbols);
        let __sym3 = __pop_Variant56(__symbols);
        let __sym2 = __pop_Variant43(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant59(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action747::<>(lookup, input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (5, 47)
    }
    pub(crate) fn __reduce98<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecNonVar = SortPat, "func", PatPlain, Block => ActionFn(748);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant27(__symbols);
        let __sym2 = __pop_Variant56(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant59(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action748::<>(lookup, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (4, 47)
    }
    pub(crate) fn __reduce99<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecNonVar = SortPat, "func", Id, PatPlain, ":", Type, "=", Exp<Ob> => ActionFn(749);
        assert!(__symbols.len() >= 8);
        let __sym7 = __pop_Variant27(__symbols);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant63(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant56(__symbols);
        let __sym2 = __pop_Variant43(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant59(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym7.2.clone();
        let __nt = super::__action749::<>(lookup, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (8, 47)
    }
    pub(crate) fn __reduce100<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecNonVar = SortPat, "func", PatPlain, ":", Type, "=", Exp<Ob> => ActionFn(750);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant27(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant63(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant56(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant59(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym6.2.clone();
        let __nt = super::__action750::<>(lookup, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (7, 47)
    }
    pub(crate) fn __reduce101<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecNonVar = SortPat, "func", Id, PatPlain, "=", Exp<Ob> => ActionFn(751);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant27(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant56(__symbols);
        let __sym2 = __pop_Variant43(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant59(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action751::<>(lookup, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (6, 47)
    }
    pub(crate) fn __reduce102<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecNonVar = SortPat, "func", PatPlain, "=", Exp<Ob> => ActionFn(752);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant27(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant56(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant59(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action752::<>(lookup, input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (5, 47)
    }
    pub(crate) fn __reduce103<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecNonVar_ = DecNonVar => ActionFn(596);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action596::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 48)
    }
    pub(crate) fn __reduce104<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecVar = "var", Pat, "=", Exp<Ob> => ActionFn(742);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant27(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant56(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action742::<>(lookup, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (4, 49)
    }
    pub(crate) fn __reduce105<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecVar_ = DecVar => ActionFn(599);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action599::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 50)
    }
    pub(crate) fn __reduce106<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Dec_ = Dec => ActionFn(469);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action469::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 51)
    }
    pub(crate) fn __reduce107<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Dec_? = Dec => ActionFn(472);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action472::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant33(__nt), __end));
        (1, 52)
    }
    pub(crate) fn __reduce108<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Dec_? =  => ActionFn(198);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action198::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant33(__nt), __end));
        (0, 52)
    }
    pub(crate) fn __reduce109<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Decs = Delim0<Dec_, ";"> => ActionFn(69);
        let __sym0 = __pop_Variant36(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action69::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant34(__nt), __end));
        (1, 53)
    }
    pub(crate) fn __reduce110<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim0<DecField_, ";"> = DecField => ActionFn(592);
        let __sym0 = __pop_Variant31(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action592::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant35(__nt), __end));
        (1, 54)
    }
    pub(crate) fn __reduce111<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim0<DecField_, ";"> =  => ActionFn(593);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action593::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant35(__nt), __end));
        (0, 54)
    }
    pub(crate) fn __reduce112<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim0<DecField_, ";"> = (<DecField_> ";")+, DecField => ActionFn(594);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant31(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action594::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant35(__nt), __end));
        (2, 54)
    }
    pub(crate) fn __reduce113<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim0<DecField_, ";"> = (<DecField_> ";")+ => ActionFn(595);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action595::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant35(__nt), __end));
        (1, 54)
    }
    pub(crate) fn __reduce114<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim0<Dec_, ";"> = Dec => ActionFn(602);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action602::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 55)
    }
    pub(crate) fn __reduce115<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim0<Dec_, ";"> =  => ActionFn(603);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action603::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (0, 55)
    }
    pub(crate) fn __reduce116<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim0<Dec_, ";"> = (<Dec_> ";")+, Dec => ActionFn(604);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant30(__symbols);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action604::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (2, 55)
    }
    pub(crate) fn __reduce117<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim0<Dec_, ";"> = (<Dec_> ";")+ => ActionFn(605);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action605::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 55)
    }
    pub(crate) fn __reduce118<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim0<ExpField_, ";"> = ExpField => ActionFn(666);
        let __sym0 = __pop_Variant41(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action666::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant37(__nt), __end));
        (1, 56)
    }
    pub(crate) fn __reduce119<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim0<ExpField_, ";"> =  => ActionFn(667);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action667::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant37(__nt), __end));
        (0, 56)
    }
    pub(crate) fn __reduce120<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim0<ExpField_, ";"> = (<ExpField_> ";")+, ExpField => ActionFn(668);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant41(__symbols);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action668::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant37(__nt), __end));
        (2, 56)
    }
    pub(crate) fn __reduce121<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim0<ExpField_, ";"> = (<ExpField_> ";")+ => ActionFn(669);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action669::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant37(__nt), __end));
        (1, 56)
    }
    pub(crate) fn __reduce122<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim0<ExpNonVar_<Ob>, ","> = ExpNonVar<Ob> => ActionFn(686);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action686::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant38(__nt), __end));
        (1, 57)
    }
    pub(crate) fn __reduce123<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim0<ExpNonVar_<Ob>, ","> =  => ActionFn(687);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action687::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant38(__nt), __end));
        (0, 57)
    }
    pub(crate) fn __reduce124<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim0<ExpNonVar_<Ob>, ","> = (<ExpNonVar_<Ob>> ",")+, ExpNonVar<Ob> => ActionFn(688);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action688::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant38(__nt), __end));
        (2, 57)
    }
    pub(crate) fn __reduce125<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim0<ExpNonVar_<Ob>, ","> = (<ExpNonVar_<Ob>> ",")+ => ActionFn(689);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action689::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant38(__nt), __end));
        (1, 57)
    }
    pub(crate) fn __reduce126<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim0<Node<Case>, ";"> = Case => ActionFn(721);
        let __sym0 = __pop_Variant28(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action721::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant39(__nt), __end));
        (1, 58)
    }
    pub(crate) fn __reduce127<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim0<Node<Case>, ";"> =  => ActionFn(722);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action722::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant39(__nt), __end));
        (0, 58)
    }
    pub(crate) fn __reduce128<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim0<Node<Case>, ";"> = (<Node<Case>> ";")+, Case => ActionFn(723);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant28(__symbols);
        let __sym0 = __pop_Variant15(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action723::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant39(__nt), __end));
        (2, 58)
    }
    pub(crate) fn __reduce129<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim0<Node<Case>, ";"> = (<Node<Case>> ";")+ => ActionFn(724);
        let __sym0 = __pop_Variant15(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action724::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant39(__nt), __end));
        (1, 58)
    }
    pub(crate) fn __reduce130<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim1<Exp_<Ob>, ","> = Exp<Ob> => ActionFn(497);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action497::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant38(__nt), __end));
        (1, 59)
    }
    pub(crate) fn __reduce131<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim1<Exp_<Ob>, ","> = (<Exp_<Ob>> ",")+, Exp<Ob> => ActionFn(717);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action717::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant38(__nt), __end));
        (2, 59)
    }
    pub(crate) fn __reduce132<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim1<Exp_<Ob>, ","> = (<Exp_<Ob>> ",")+ => ActionFn(718);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action718::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant38(__nt), __end));
        (1, 59)
    }
    pub(crate) fn __reduce133<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim1<PatBin_, ","> = PatBin => ActionFn(517);
        let __sym0 = __pop_Variant56(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action517::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant40(__nt), __end));
        (1, 60)
    }
    pub(crate) fn __reduce134<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim1<PatBin_, ","> = (<PatBin_> ",")+, PatBin => ActionFn(729);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant56(__symbols);
        let __sym0 = __pop_Variant17(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action729::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant40(__nt), __end));
        (2, 60)
    }
    pub(crate) fn __reduce135<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim1<PatBin_, ","> = (<PatBin_> ",")+ => ActionFn(730);
        let __sym0 = __pop_Variant17(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action730::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant40(__nt), __end));
        (1, 60)
    }
    pub(crate) fn __reduce136<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Exp<Bl> = ExpNonVar<Bl> => ActionFn(159);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action159::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 61)
    }
    pub(crate) fn __reduce137<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Exp<Bl> = DecVar => ActionFn(600);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action600::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 61)
    }
    pub(crate) fn __reduce138<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Exp<Ob> = ExpNonVar<Ob> => ActionFn(180);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action180::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 62)
    }
    pub(crate) fn __reduce139<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Exp<Ob> = DecVar => ActionFn(601);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action601::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 62)
    }
    pub(crate) fn __reduce140<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin000<Bl> = ExpBin000<Bl>, "or", ExpBin00<Bl> => ActionFn(611);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action611::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 63)
    }
    pub(crate) fn __reduce141<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin000<Bl> = ExpBin00<Bl> => ActionFn(272);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action272::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 63)
    }
    pub(crate) fn __reduce142<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin000<Ob> = ExpBin000<Ob>, "or", ExpBin00<Ob> => ActionFn(614);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action614::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 64)
    }
    pub(crate) fn __reduce143<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin000<Ob> = ExpBin00<Ob> => ActionFn(219);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action219::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 64)
    }
    pub(crate) fn __reduce144<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin000_<Bl> = ExpBin000<Bl> => ActionFn(606);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action606::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 65)
    }
    pub(crate) fn __reduce145<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin000_<Ob> = ExpBin000<Ob> => ActionFn(608);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action608::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 66)
    }
    pub(crate) fn __reduce146<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin00<Bl> = ExpBin00<Bl>, "and", ExpBin0<Bl> => ActionFn(617);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action617::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 67)
    }
    pub(crate) fn __reduce147<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin00<Bl> = ExpBin0<Bl> => ActionFn(283);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action283::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 67)
    }
    pub(crate) fn __reduce148<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin00<Ob> = ExpBin00<Ob>, "and", ExpBin0<Ob> => ActionFn(625);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action625::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 68)
    }
    pub(crate) fn __reduce149<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin00<Ob> = ExpBin0<Ob> => ActionFn(262);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action262::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 68)
    }
    pub(crate) fn __reduce150<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin00_<Bl> = ExpBin00<Bl> => ActionFn(610);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action610::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 69)
    }
    pub(crate) fn __reduce151<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin00_<Ob> = ExpBin00<Ob> => ActionFn(613);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action613::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 70)
    }
    pub(crate) fn __reduce152<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin0<Bl> = ExpBin0<Bl>, "+", ExpBin1<Bl> => ActionFn(633);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action633::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 71)
    }
    pub(crate) fn __reduce153<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin0<Bl> = ExpBin0<Bl>, "+%", ExpBin1<Bl> => ActionFn(634);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action634::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 71)
    }
    pub(crate) fn __reduce154<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin0<Bl> = ExpBin0<Bl>, "-", ExpBin1<Bl> => ActionFn(635);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action635::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 71)
    }
    pub(crate) fn __reduce155<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin0<Bl> = ExpBin0<Bl>, ":", Type => ActionFn(621);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant63(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action621::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 71)
    }
    pub(crate) fn __reduce156<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin0<Bl> = ExpBin1<Bl> => ActionFn(281);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action281::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 71)
    }
    pub(crate) fn __reduce157<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin0<Ob> = ExpBin0<Ob>, "+", ExpBin1<Ob> => ActionFn(639);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action639::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 72)
    }
    pub(crate) fn __reduce158<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin0<Ob> = ExpBin0<Ob>, "+%", ExpBin1<Ob> => ActionFn(640);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action640::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 72)
    }
    pub(crate) fn __reduce159<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin0<Ob> = ExpBin0<Ob>, "-", ExpBin1<Ob> => ActionFn(641);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action641::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 72)
    }
    pub(crate) fn __reduce160<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin0<Ob> = ExpBin0<Ob>, ":", Type => ActionFn(629);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant63(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action629::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 72)
    }
    pub(crate) fn __reduce161<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin0<Ob> = ExpBin1<Ob> => ActionFn(260);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action260::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 72)
    }
    pub(crate) fn __reduce162<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin0_<Bl> = ExpBin0<Bl> => ActionFn(616);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action616::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 73)
    }
    pub(crate) fn __reduce163<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin0_<Ob> = ExpBin0<Ob> => ActionFn(624);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action624::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 74)
    }
    pub(crate) fn __reduce164<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin1<Bl> = ExpBin2<Bl>, "*", ExpBin1<Bl> => ActionFn(645);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action645::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 75)
    }
    pub(crate) fn __reduce165<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin1<Bl> = ExpBin2<Bl>, "/", ExpBin1<Bl> => ActionFn(646);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action646::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 75)
    }
    pub(crate) fn __reduce166<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin1<Bl> = ExpBin2<Bl> => ActionFn(298);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action298::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 75)
    }
    pub(crate) fn __reduce167<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin1<Ob> = ExpBin2<Ob>, "*", ExpBin1<Ob> => ActionFn(649);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action649::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 76)
    }
    pub(crate) fn __reduce168<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin1<Ob> = ExpBin2<Ob>, "/", ExpBin1<Ob> => ActionFn(650);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action650::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 76)
    }
    pub(crate) fn __reduce169<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin1<Ob> = ExpBin2<Ob> => ActionFn(269);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action269::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 76)
    }
    pub(crate) fn __reduce170<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin1_<Bl> = ExpBin1<Bl> => ActionFn(632);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action632::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 77)
    }
    pub(crate) fn __reduce171<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin1_<Ob> = ExpBin1<Ob> => ActionFn(638);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action638::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 78)
    }
    pub(crate) fn __reduce172<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin2<Bl> = ExpBin3<Bl>, "|", ExpBin2<Bl> => ActionFn(653);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action653::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 79)
    }
    pub(crate) fn __reduce173<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin2<Bl> = ExpBin3<Bl> => ActionFn(302);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action302::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 79)
    }
    pub(crate) fn __reduce174<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin2<Ob> = ExpBin3<Ob>, "|", ExpBin2<Ob> => ActionFn(656);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action656::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 80)
    }
    pub(crate) fn __reduce175<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin2<Ob> = ExpBin3<Ob> => ActionFn(288);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action288::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 80)
    }
    pub(crate) fn __reduce176<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin2_<Bl> = ExpBin2<Bl> => ActionFn(644);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action644::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 81)
    }
    pub(crate) fn __reduce177<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin2_<Ob> = ExpBin2<Ob> => ActionFn(648);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action648::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 82)
    }
    pub(crate) fn __reduce178<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin3<Bl> = ExpUn<Bl>, "&", ExpBin3<Bl> => ActionFn(704);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action704::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 83)
    }
    pub(crate) fn __reduce179<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin3<Bl> = ExpUn<Bl> => ActionFn(324);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action324::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 83)
    }
    pub(crate) fn __reduce180<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin3<Ob> = ExpUn<Ob>, "&", ExpBin3<Ob> => ActionFn(708);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action708::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 84)
    }
    pub(crate) fn __reduce181<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin3<Ob> = ExpUn<Ob> => ActionFn(292);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action292::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 84)
    }
    pub(crate) fn __reduce182<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin3_<Bl> = ExpBin3<Bl> => ActionFn(652);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action652::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 85)
    }
    pub(crate) fn __reduce183<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin3_<Ob> = ExpBin3<Ob> => ActionFn(655);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action655::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 86)
    }
    pub(crate) fn __reduce184<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin<Bl> = ExpBin<Bl>, "==", ExpBin0<Bl> => ActionFn(659);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action659::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 87)
    }
    pub(crate) fn __reduce185<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin<Bl> = ExpBin<Bl>, "!=", ExpBin0<Bl> => ActionFn(660);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action660::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 87)
    }
    pub(crate) fn __reduce186<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin<Bl> = ExpBin000<Bl> => ActionFn(254);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action254::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 87)
    }
    pub(crate) fn __reduce187<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin<Ob> = ExpBin<Ob>, "==", ExpBin0<Ob> => ActionFn(663);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action663::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 88)
    }
    pub(crate) fn __reduce188<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin<Ob> = ExpBin<Ob>, "!=", ExpBin0<Ob> => ActionFn(664);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action664::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 88)
    }
    pub(crate) fn __reduce189<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin<Ob> = ExpBin000<Ob> => ActionFn(208);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action208::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 88)
    }
    pub(crate) fn __reduce190<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin_<Bl> = ExpBin<Bl> => ActionFn(658);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action658::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 89)
    }
    pub(crate) fn __reduce191<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin_<Ob> = ExpBin<Ob> => ActionFn(662);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action662::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 90)
    }
    pub(crate) fn __reduce192<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpField = VarOpt, Id, ":", Type, "=", Exp<Ob> => ActionFn(544);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant27(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant63(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant43(__symbols);
        let __sym0 = __pop_Variant65(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action544::<>(lookup, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant41(__nt), __end));
        (6, 91)
    }
    pub(crate) fn __reduce193<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpField = VarOpt, Id, "=", Exp<Ob> => ActionFn(545);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant27(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant43(__symbols);
        let __sym0 = __pop_Variant65(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action545::<>(lookup, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant41(__nt), __end));
        (4, 91)
    }
    pub(crate) fn __reduce194<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpField_ = ExpField => ActionFn(477);
        let __sym0 = __pop_Variant41(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action477::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (1, 92)
    }
    pub(crate) fn __reduce195<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpField_? = ExpField => ActionFn(479);
        let __sym0 = __pop_Variant41(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action479::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant42(__nt), __end));
        (1, 93)
    }
    pub(crate) fn __reduce196<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpField_? =  => ActionFn(188);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action188::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant42(__nt), __end));
        (0, 93)
    }
    pub(crate) fn __reduce197<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNest = Block => ActionFn(59);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action59::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 94)
    }
    pub(crate) fn __reduce198<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNest = Exp<Bl> => ActionFn(60);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action60::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 94)
    }
    pub(crate) fn __reduce199<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNest_ = ExpNest => ActionFn(670);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action670::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 95)
    }
    pub(crate) fn __reduce200<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Bl> = ExpBin<Bl> => ActionFn(233);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action233::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 96)
    }
    pub(crate) fn __reduce201<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Bl> = ExpBin<Bl>, ":=", Exp<Ob> => ActionFn(661);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action661::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 96)
    }
    pub(crate) fn __reduce202<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Bl> = "if", ExpNullary<Ob>, ExpNest, "else", ExpNest => ActionFn(672);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant27(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action672::<>(lookup, input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (5, 96)
    }
    pub(crate) fn __reduce203<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Bl> = "if", ExpNullary<Ob>, ExpNest, "\\no_else" => ActionFn(673);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action673::<>(lookup, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (4, 96)
    }
    pub(crate) fn __reduce204<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Bl> = "return", Exp<Bl> => ActionFn(715);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action715::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 96)
    }
    pub(crate) fn __reduce205<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Bl> = "return" => ActionFn(716);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action716::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 96)
    }
    pub(crate) fn __reduce206<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Bl> = "switch", ExpNullary<Ob>, "{", Cases, "}" => ActionFn(531);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant29(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action531::<>(lookup, input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (5, 96)
    }
    pub(crate) fn __reduce207<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Bl> = "while", ExpNullary<Ob>, ExpNest => ActionFn(674);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action674::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 96)
    }
    pub(crate) fn __reduce208<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Bl> = "for", "(", Pat, "in", Exp<Ob>, ")", ExpNest => ActionFn(743);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant27(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant27(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant56(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym6.2.clone();
        let __nt = super::__action743::<>(lookup, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (7, 96)
    }
    pub(crate) fn __reduce209<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Bl> = "ignore", ExpNest => ActionFn(676);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action676::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 96)
    }
    pub(crate) fn __reduce210<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Bl> = "do", Block => ActionFn(588);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action588::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 96)
    }
    pub(crate) fn __reduce211<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Bl> = "do", "?", Block => ActionFn(589);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action589::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 96)
    }
    pub(crate) fn __reduce212<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Bl> = "assert", ExpNest => ActionFn(677);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action677::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 96)
    }
    pub(crate) fn __reduce213<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Bl> = "debug", ExpNest => ActionFn(678);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action678::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 96)
    }
    pub(crate) fn __reduce214<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Ob> = ExpBin<Ob> => ActionFn(136);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action136::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 97)
    }
    pub(crate) fn __reduce215<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Ob> = ExpBin<Ob>, ":=", Exp<Ob> => ActionFn(665);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action665::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 97)
    }
    pub(crate) fn __reduce216<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Ob> = "if", ExpNullary<Ob>, ExpNest, "else", ExpNest => ActionFn(679);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant27(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action679::<>(lookup, input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (5, 97)
    }
    pub(crate) fn __reduce217<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Ob> = "if", ExpNullary<Ob>, ExpNest, "\\no_else" => ActionFn(680);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action680::<>(lookup, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (4, 97)
    }
    pub(crate) fn __reduce218<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Ob> = "return", Exp<Ob> => ActionFn(719);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action719::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 97)
    }
    pub(crate) fn __reduce219<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Ob> = "return" => ActionFn(720);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action720::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 97)
    }
    pub(crate) fn __reduce220<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Ob> = "switch", ExpNullary<Ob>, "{", Cases, "}" => ActionFn(535);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant29(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action535::<>(lookup, input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (5, 97)
    }
    pub(crate) fn __reduce221<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Ob> = "while", ExpNullary<Ob>, ExpNest => ActionFn(681);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action681::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 97)
    }
    pub(crate) fn __reduce222<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Ob> = "for", "(", Pat, "in", Exp<Ob>, ")", ExpNest => ActionFn(744);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant27(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant27(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant56(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym6.2.clone();
        let __nt = super::__action744::<>(lookup, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (7, 97)
    }
    pub(crate) fn __reduce223<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Ob> = "ignore", ExpNest => ActionFn(683);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action683::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 97)
    }
    pub(crate) fn __reduce224<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Ob> = "do", Block => ActionFn(590);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action590::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 97)
    }
    pub(crate) fn __reduce225<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Ob> = "do", "?", Block => ActionFn(591);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action591::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 97)
    }
    pub(crate) fn __reduce226<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Ob> = "assert", ExpNest => ActionFn(684);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action684::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 97)
    }
    pub(crate) fn __reduce227<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Ob> = "debug", ExpNest => ActionFn(685);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action685::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 97)
    }
    pub(crate) fn __reduce228<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonVar<Bl> = ExpNonDec<Bl> => ActionFn(185);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action185::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 98)
    }
    pub(crate) fn __reduce229<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonVar<Bl> = DecNonVar => ActionFn(597);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action597::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 98)
    }
    pub(crate) fn __reduce230<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonVar<Ob> = ExpNonDec<Ob> => ActionFn(246);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action246::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 99)
    }
    pub(crate) fn __reduce231<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonVar<Ob> = DecNonVar => ActionFn(598);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action598::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 99)
    }
    pub(crate) fn __reduce232<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonVar_<Ob> = ExpNonVar<Ob> => ActionFn(484);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action484::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 100)
    }
    pub(crate) fn __reduce233<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonVar_<Ob>? = ExpNonVar<Ob> => ActionFn(486);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action486::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (1, 101)
    }
    pub(crate) fn __reduce234<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonVar_<Ob>? =  => ActionFn(338);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action338::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (0, 101)
    }
    pub(crate) fn __reduce235<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNullary<Bl> = Bl => ActionFn(357);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action357::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 102)
    }
    pub(crate) fn __reduce236<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNullary<Bl> = ExpPlain => ActionFn(358);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action358::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 102)
    }
    pub(crate) fn __reduce237<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNullary<Bl> = Id => ActionFn(359);
        let __sym0 = __pop_Variant43(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action359::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 102)
    }
    pub(crate) fn __reduce238<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNullary<Bl> = "prim", StringLiteral => ActionFn(360);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant62(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action360::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 102)
    }
    pub(crate) fn __reduce239<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNullary<Ob> = Ob => ActionFn(223);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action223::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 103)
    }
    pub(crate) fn __reduce240<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNullary<Ob> = ExpPlain => ActionFn(224);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action224::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 103)
    }
    pub(crate) fn __reduce241<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNullary<Ob> = Id => ActionFn(225);
        let __sym0 = __pop_Variant43(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action225::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 103)
    }
    pub(crate) fn __reduce242<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNullary<Ob> = "prim", StringLiteral => ActionFn(226);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant62(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action226::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 103)
    }
    pub(crate) fn __reduce243<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNullary_<Bl> = ExpNullary<Bl> => ActionFn(522);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action522::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 104)
    }
    pub(crate) fn __reduce244<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNullary_<Ob> = ExpNullary<Ob> => ActionFn(527);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action527::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 105)
    }
    pub(crate) fn __reduce245<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpObj = "{", Delim0<ExpField_, ";">, "}" => ActionFn(63);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant37(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action63::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 106)
    }
    pub(crate) fn __reduce246<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpPlain = Literal => ActionFn(54);
        let __sym0 = __pop_Variant44(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action54::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 107)
    }
    pub(crate) fn __reduce247<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpPlain = "(", Delim1<Exp_<Ob>, ",">, ")" => ActionFn(55);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant38(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action55::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 107)
    }
    pub(crate) fn __reduce248<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpPlain_ = ExpPlain => ActionFn(690);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action690::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 108)
    }
    pub(crate) fn __reduce249<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpPost<Bl> = ExpNullary<Bl> => ActionFn(348);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action348::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 109)
    }
    pub(crate) fn __reduce250<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpPost<Bl> = "[", VarOpt, Delim0<ExpNonVar_<Ob>, ",">, "]" => ActionFn(349);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant38(__symbols);
        let __sym1 = __pop_Variant65(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action349::<>(lookup, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (4, 109)
    }
    pub(crate) fn __reduce251<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpPost<Bl> = ExpPost<Bl>, "[", Exp<Ob>, "]" => ActionFn(692);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action692::<>(lookup, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (4, 109)
    }
    pub(crate) fn __reduce252<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpPost<Bl> = ExpPost<Bl>, ".", NatIndex => ActionFn(693);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant25(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action693::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 109)
    }
    pub(crate) fn __reduce253<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpPost<Bl> = ExpPost<Bl>, ".", Id => ActionFn(694);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant43(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action694::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 109)
    }
    pub(crate) fn __reduce254<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpPost<Bl> = ExpPost<Bl>, ExpNullary<Ob> => ActionFn(695);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action695::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 109)
    }
    pub(crate) fn __reduce255<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpPost<Bl> = ExpPost<Bl>, "!" => ActionFn(696);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action696::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 109)
    }
    pub(crate) fn __reduce256<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpPost<Ob> = ExpNullary<Ob> => ActionFn(315);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action315::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 110)
    }
    pub(crate) fn __reduce257<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpPost<Ob> = "[", VarOpt, Delim0<ExpNonVar_<Ob>, ",">, "]" => ActionFn(316);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant38(__symbols);
        let __sym1 = __pop_Variant65(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action316::<>(lookup, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (4, 110)
    }
    pub(crate) fn __reduce258<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpPost<Ob> = ExpPost<Ob>, "[", Exp<Ob>, "]" => ActionFn(698);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action698::<>(lookup, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (4, 110)
    }
    pub(crate) fn __reduce259<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpPost<Ob> = ExpPost<Ob>, ".", NatIndex => ActionFn(699);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant25(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action699::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 110)
    }
    pub(crate) fn __reduce260<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpPost<Ob> = ExpPost<Ob>, ".", Id => ActionFn(700);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant43(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action700::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 110)
    }
    pub(crate) fn __reduce261<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpPost<Ob> = ExpPost<Ob>, ExpNullary<Ob> => ActionFn(701);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action701::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 110)
    }
    pub(crate) fn __reduce262<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpPost<Ob> = ExpPost<Ob>, "!" => ActionFn(702);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action702::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 110)
    }
    pub(crate) fn __reduce263<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpPost_<Bl> = ExpPost<Bl> => ActionFn(691);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action691::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 111)
    }
    pub(crate) fn __reduce264<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpPost_<Ob> = ExpPost<Ob> => ActionFn(697);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action697::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 112)
    }
    pub(crate) fn __reduce265<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpUn<Bl> = ExpPost<Bl> => ActionFn(327);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action327::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 113)
    }
    pub(crate) fn __reduce266<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpUn<Bl> = "#", Id, ExpNullary<Bl> => ActionFn(548);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant43(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action548::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 113)
    }
    pub(crate) fn __reduce267<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpUn<Bl> = "#", Id => ActionFn(549);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant43(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action549::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 113)
    }
    pub(crate) fn __reduce268<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpUn<Bl> = "?", ExpUn<Ob> => ActionFn(709);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action709::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 113)
    }
    pub(crate) fn __reduce269<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpUn<Bl> = UnOp, ExpUn<Bl> => ActionFn(705);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant64(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action705::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 113)
    }
    pub(crate) fn __reduce270<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpUn<Bl> = "not", ExpUn<Bl> => ActionFn(706);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action706::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 113)
    }
    pub(crate) fn __reduce271<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpUn<Ob> = ExpPost<Ob> => ActionFn(305);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action305::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 114)
    }
    pub(crate) fn __reduce272<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpUn<Ob> = "#", Id, ExpNullary<Ob> => ActionFn(550);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant43(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action550::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 114)
    }
    pub(crate) fn __reduce273<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpUn<Ob> = "#", Id => ActionFn(551);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant43(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action551::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 114)
    }
    pub(crate) fn __reduce274<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpUn<Ob> = "?", ExpUn<Ob> => ActionFn(710);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action710::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 114)
    }
    pub(crate) fn __reduce275<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpUn<Ob> = UnOp, ExpUn<Ob> => ActionFn(711);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant64(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action711::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 114)
    }
    pub(crate) fn __reduce276<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpUn<Ob> = "not", ExpUn<Ob> => ActionFn(712);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action712::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 114)
    }
    pub(crate) fn __reduce277<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpUn_<Bl> = ExpUn<Bl> => ActionFn(703);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action703::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 115)
    }
    pub(crate) fn __reduce278<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpUn_<Ob> = ExpUn<Ob> => ActionFn(707);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action707::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 116)
    }
    pub(crate) fn __reduce279<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Exp_<Bl> = Exp<Bl> => ActionFn(713);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action713::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 117)
    }
    pub(crate) fn __reduce280<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Exp_<Bl>? = Exp<Bl> => ActionFn(714);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action714::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (1, 118)
    }
    pub(crate) fn __reduce281<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Exp_<Bl>? =  => ActionFn(249);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action249::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (0, 118)
    }
    pub(crate) fn __reduce282<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Exp_<Ob> = Exp<Ob> => ActionFn(491);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action491::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 119)
    }
    pub(crate) fn __reduce283<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Exp_<Ob>? = Exp<Ob> => ActionFn(506);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action506::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (1, 120)
    }
    pub(crate) fn __reduce284<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Exp_<Ob>? =  => ActionFn(203);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action203::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (0, 120)
    }
    pub(crate) fn __reduce285<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Id = r#"[a-zA-Z_][a-zA-Z_0-9]*"# => ActionFn(8);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action8::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant43(__nt), __end));
        (1, 121)
    }
    pub(crate) fn __reduce286<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Id_ = Id => ActionFn(542);
        let __sym0 = __pop_Variant43(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action542::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (1, 122)
    }
    pub(crate) fn __reduce287<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Id_? = Id => ActionFn(552);
        let __sym0 = __pop_Variant43(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action552::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 123)
    }
    pub(crate) fn __reduce288<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Id_? =  => ActionFn(126);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action126::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (0, 123)
    }
    pub(crate) fn __reduce289<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Literal = "null" => ActionFn(10);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action10::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant44(__nt), __end));
        (1, 124)
    }
    pub(crate) fn __reduce290<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Literal = "true" => ActionFn(11);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action11::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant44(__nt), __end));
        (1, 124)
    }
    pub(crate) fn __reduce291<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Literal = "false" => ActionFn(12);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action12::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant44(__nt), __end));
        (1, 124)
    }
    pub(crate) fn __reduce292<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Literal = "(", ")" => ActionFn(13);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action13::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant44(__nt), __end));
        (2, 124)
    }
    pub(crate) fn __reduce293<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Literal = r#"[+-]?[0-9]([0-9_]*[0-9])?[Ee][0-9]([0-9_]*[0-9])?"# => ActionFn(14);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action14::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant44(__nt), __end));
        (1, 124)
    }
    pub(crate) fn __reduce294<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Literal = r#"[+-]?[0-9]([0-9_]*[0-9])?\\.([0-9]([0-9_]*[0-9])?)?([Ee][0-9]([0-9_]*[0-9])?)?"# => ActionFn(15);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action15::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant44(__nt), __end));
        (1, 124)
    }
    pub(crate) fn __reduce295<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Literal = r#"0x[0-9a-fA-F]+"# => ActionFn(16);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action16::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant44(__nt), __end));
        (1, 124)
    }
    pub(crate) fn __reduce296<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Literal = r#"[0-9]([0-9_]*[0-9])?"# => ActionFn(17);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action17::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant44(__nt), __end));
        (1, 124)
    }
    pub(crate) fn __reduce297<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Literal = r#"'(?:[^\\\\'\\s]|\\\\.)*'|' '"# => ActionFn(18);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action18::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant44(__nt), __end));
        (1, 124)
    }
    pub(crate) fn __reduce298<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Literal = StringLiteral => ActionFn(19);
        let __sym0 = __pop_Variant62(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action19::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant44(__nt), __end));
        (1, 124)
    }
    pub(crate) fn __reduce299<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // NatIndex = r#"[0-9]([0-9_]*[0-9])?"# => ActionFn(7);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action7::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (1, 125)
    }
    pub(crate) fn __reduce300<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<Block> = Block => ActionFn(407);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action407::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 126)
    }
    pub(crate) fn __reduce301<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<Case> = Case => ActionFn(408);
        let __sym0 = __pop_Variant28(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action408::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (1, 127)
    }
    pub(crate) fn __reduce302<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<Case>? = Case => ActionFn(510);
        let __sym0 = __pop_Variant28(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action510::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant46(__nt), __end));
        (1, 128)
    }
    pub(crate) fn __reduce303<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<Case>? =  => ActionFn(193);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action193::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant46(__nt), __end));
        (0, 128)
    }
    pub(crate) fn __reduce304<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<Dec> = Dec => ActionFn(409);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action409::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant47(__nt), __end));
        (1, 129)
    }
    pub(crate) fn __reduce305<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<DecField> = DecField => ActionFn(410);
        let __sym0 = __pop_Variant31(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action410::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant48(__nt), __end));
        (1, 130)
    }
    pub(crate) fn __reduce306<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<DecNonVar> = DecNonVar => ActionFn(411);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action411::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant47(__nt), __end));
        (1, 131)
    }
    pub(crate) fn __reduce307<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<DecVar> = DecVar => ActionFn(412);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action412::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant47(__nt), __end));
        (1, 132)
    }
    pub(crate) fn __reduce308<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<Exp<Bl>> = Exp<Bl> => ActionFn(413);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action413::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 133)
    }
    pub(crate) fn __reduce309<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<Exp<Ob>> = Exp<Ob> => ActionFn(414);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action414::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 134)
    }
    pub(crate) fn __reduce310<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpBin000<Bl>> = ExpBin000<Bl> => ActionFn(415);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action415::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 135)
    }
    pub(crate) fn __reduce311<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpBin000<Ob>> = ExpBin000<Ob> => ActionFn(416);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action416::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 136)
    }
    pub(crate) fn __reduce312<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpBin00<Bl>> = ExpBin00<Bl> => ActionFn(417);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action417::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 137)
    }
    pub(crate) fn __reduce313<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpBin00<Ob>> = ExpBin00<Ob> => ActionFn(418);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action418::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 138)
    }
    pub(crate) fn __reduce314<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpBin0<Bl>> = ExpBin0<Bl> => ActionFn(419);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action419::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 139)
    }
    pub(crate) fn __reduce315<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpBin0<Ob>> = ExpBin0<Ob> => ActionFn(420);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action420::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 140)
    }
    pub(crate) fn __reduce316<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpBin1<Bl>> = ExpBin1<Bl> => ActionFn(421);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action421::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 141)
    }
    pub(crate) fn __reduce317<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpBin1<Ob>> = ExpBin1<Ob> => ActionFn(422);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action422::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 142)
    }
    pub(crate) fn __reduce318<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpBin2<Bl>> = ExpBin2<Bl> => ActionFn(423);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action423::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 143)
    }
    pub(crate) fn __reduce319<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpBin2<Ob>> = ExpBin2<Ob> => ActionFn(424);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action424::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 144)
    }
    pub(crate) fn __reduce320<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpBin3<Bl>> = ExpBin3<Bl> => ActionFn(425);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action425::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 145)
    }
    pub(crate) fn __reduce321<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpBin3<Ob>> = ExpBin3<Ob> => ActionFn(426);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action426::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 146)
    }
    pub(crate) fn __reduce322<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpBin<Bl>> = ExpBin<Bl> => ActionFn(427);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action427::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 147)
    }
    pub(crate) fn __reduce323<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpBin<Ob>> = ExpBin<Ob> => ActionFn(428);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action428::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 148)
    }
    pub(crate) fn __reduce324<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpField> = ExpField => ActionFn(429);
        let __sym0 = __pop_Variant41(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action429::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (1, 149)
    }
    pub(crate) fn __reduce325<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpNest> = ExpNest => ActionFn(430);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action430::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 150)
    }
    pub(crate) fn __reduce326<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpNonVar<Ob>> = ExpNonVar<Ob> => ActionFn(431);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action431::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 151)
    }
    pub(crate) fn __reduce327<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpNullary<Bl>> = ExpNullary<Bl> => ActionFn(432);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action432::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 152)
    }
    pub(crate) fn __reduce328<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpNullary<Ob>> = ExpNullary<Ob> => ActionFn(433);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action433::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 153)
    }
    pub(crate) fn __reduce329<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpPlain> = ExpPlain => ActionFn(434);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action434::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 154)
    }
    pub(crate) fn __reduce330<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpPost<Bl>> = ExpPost<Bl> => ActionFn(435);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action435::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 155)
    }
    pub(crate) fn __reduce331<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpPost<Ob>> = ExpPost<Ob> => ActionFn(436);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action436::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 156)
    }
    pub(crate) fn __reduce332<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpUn<Bl>> = ExpUn<Bl> => ActionFn(437);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action437::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 157)
    }
    pub(crate) fn __reduce333<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpUn<Ob>> = ExpUn<Ob> => ActionFn(438);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action438::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 158)
    }
    pub(crate) fn __reduce334<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<Id> = Id => ActionFn(439);
        let __sym0 = __pop_Variant43(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action439::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant49(__nt), __end));
        (1, 159)
    }
    pub(crate) fn __reduce335<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<Pat> = Pat => ActionFn(440);
        let __sym0 = __pop_Variant56(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action440::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant50(__nt), __end));
        (1, 160)
    }
    pub(crate) fn __reduce336<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<PatBin> = PatBin => ActionFn(441);
        let __sym0 = __pop_Variant56(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action441::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant50(__nt), __end));
        (1, 161)
    }
    pub(crate) fn __reduce337<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<PatNullary> = PatNullary => ActionFn(442);
        let __sym0 = __pop_Variant56(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action442::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant50(__nt), __end));
        (1, 162)
    }
    pub(crate) fn __reduce338<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<PatPlain> = PatPlain => ActionFn(443);
        let __sym0 = __pop_Variant56(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action443::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant50(__nt), __end));
        (1, 163)
    }
    pub(crate) fn __reduce339<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<SortPat> = SortPat => ActionFn(444);
        let __sym0 = __pop_Variant59(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action444::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant51(__nt), __end));
        (1, 164)
    }
    pub(crate) fn __reduce340<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<Stab> = Stab => ActionFn(445);
        let __sym0 = __pop_Variant61(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action445::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant52(__nt), __end));
        (1, 165)
    }
    pub(crate) fn __reduce341<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<Type> = Type => ActionFn(446);
        let __sym0 = __pop_Variant63(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action446::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant53(__nt), __end));
        (1, 166)
    }
    pub(crate) fn __reduce342<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<Vis> = Vis => ActionFn(447);
        let __sym0 = __pop_Variant66(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action447::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant54(__nt), __end));
        (1, 167)
    }
    pub(crate) fn __reduce343<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Ob = ExpObj => ActionFn(6);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action6::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 168)
    }
    pub(crate) fn __reduce344<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ObjBody = "{", Delim0<DecField_, ";">, "}" => ActionFn(103);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant35(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action103::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant55(__nt), __end));
        (3, 169)
    }
    pub(crate) fn __reduce345<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Pat = PatBin => ActionFn(35);
        let __sym0 = __pop_Variant56(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action35::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant56(__nt), __end));
        (1, 170)
    }
    pub(crate) fn __reduce346<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PatBin = PatBin, ":", Type => ActionFn(518);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant63(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant56(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action518::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant56(__nt), __end));
        (3, 171)
    }
    pub(crate) fn __reduce347<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PatBin = PatUn => ActionFn(30);
        let __sym0 = __pop_Variant56(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action30::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant56(__nt), __end));
        (1, 171)
    }
    pub(crate) fn __reduce348<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PatBin_ = PatBin => ActionFn(515);
        let __sym0 = __pop_Variant56(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action515::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (1, 172)
    }
    pub(crate) fn __reduce349<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PatBin_? = PatBin => ActionFn(519);
        let __sym0 = __pop_Variant56(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action519::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 173)
    }
    pub(crate) fn __reduce350<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PatBin_? =  => ActionFn(175);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action175::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (0, 173)
    }
    pub(crate) fn __reduce351<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PatNullary = PatPlain => ActionFn(27);
        let __sym0 = __pop_Variant56(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action27::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant56(__nt), __end));
        (1, 174)
    }
    pub(crate) fn __reduce352<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PatNullary_ = PatNullary => ActionFn(726);
        let __sym0 = __pop_Variant56(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action726::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (1, 175)
    }
    pub(crate) fn __reduce353<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PatPlain = "_" => ActionFn(22);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action22::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant56(__nt), __end));
        (1, 176)
    }
    pub(crate) fn __reduce354<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PatPlain = Id => ActionFn(553);
        let __sym0 = __pop_Variant43(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action553::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant56(__nt), __end));
        (1, 176)
    }
    pub(crate) fn __reduce355<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PatPlain = Literal => ActionFn(24);
        let __sym0 = __pop_Variant44(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action24::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant56(__nt), __end));
        (1, 176)
    }
    pub(crate) fn __reduce356<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PatPlain = "(", Delim1<PatBin_, ",">, ")" => ActionFn(25);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant40(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action25::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant56(__nt), __end));
        (3, 176)
    }
    pub(crate) fn __reduce357<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PatPlain_ = PatPlain => ActionFn(727);
        let __sym0 = __pop_Variant56(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action727::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (1, 177)
    }
    pub(crate) fn __reduce358<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PatUn = PatNullary => ActionFn(31);
        let __sym0 = __pop_Variant56(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action31::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant56(__nt), __end));
        (1, 178)
    }
    pub(crate) fn __reduce359<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PatUn = "#", Id => ActionFn(554);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant43(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action554::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant56(__nt), __end));
        (2, 178)
    }
    pub(crate) fn __reduce360<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PatUn = "#", Id, PatNullary => ActionFn(732);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant56(__symbols);
        let __sym1 = __pop_Variant43(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action732::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant56(__nt), __end));
        (3, 178)
    }
    pub(crate) fn __reduce361<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Pat_ = Pat => ActionFn(725);
        let __sym0 = __pop_Variant56(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action725::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (1, 179)
    }
    pub(crate) fn __reduce362<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PrimType = "(", ")" => ActionFn(36);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action36::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant58(__nt), __end));
        (2, 180)
    }
    pub(crate) fn __reduce363<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PrimType = "Bool" => ActionFn(37);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action37::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant58(__nt), __end));
        (1, 180)
    }
    pub(crate) fn __reduce364<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PrimType = "Nat" => ActionFn(38);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action38::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant58(__nt), __end));
        (1, 180)
    }
    pub(crate) fn __reduce365<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PrimType = "Nat8" => ActionFn(39);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action39::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant58(__nt), __end));
        (1, 180)
    }
    pub(crate) fn __reduce366<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PrimType = "Nat16" => ActionFn(40);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action40::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant58(__nt), __end));
        (1, 180)
    }
    pub(crate) fn __reduce367<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PrimType = "Nat32" => ActionFn(41);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action41::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant58(__nt), __end));
        (1, 180)
    }
    pub(crate) fn __reduce368<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PrimType = "Nat64" => ActionFn(42);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action42::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant58(__nt), __end));
        (1, 180)
    }
    pub(crate) fn __reduce369<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PrimType = "Int" => ActionFn(43);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action43::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant58(__nt), __end));
        (1, 180)
    }
    pub(crate) fn __reduce370<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PrimType = "Int8" => ActionFn(44);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action44::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant58(__nt), __end));
        (1, 180)
    }
    pub(crate) fn __reduce371<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PrimType = "Int16" => ActionFn(45);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action45::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant58(__nt), __end));
        (1, 180)
    }
    pub(crate) fn __reduce372<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PrimType = "Int32" => ActionFn(46);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action46::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant58(__nt), __end));
        (1, 180)
    }
    pub(crate) fn __reduce373<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PrimType = "Int64" => ActionFn(47);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action47::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant58(__nt), __end));
        (1, 180)
    }
    pub(crate) fn __reduce374<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PrimType = "Principal" => ActionFn(48);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action48::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant58(__nt), __end));
        (1, 180)
    }
    pub(crate) fn __reduce375<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PrimType = "Text" => ActionFn(49);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action49::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant58(__nt), __end));
        (1, 180)
    }
    pub(crate) fn __reduce376<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Prog = Decs => ActionFn(52);
        let __sym0 = __pop_Variant34(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action52::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant34(__nt), __end));
        (1, 181)
    }
    pub(crate) fn __reduce377<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // SortPat =  => ActionFn(80);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action80::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant59(__nt), __end));
        (0, 182)
    }
    pub(crate) fn __reduce378<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // SortPat_ = SortPat => ActionFn(728);
        let __sym0 = __pop_Variant59(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action728::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant60(__nt), __end));
        (1, 183)
    }
    pub(crate) fn __reduce379<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Stab = "stable" => ActionFn(108);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action108::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant61(__nt), __end));
        (1, 184)
    }
    pub(crate) fn __reduce380<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Stab = "flexible" => ActionFn(109);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action109::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant61(__nt), __end));
        (1, 184)
    }
    pub(crate) fn __reduce381<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Stab_ = Stab => ActionFn(571);
        let __sym0 = __pop_Variant61(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action571::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (1, 185)
    }
    pub(crate) fn __reduce382<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // StringLiteral = r#"\"(?:[^\\\\\"\\n]|\\\\.)*\""# => ActionFn(20);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action20::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant62(__nt), __end));
        (1, 186)
    }
    pub(crate) fn __reduce383<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // TextId = Id => ActionFn(64);
        let __sym0 = __pop_Variant43(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action64::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant62(__nt), __end));
        (1, 187)
    }
    pub(crate) fn __reduce384<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Type = PrimType => ActionFn(51);
        let __sym0 = __pop_Variant58(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action51::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant63(__nt), __end));
        (1, 188)
    }
    pub(crate) fn __reduce385<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Type_ = Type => ActionFn(448);
        let __sym0 = __pop_Variant63(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action448::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 189)
    }
    pub(crate) fn __reduce386<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // UnOp = "+" => ActionFn(83);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action83::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant64(__nt), __end));
        (1, 190)
    }
    pub(crate) fn __reduce387<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // UnOp = "-" => ActionFn(84);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action84::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant64(__nt), __end));
        (1, 190)
    }
    pub(crate) fn __reduce388<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // UnOp = "^" => ActionFn(85);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action85::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant64(__nt), __end));
        (1, 190)
    }
    pub(crate) fn __reduce389<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // VarOpt = "var" => ActionFn(56);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action56::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant65(__nt), __end));
        (1, 191)
    }
    pub(crate) fn __reduce390<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // VarOpt =  => ActionFn(57);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action57::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant65(__nt), __end));
        (0, 191)
    }
    pub(crate) fn __reduce391<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Vis = "public" => ActionFn(105);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action105::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant66(__nt), __end));
        (1, 192)
    }
    pub(crate) fn __reduce392<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Vis = "private" => ActionFn(106);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action106::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant66(__nt), __end));
        (1, 192)
    }
    pub(crate) fn __reduce393<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Vis_ = Vis => ActionFn(576);
        let __sym0 = __pop_Variant66(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action576::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (1, 193)
    }
    pub(crate) fn __reduce394<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // __Literal = Literal => ActionFn(0);
        let __sym0 = __pop_Variant44(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action0::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant44(__nt), __end));
        (1, 194)
    }
    pub(crate) fn __reduce396<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // __PrimType = PrimType => ActionFn(2);
        let __sym0 = __pop_Variant58(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action2::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant58(__nt), __end));
        (1, 196)
    }
    pub(crate) fn __reduce397<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // __Prog = Prog => ActionFn(4);
        let __sym0 = __pop_Variant34(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action4::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant34(__nt), __end));
        (1, 197)
    }
    pub(crate) fn __reduce398<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // __Type = Type => ActionFn(3);
        let __sym0 = __pop_Variant63(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action3::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant63(__nt), __end));
        (1, 198)
    }
}
pub use self::__parse__Pat::PatParser;

#[cfg_attr(rustfmt, rustfmt_skip)]
mod __parse__PrimType {
    #![allow(non_snake_case, non_camel_case_types, unused_mut, unused_variables, unused_imports, unused_parens, clippy::all)]

    use crate::parser_utils::{dec_node_into_exp, get_one, node};
    use crate::ast::{Node, Source, Id, Id_, Pat, Pat_, Exp, Exp_, ExpField, Type, Type_, PrimType, Literal, Case, Cases, Decs, Dec, Dec_, UnOp, BinOp, RelOp, Delim, Mut, SortPat, SortPat_, Sugar, Vis, Vis_, Stab, Stab_, DecField, DecField_, DecFields};
    use line_col::LineColLookup;
    #[allow(unused_extern_crates)]
    extern crate lalrpop_util as __lalrpop_util;
    #[allow(unused_imports)]
    use self::__lalrpop_util::state_machine as __state_machine;
    extern crate core;
    extern crate alloc;
    use self::__lalrpop_util::lexer::Token;
    #[allow(dead_code)]
    pub(crate) enum __Symbol<'input>
     {
        Variant0(&'input str),
        Variant1(core::option::Option<&'input str>),
        Variant2(Type_),
        Variant3(core::option::Option<Type_>),
        Variant4((&'input str, Type_)),
        Variant5(core::option::Option<(&'input str, Type_)>),
        Variant6(DecField_),
        Variant7(alloc::vec::Vec<DecField_>),
        Variant8(Dec_),
        Variant9(alloc::vec::Vec<Dec_>),
        Variant10(Node<ExpField>),
        Variant11(alloc::vec::Vec<Node<ExpField>>),
        Variant12(Exp_),
        Variant13(alloc::vec::Vec<Exp_>),
        Variant14(Node<Case>),
        Variant15(alloc::vec::Vec<Node<Case>>),
        Variant16(Pat_),
        Variant17(alloc::vec::Vec<Pat_>),
        Variant18(core::option::Option<Exp_>),
        Variant19(Id_),
        Variant20(core::option::Option<Id_>),
        Variant21(Stab_),
        Variant22(core::option::Option<Stab_>),
        Variant23(Vis_),
        Variant24(core::option::Option<Vis_>),
        Variant25(usize),
        Variant26(BinOp),
        Variant27(Exp),
        Variant28(Case),
        Variant29(Cases),
        Variant30(Dec),
        Variant31(DecField),
        Variant32(core::option::Option<DecField_>),
        Variant33(core::option::Option<Dec_>),
        Variant34(Decs),
        Variant35(Delim<DecField_>),
        Variant36(Delim<Dec_>),
        Variant37(Delim<Node<ExpField>>),
        Variant38(Delim<Exp_>),
        Variant39(Delim<Node<Case>>),
        Variant40(Delim<Pat_>),
        Variant41(ExpField),
        Variant42(core::option::Option<Node<ExpField>>),
        Variant43(Id),
        Variant44(Literal),
        Variant45(Node<Exp>),
        Variant46(core::option::Option<Node<Case>>),
        Variant47(Node<Dec>),
        Variant48(Node<DecField>),
        Variant49(Node<Id>),
        Variant50(Node<Pat>),
        Variant51(Node<SortPat>),
        Variant52(Node<Stab>),
        Variant53(Node<Type>),
        Variant54(Node<Vis>),
        Variant55(DecFields),
        Variant56(Pat),
        Variant57(core::option::Option<Pat_>),
        Variant58(PrimType),
        Variant59(SortPat),
        Variant60(SortPat_),
        Variant61(Stab),
        Variant62(String),
        Variant63(Type),
        Variant64(UnOp),
        Variant65(Mut),
        Variant66(Vis),
    }
    const __ACTION: &[i16] = &[
        // State 0
        0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 1
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 2
        0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 3
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 4
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 5
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 6
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 7
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 8
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 9
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 10
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 11
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 12
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 13
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 14
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 15
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 16
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    ];
    fn __action(state: i16, integer: usize) -> i16 {
        __ACTION[(state as usize) * 83 + integer]
    }
    const __EOF_ACTION: &[i16] = &[
        // State 0
        0,
        // State 1
        -397,
        // State 2
        0,
        // State 3
        -364,
        // State 4
        -370,
        // State 5
        -372,
        // State 6
        -373,
        // State 7
        -374,
        // State 8
        -371,
        // State 9
        -365,
        // State 10
        -367,
        // State 11
        -368,
        // State 12
        -369,
        // State 13
        -366,
        // State 14
        -375,
        // State 15
        -376,
        // State 16
        -363,
    ];
    fn __goto(state: i16, nt: usize) -> i16 {
        match nt {
            180 => 1,
            _ => 0,
        }
    }
    fn __expected_tokens(__state: i16) -> alloc::vec::Vec<alloc::string::String> {
        const __TERMINAL: &[&str] = &[
            r###""!""###,
            r###""!=""###,
            r###""#""###,
            r###""%""###,
            r###""&""###,
            r###""(""###,
            r###"")""###,
            r###""*""###,
            r###""*%""###,
            r###""**""###,
            r###""**%""###,
            r###""+""###,
            r###""+%""###,
            r###"",""###,
            r###""-""###,
            r###""-%""###,
            r###"".""###,
            r###""/""###,
            r###"":""###,
            r###"":=""###,
            r###"";""###,
            r###""<<""###,
            r###""<<>""###,
            r###""<>>""###,
            r###""=""###,
            r###""==""###,
            r###""?""###,
            r###""Bool""###,
            r###""Int""###,
            r###""Int16""###,
            r###""Int32""###,
            r###""Int64""###,
            r###""Int8""###,
            r###""Nat""###,
            r###""Nat16""###,
            r###""Nat32""###,
            r###""Nat64""###,
            r###""Nat8""###,
            r###""Principal""###,
            r###""Text""###,
            r###""[""###,
            r###""\\no_else""###,
            r###""]""###,
            r###""^""###,
            r###""_""###,
            r###""and""###,
            r###""assert""###,
            r###""case""###,
            r###""debug""###,
            r###""do""###,
            r###""else""###,
            r###""false""###,
            r###""flexible""###,
            r###""for""###,
            r###""func""###,
            r###""if""###,
            r###""ignore""###,
            r###""in""###,
            r###""let""###,
            r###""module""###,
            r###""not""###,
            r###""null""###,
            r###""or""###,
            r###""prim""###,
            r###""private""###,
            r###""public""###,
            r###""return""###,
            r###""stable""###,
            r###""switch""###,
            r###""true""###,
            r###""var""###,
            r###""while""###,
            r###""{""###,
            r###""|""###,
            r###""}""###,
            r###"r#"\"(?:[^\\\\\"\\n]|\\\\.)*\""#"###,
            r###"r#"'(?:[^\\\\'\\s]|\\\\.)*'|' '"#"###,
            r###"r#"0x[0-9a-fA-F]+"#"###,
            r###"r#"[+-]?[0-9]([0-9_]*[0-9])?[Ee][0-9]([0-9_]*[0-9])?"#"###,
            r###"r#"[+-]?[0-9]([0-9_]*[0-9])?\\.([0-9]([0-9_]*[0-9])?)?([Ee][0-9]([0-9_]*[0-9])?)?"#"###,
            r###"r#"[0-9]([0-9_]*[0-9])?"#"###,
            r###"r#"[a-zA-Z_][a-zA-Z_0-9]*"#"###,
            r###"r#"\\\\\\\\BIG.FART."#"###,
        ];
        __TERMINAL.iter().enumerate().filter_map(|(index, terminal)| {
            let next_state = __action(__state, index);
            if next_state == 0 {
                None
            } else {
                Some(alloc::string::ToString::to_string(terminal))
            }
        }).collect()
    }
    pub(crate) struct __StateMachine<'input, '__1>
    where 'input: '__1
    {
        lookup: &'__1 LineColLookup<'input>,
        input: &'input str,
        __phantom: core::marker::PhantomData<(&'input ())>,
    }
    impl<'input, '__1> __state_machine::ParserDefinition for __StateMachine<'input, '__1>
    where 'input: '__1
    {
        type Location = usize;
        type Error = &'static str;
        type Token = Token<'input>;
        type TokenIndex = usize;
        type Symbol = __Symbol<'input>;
        type Success = PrimType;
        type StateIndex = i16;
        type Action = i16;
        type ReduceIndex = i16;
        type NonterminalIndex = usize;

        #[inline]
        fn start_location(&self) -> Self::Location {
              Default::default()
        }

        #[inline]
        fn start_state(&self) -> Self::StateIndex {
              0
        }

        #[inline]
        fn token_to_index(&self, token: &Self::Token) -> Option<usize> {
            __token_to_integer(token, core::marker::PhantomData::<(&())>)
        }

        #[inline]
        fn action(&self, state: i16, integer: usize) -> i16 {
            __action(state, integer)
        }

        #[inline]
        fn error_action(&self, state: i16) -> i16 {
            __action(state, 83 - 1)
        }

        #[inline]
        fn eof_action(&self, state: i16) -> i16 {
            __EOF_ACTION[state as usize]
        }

        #[inline]
        fn goto(&self, state: i16, nt: usize) -> i16 {
            __goto(state, nt)
        }

        fn token_to_symbol(&self, token_index: usize, token: Self::Token) -> Self::Symbol {
            __token_to_symbol(token_index, token, core::marker::PhantomData::<(&())>)
        }

        fn expected_tokens(&self, state: i16) -> alloc::vec::Vec<alloc::string::String> {
            __expected_tokens(state)
        }

        #[inline]
        fn uses_error_recovery(&self) -> bool {
            false
        }

        #[inline]
        fn error_recovery_symbol(
            &self,
            recovery: __state_machine::ErrorRecovery<Self>,
        ) -> Self::Symbol {
            panic!("error recovery not enabled for this grammar")
        }

        fn reduce(
            &mut self,
            action: i16,
            start_location: Option<&Self::Location>,
            states: &mut alloc::vec::Vec<i16>,
            symbols: &mut alloc::vec::Vec<__state_machine::SymbolTriple<Self>>,
        ) -> Option<__state_machine::ParseResult<Self>> {
            __reduce(
                self.lookup,
                self.input,
                action,
                start_location,
                states,
                symbols,
                core::marker::PhantomData::<(&())>,
            )
        }

        fn simulate_reduce(&self, action: i16) -> __state_machine::SimulatedReduce<Self> {
            panic!("error recovery not enabled for this grammar")
        }
    }
    fn __token_to_integer<
        'input,
    >(
        __token: &Token<'input>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> Option<usize>
    {
        match *__token {
            Token(8, _) if true => Some(0),
            Token(9, _) if true => Some(1),
            Token(10, _) if true => Some(2),
            Token(11, _) if true => Some(3),
            Token(12, _) if true => Some(4),
            Token(13, _) if true => Some(5),
            Token(14, _) if true => Some(6),
            Token(15, _) if true => Some(7),
            Token(16, _) if true => Some(8),
            Token(17, _) if true => Some(9),
            Token(18, _) if true => Some(10),
            Token(19, _) if true => Some(11),
            Token(20, _) if true => Some(12),
            Token(21, _) if true => Some(13),
            Token(22, _) if true => Some(14),
            Token(23, _) if true => Some(15),
            Token(24, _) if true => Some(16),
            Token(25, _) if true => Some(17),
            Token(26, _) if true => Some(18),
            Token(27, _) if true => Some(19),
            Token(28, _) if true => Some(20),
            Token(29, _) if true => Some(21),
            Token(30, _) if true => Some(22),
            Token(31, _) if true => Some(23),
            Token(32, _) if true => Some(24),
            Token(33, _) if true => Some(25),
            Token(34, _) if true => Some(26),
            Token(35, _) if true => Some(27),
            Token(36, _) if true => Some(28),
            Token(37, _) if true => Some(29),
            Token(38, _) if true => Some(30),
            Token(39, _) if true => Some(31),
            Token(40, _) if true => Some(32),
            Token(41, _) if true => Some(33),
            Token(42, _) if true => Some(34),
            Token(43, _) if true => Some(35),
            Token(44, _) if true => Some(36),
            Token(45, _) if true => Some(37),
            Token(46, _) if true => Some(38),
            Token(47, _) if true => Some(39),
            Token(48, _) if true => Some(40),
            Token(49, _) if true => Some(41),
            Token(50, _) if true => Some(42),
            Token(51, _) if true => Some(43),
            Token(52, _) if true => Some(44),
            Token(53, _) if true => Some(45),
            Token(54, _) if true => Some(46),
            Token(55, _) if true => Some(47),
            Token(56, _) if true => Some(48),
            Token(57, _) if true => Some(49),
            Token(58, _) if true => Some(50),
            Token(59, _) if true => Some(51),
            Token(60, _) if true => Some(52),
            Token(61, _) if true => Some(53),
            Token(62, _) if true => Some(54),
            Token(63, _) if true => Some(55),
            Token(64, _) if true => Some(56),
            Token(65, _) if true => Some(57),
            Token(66, _) if true => Some(58),
            Token(67, _) if true => Some(59),
            Token(68, _) if true => Some(60),
            Token(69, _) if true => Some(61),
            Token(70, _) if true => Some(62),
            Token(71, _) if true => Some(63),
            Token(72, _) if true => Some(64),
            Token(73, _) if true => Some(65),
            Token(74, _) if true => Some(66),
            Token(75, _) if true => Some(67),
            Token(76, _) if true => Some(68),
            Token(77, _) if true => Some(69),
            Token(78, _) if true => Some(70),
            Token(79, _) if true => Some(71),
            Token(80, _) if true => Some(72),
            Token(81, _) if true => Some(73),
            Token(82, _) if true => Some(74),
            Token(0, _) if true => Some(75),
            Token(1, _) if true => Some(76),
            Token(2, _) if true => Some(77),
            Token(3, _) if true => Some(78),
            Token(4, _) if true => Some(79),
            Token(5, _) if true => Some(80),
            Token(6, _) if true => Some(81),
            Token(7, _) if true => Some(82),
            _ => None,
        }
    }
    fn __token_to_symbol<
        'input,
    >(
        __token_index: usize,
        __token: Token<'input>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> __Symbol<'input>
    {
        match __token_index {
            0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 | 42 | 43 | 44 | 45 | 46 | 47 | 48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 | 58 | 59 | 60 | 61 | 62 | 63 | 64 | 65 | 66 | 67 | 68 | 69 | 70 | 71 | 72 | 73 | 74 | 75 | 76 | 77 | 78 | 79 | 80 | 81 | 82 => match __token {
                Token(8, __tok0) | Token(9, __tok0) | Token(10, __tok0) | Token(11, __tok0) | Token(12, __tok0) | Token(13, __tok0) | Token(14, __tok0) | Token(15, __tok0) | Token(16, __tok0) | Token(17, __tok0) | Token(18, __tok0) | Token(19, __tok0) | Token(20, __tok0) | Token(21, __tok0) | Token(22, __tok0) | Token(23, __tok0) | Token(24, __tok0) | Token(25, __tok0) | Token(26, __tok0) | Token(27, __tok0) | Token(28, __tok0) | Token(29, __tok0) | Token(30, __tok0) | Token(31, __tok0) | Token(32, __tok0) | Token(33, __tok0) | Token(34, __tok0) | Token(35, __tok0) | Token(36, __tok0) | Token(37, __tok0) | Token(38, __tok0) | Token(39, __tok0) | Token(40, __tok0) | Token(41, __tok0) | Token(42, __tok0) | Token(43, __tok0) | Token(44, __tok0) | Token(45, __tok0) | Token(46, __tok0) | Token(47, __tok0) | Token(48, __tok0) | Token(49, __tok0) | Token(50, __tok0) | Token(51, __tok0) | Token(52, __tok0) | Token(53, __tok0) | Token(54, __tok0) | Token(55, __tok0) | Token(56, __tok0) | Token(57, __tok0) | Token(58, __tok0) | Token(59, __tok0) | Token(60, __tok0) | Token(61, __tok0) | Token(62, __tok0) | Token(63, __tok0) | Token(64, __tok0) | Token(65, __tok0) | Token(66, __tok0) | Token(67, __tok0) | Token(68, __tok0) | Token(69, __tok0) | Token(70, __tok0) | Token(71, __tok0) | Token(72, __tok0) | Token(73, __tok0) | Token(74, __tok0) | Token(75, __tok0) | Token(76, __tok0) | Token(77, __tok0) | Token(78, __tok0) | Token(79, __tok0) | Token(80, __tok0) | Token(81, __tok0) | Token(82, __tok0) | Token(0, __tok0) | Token(1, __tok0) | Token(2, __tok0) | Token(3, __tok0) | Token(4, __tok0) | Token(5, __tok0) | Token(6, __tok0) | Token(7, __tok0) if true => __Symbol::Variant0(__tok0),
                _ => unreachable!(),
            },
            _ => unreachable!(),
        }
    }
    pub struct PrimTypeParser {
        builder: __lalrpop_util::lexer::MatcherBuilder,
        _priv: (),
    }

    impl PrimTypeParser {
        pub fn new() -> PrimTypeParser {
            let __builder = super::__intern_token::new_builder();
            PrimTypeParser {
                builder: __builder,
                _priv: (),
            }
        }

        #[allow(dead_code)]
        pub fn parse<
            'input,
        >(
            &self,
            lookup: &LineColLookup<'input>,
            input: &'input str,
        ) -> Result<PrimType, __lalrpop_util::ParseError<usize, Token<'input>, &'static str>>
        {
            let mut __tokens = self.builder.matcher(input);
            __state_machine::Parser::drive(
                __StateMachine {
                    lookup,
                    input,
                    __phantom: core::marker::PhantomData::<(&())>,
                },
                __tokens,
            )
        }
    }
    pub(crate) fn __reduce<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut alloc::vec::Vec<i16>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> Option<Result<PrimType,__lalrpop_util::ParseError<usize, Token<'input>, &'static str>>>
    {
        let (__pop_states, __nonterminal) = match __action {
            0 => {
                __reduce0(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1 => {
                __reduce1(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            2 => {
                __reduce2(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            3 => {
                __reduce3(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            4 => {
                __reduce4(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            5 => {
                __reduce5(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            6 => {
                __reduce6(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            7 => {
                __reduce7(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            8 => {
                __reduce8(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            9 => {
                __reduce9(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            10 => {
                __reduce10(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            11 => {
                __reduce11(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            12 => {
                __reduce12(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            13 => {
                __reduce13(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            14 => {
                __reduce14(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            15 => {
                __reduce15(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            16 => {
                __reduce16(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            17 => {
                __reduce17(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            18 => {
                __reduce18(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            19 => {
                __reduce19(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            20 => {
                __reduce20(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            21 => {
                __reduce21(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            22 => {
                __reduce22(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            23 => {
                __reduce23(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            24 => {
                __reduce24(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            25 => {
                __reduce25(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            26 => {
                __reduce26(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            27 => {
                __reduce27(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            28 => {
                __reduce28(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            29 => {
                __reduce29(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            30 => {
                __reduce30(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            31 => {
                __reduce31(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            32 => {
                __reduce32(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            33 => {
                __reduce33(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            34 => {
                __reduce34(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            35 => {
                __reduce35(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            36 => {
                __reduce36(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            37 => {
                __reduce37(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            38 => {
                __reduce38(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            39 => {
                __reduce39(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            40 => {
                __reduce40(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            41 => {
                __reduce41(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            42 => {
                __reduce42(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            43 => {
                __reduce43(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            44 => {
                __reduce44(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            45 => {
                __reduce45(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            46 => {
                __reduce46(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            47 => {
                __reduce47(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            48 => {
                __reduce48(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            49 => {
                __reduce49(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            50 => {
                __reduce50(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            51 => {
                __reduce51(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            52 => {
                __reduce52(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            53 => {
                __reduce53(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            54 => {
                __reduce54(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            55 => {
                __reduce55(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            56 => {
                __reduce56(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            57 => {
                __reduce57(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            58 => {
                __reduce58(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            59 => {
                __reduce59(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            60 => {
                __reduce60(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            61 => {
                __reduce61(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            62 => {
                __reduce62(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            63 => {
                __reduce63(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            64 => {
                __reduce64(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            65 => {
                __reduce65(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            66 => {
                __reduce66(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            67 => {
                __reduce67(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            68 => {
                __reduce68(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            69 => {
                __reduce69(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            70 => {
                __reduce70(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            71 => {
                __reduce71(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            72 => {
                __reduce72(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            73 => {
                __reduce73(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            74 => {
                __reduce74(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            75 => {
                __reduce75(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            76 => {
                __reduce76(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            77 => {
                __reduce77(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            78 => {
                __reduce78(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            79 => {
                __reduce79(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            80 => {
                __reduce80(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            81 => {
                __reduce81(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            82 => {
                __reduce82(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            83 => {
                __reduce83(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            84 => {
                __reduce84(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            85 => {
                __reduce85(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            86 => {
                __reduce86(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            87 => {
                __reduce87(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            88 => {
                __reduce88(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            89 => {
                __reduce89(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            90 => {
                __reduce90(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            91 => {
                __reduce91(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            92 => {
                __reduce92(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            93 => {
                __reduce93(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            94 => {
                __reduce94(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            95 => {
                __reduce95(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            96 => {
                __reduce96(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            97 => {
                __reduce97(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            98 => {
                __reduce98(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            99 => {
                __reduce99(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            100 => {
                __reduce100(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            101 => {
                __reduce101(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            102 => {
                __reduce102(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            103 => {
                __reduce103(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            104 => {
                __reduce104(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            105 => {
                __reduce105(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            106 => {
                __reduce106(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            107 => {
                __reduce107(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            108 => {
                __reduce108(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            109 => {
                __reduce109(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            110 => {
                __reduce110(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            111 => {
                __reduce111(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            112 => {
                __reduce112(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            113 => {
                __reduce113(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            114 => {
                __reduce114(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            115 => {
                __reduce115(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            116 => {
                __reduce116(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            117 => {
                __reduce117(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            118 => {
                __reduce118(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            119 => {
                __reduce119(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            120 => {
                __reduce120(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            121 => {
                __reduce121(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            122 => {
                __reduce122(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            123 => {
                __reduce123(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            124 => {
                __reduce124(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            125 => {
                __reduce125(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            126 => {
                __reduce126(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            127 => {
                __reduce127(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            128 => {
                __reduce128(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            129 => {
                __reduce129(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            130 => {
                __reduce130(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            131 => {
                __reduce131(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            132 => {
                __reduce132(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            133 => {
                __reduce133(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            134 => {
                __reduce134(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            135 => {
                __reduce135(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            136 => {
                __reduce136(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            137 => {
                __reduce137(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            138 => {
                __reduce138(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            139 => {
                __reduce139(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            140 => {
                __reduce140(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            141 => {
                __reduce141(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            142 => {
                __reduce142(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            143 => {
                __reduce143(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            144 => {
                __reduce144(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            145 => {
                __reduce145(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            146 => {
                __reduce146(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            147 => {
                __reduce147(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            148 => {
                __reduce148(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            149 => {
                __reduce149(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            150 => {
                __reduce150(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            151 => {
                __reduce151(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            152 => {
                __reduce152(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            153 => {
                __reduce153(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            154 => {
                __reduce154(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            155 => {
                __reduce155(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            156 => {
                __reduce156(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            157 => {
                __reduce157(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            158 => {
                __reduce158(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            159 => {
                __reduce159(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            160 => {
                __reduce160(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            161 => {
                __reduce161(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            162 => {
                __reduce162(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            163 => {
                __reduce163(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            164 => {
                __reduce164(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            165 => {
                __reduce165(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            166 => {
                __reduce166(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            167 => {
                __reduce167(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            168 => {
                __reduce168(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            169 => {
                __reduce169(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            170 => {
                __reduce170(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            171 => {
                __reduce171(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            172 => {
                __reduce172(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            173 => {
                __reduce173(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            174 => {
                __reduce174(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            175 => {
                __reduce175(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            176 => {
                __reduce176(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            177 => {
                __reduce177(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            178 => {
                __reduce178(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            179 => {
                __reduce179(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            180 => {
                __reduce180(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            181 => {
                __reduce181(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            182 => {
                __reduce182(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            183 => {
                __reduce183(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            184 => {
                __reduce184(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            185 => {
                __reduce185(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            186 => {
                __reduce186(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            187 => {
                __reduce187(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            188 => {
                __reduce188(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            189 => {
                __reduce189(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            190 => {
                __reduce190(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            191 => {
                __reduce191(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            192 => {
                __reduce192(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            193 => {
                __reduce193(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            194 => {
                __reduce194(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            195 => {
                __reduce195(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            196 => {
                __reduce196(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            197 => {
                __reduce197(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            198 => {
                __reduce198(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            199 => {
                __reduce199(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            200 => {
                __reduce200(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            201 => {
                __reduce201(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            202 => {
                __reduce202(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            203 => {
                __reduce203(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            204 => {
                __reduce204(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            205 => {
                __reduce205(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            206 => {
                __reduce206(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            207 => {
                __reduce207(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            208 => {
                __reduce208(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            209 => {
                __reduce209(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            210 => {
                __reduce210(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            211 => {
                __reduce211(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            212 => {
                __reduce212(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            213 => {
                __reduce213(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            214 => {
                __reduce214(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            215 => {
                __reduce215(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            216 => {
                __reduce216(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            217 => {
                __reduce217(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            218 => {
                __reduce218(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            219 => {
                __reduce219(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            220 => {
                __reduce220(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            221 => {
                __reduce221(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            222 => {
                __reduce222(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            223 => {
                __reduce223(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            224 => {
                __reduce224(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            225 => {
                __reduce225(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            226 => {
                __reduce226(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            227 => {
                __reduce227(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            228 => {
                __reduce228(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            229 => {
                __reduce229(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            230 => {
                __reduce230(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            231 => {
                __reduce231(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            232 => {
                __reduce232(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            233 => {
                __reduce233(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            234 => {
                __reduce234(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            235 => {
                __reduce235(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            236 => {
                __reduce236(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            237 => {
                __reduce237(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            238 => {
                __reduce238(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            239 => {
                __reduce239(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            240 => {
                __reduce240(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            241 => {
                __reduce241(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            242 => {
                __reduce242(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            243 => {
                __reduce243(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            244 => {
                __reduce244(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            245 => {
                __reduce245(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            246 => {
                __reduce246(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            247 => {
                __reduce247(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            248 => {
                __reduce248(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            249 => {
                __reduce249(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            250 => {
                __reduce250(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            251 => {
                __reduce251(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            252 => {
                __reduce252(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            253 => {
                __reduce253(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            254 => {
                __reduce254(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            255 => {
                __reduce255(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            256 => {
                __reduce256(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            257 => {
                __reduce257(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            258 => {
                __reduce258(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            259 => {
                __reduce259(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            260 => {
                __reduce260(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            261 => {
                __reduce261(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            262 => {
                __reduce262(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            263 => {
                __reduce263(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            264 => {
                __reduce264(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            265 => {
                __reduce265(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            266 => {
                __reduce266(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            267 => {
                __reduce267(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            268 => {
                __reduce268(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            269 => {
                __reduce269(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            270 => {
                __reduce270(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            271 => {
                __reduce271(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            272 => {
                __reduce272(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            273 => {
                __reduce273(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            274 => {
                __reduce274(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            275 => {
                __reduce275(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            276 => {
                __reduce276(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            277 => {
                __reduce277(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            278 => {
                __reduce278(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            279 => {
                __reduce279(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            280 => {
                __reduce280(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            281 => {
                __reduce281(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            282 => {
                __reduce282(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            283 => {
                __reduce283(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            284 => {
                __reduce284(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            285 => {
                __reduce285(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            286 => {
                __reduce286(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            287 => {
                __reduce287(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            288 => {
                __reduce288(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            289 => {
                __reduce289(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            290 => {
                __reduce290(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            291 => {
                __reduce291(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            292 => {
                __reduce292(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            293 => {
                __reduce293(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            294 => {
                __reduce294(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            295 => {
                __reduce295(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            296 => {
                __reduce296(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            297 => {
                __reduce297(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            298 => {
                __reduce298(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            299 => {
                __reduce299(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            300 => {
                __reduce300(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            301 => {
                __reduce301(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            302 => {
                __reduce302(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            303 => {
                __reduce303(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            304 => {
                __reduce304(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            305 => {
                __reduce305(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            306 => {
                __reduce306(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            307 => {
                __reduce307(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            308 => {
                __reduce308(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            309 => {
                __reduce309(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            310 => {
                __reduce310(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            311 => {
                __reduce311(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            312 => {
                __reduce312(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            313 => {
                __reduce313(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            314 => {
                __reduce314(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            315 => {
                __reduce315(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            316 => {
                __reduce316(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            317 => {
                __reduce317(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            318 => {
                __reduce318(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            319 => {
                __reduce319(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            320 => {
                __reduce320(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            321 => {
                __reduce321(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            322 => {
                __reduce322(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            323 => {
                __reduce323(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            324 => {
                __reduce324(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            325 => {
                __reduce325(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            326 => {
                __reduce326(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            327 => {
                __reduce327(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            328 => {
                __reduce328(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            329 => {
                __reduce329(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            330 => {
                __reduce330(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            331 => {
                __reduce331(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            332 => {
                __reduce332(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            333 => {
                __reduce333(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            334 => {
                __reduce334(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            335 => {
                __reduce335(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            336 => {
                __reduce336(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            337 => {
                __reduce337(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            338 => {
                __reduce338(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            339 => {
                __reduce339(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            340 => {
                __reduce340(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            341 => {
                __reduce341(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            342 => {
                __reduce342(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            343 => {
                __reduce343(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            344 => {
                __reduce344(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            345 => {
                __reduce345(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            346 => {
                __reduce346(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            347 => {
                __reduce347(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            348 => {
                __reduce348(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            349 => {
                __reduce349(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            350 => {
                __reduce350(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            351 => {
                __reduce351(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            352 => {
                __reduce352(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            353 => {
                __reduce353(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            354 => {
                __reduce354(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            355 => {
                __reduce355(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            356 => {
                __reduce356(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            357 => {
                __reduce357(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            358 => {
                __reduce358(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            359 => {
                __reduce359(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            360 => {
                __reduce360(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            361 => {
                __reduce361(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            362 => {
                __reduce362(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            363 => {
                __reduce363(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            364 => {
                __reduce364(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            365 => {
                __reduce365(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            366 => {
                __reduce366(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            367 => {
                __reduce367(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            368 => {
                __reduce368(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            369 => {
                __reduce369(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            370 => {
                __reduce370(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            371 => {
                __reduce371(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            372 => {
                __reduce372(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            373 => {
                __reduce373(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            374 => {
                __reduce374(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            375 => {
                __reduce375(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            376 => {
                __reduce376(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            377 => {
                __reduce377(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            378 => {
                __reduce378(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            379 => {
                __reduce379(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            380 => {
                __reduce380(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            381 => {
                __reduce381(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            382 => {
                __reduce382(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            383 => {
                __reduce383(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            384 => {
                __reduce384(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            385 => {
                __reduce385(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            386 => {
                __reduce386(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            387 => {
                __reduce387(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            388 => {
                __reduce388(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            389 => {
                __reduce389(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            390 => {
                __reduce390(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            391 => {
                __reduce391(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            392 => {
                __reduce392(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            393 => {
                __reduce393(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            394 => {
                __reduce394(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            395 => {
                __reduce395(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            396 => {
                // __PrimType = PrimType => ActionFn(2);
                let __sym0 = __pop_Variant58(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action2::<>(lookup, input, __sym0);
                return Some(Ok(__nt));
            }
            397 => {
                __reduce397(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            398 => {
                __reduce398(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            _ => panic!("invalid action code {}", __action)
        };
        let __states_len = __states.len();
        __states.truncate(__states_len - __pop_states);
        let __state = *__states.last().unwrap();
        let __next_state = __goto(__state, __nonterminal);
        __states.push(__next_state);
        None
    }
    #[inline(never)]
    fn __symbol_type_mismatch() -> ! {
        panic!("symbol type mismatch")
    }
    fn __pop_Variant4<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, (&'input str, Type_), usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant4(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant26<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, BinOp, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant26(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant28<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Case, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant28(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant29<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Cases, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant29(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant30<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Dec, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant30(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant31<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, DecField, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant31(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant6<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, DecField_, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant6(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant55<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, DecFields, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant55(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant8<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Dec_, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant8(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant34<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Decs, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant34(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant35<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Delim<DecField_>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant35(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant36<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Delim<Dec_>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant36(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant38<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Delim<Exp_>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant38(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant39<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Delim<Node<Case>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant39(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant37<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Delim<Node<ExpField>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant37(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant40<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Delim<Pat_>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant40(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant27<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Exp, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant27(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant41<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, ExpField, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant41(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant12<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Exp_, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant12(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant43<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Id, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant43(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant19<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Id_, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant19(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant44<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Literal, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant44(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant65<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Mut, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant65(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant14<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Node<Case>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant14(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant47<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Node<Dec>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant47(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant48<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Node<DecField>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant48(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant45<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Node<Exp>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant45(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant10<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Node<ExpField>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant10(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant49<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Node<Id>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant49(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant50<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Node<Pat>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant50(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant51<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Node<SortPat>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant51(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant52<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Node<Stab>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant52(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant53<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Node<Type>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant53(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant54<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Node<Vis>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant54(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant56<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Pat, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant56(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant16<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Pat_, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant16(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant58<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, PrimType, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant58(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant59<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, SortPat, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant59(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant60<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, SortPat_, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant60(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant61<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Stab, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant61(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant21<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Stab_, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant21(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant62<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, String, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant62(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant63<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Type, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant63(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant2<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Type_, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant2(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant64<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, UnOp, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant64(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant66<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Vis, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant66(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant23<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Vis_, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant23(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant7<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, alloc::vec::Vec<DecField_>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant7(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant9<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, alloc::vec::Vec<Dec_>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant9(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant13<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, alloc::vec::Vec<Exp_>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant13(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant15<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, alloc::vec::Vec<Node<Case>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant15(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant11<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, alloc::vec::Vec<Node<ExpField>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant11(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant17<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, alloc::vec::Vec<Pat_>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant17(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant5<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, core::option::Option<(&'input str, Type_)>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant5(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant32<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, core::option::Option<DecField_>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant32(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant33<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, core::option::Option<Dec_>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant33(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant18<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, core::option::Option<Exp_>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant18(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant20<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, core::option::Option<Id_>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant20(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant46<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, core::option::Option<Node<Case>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant46(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant42<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, core::option::Option<Node<ExpField>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant42(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant57<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, core::option::Option<Pat_>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant57(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant22<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, core::option::Option<Stab_>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant22(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant3<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, core::option::Option<Type_>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant3(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant24<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, core::option::Option<Vis_>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant24(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant1<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, core::option::Option<&'input str>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant1(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant25<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, usize, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant25(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant0<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, &'input str, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant0(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    pub(crate) fn __reduce0<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // "="? = "=" => ActionFn(130);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action130::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 0)
    }
    pub(crate) fn __reduce1<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // "="? =  => ActionFn(131);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action131::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (0, 0)
    }
    pub(crate) fn __reduce2<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (":" <Type_>) = ":", Type => ActionFn(449);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant63(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action449::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (2, 1)
    }
    pub(crate) fn __reduce3<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (":" <Type_>)? = ":", Type => ActionFn(454);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant63(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action454::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (2, 2)
    }
    pub(crate) fn __reduce4<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (":" <Type_>)? =  => ActionFn(152);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action152::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (0, 2)
    }
    pub(crate) fn __reduce5<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (":" Type_) = ":", Type => ActionFn(450);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant63(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action450::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (2, 3)
    }
    pub(crate) fn __reduce6<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (":" Type_)? = ":", Type => ActionFn(457);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant63(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action457::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (2, 4)
    }
    pub(crate) fn __reduce7<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (":" Type_)? =  => ActionFn(128);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action128::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (0, 4)
    }
    pub(crate) fn __reduce8<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<DecField_> ";") = DecField, ";" => ActionFn(463);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant31(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action463::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 5)
    }
    pub(crate) fn __reduce9<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<DecField_> ";")* =  => ActionFn(211);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action211::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (0, 6)
    }
    pub(crate) fn __reduce10<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<DecField_> ";")* = (<DecField_> ";")+ => ActionFn(212);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action212::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 6)
    }
    pub(crate) fn __reduce11<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<DecField_> ";")+ = DecField, ";" => ActionFn(465);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant31(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action465::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (2, 7)
    }
    pub(crate) fn __reduce12<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<DecField_> ";")+ = (<DecField_> ";")+, DecField, ";" => ActionFn(466);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant31(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action466::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (3, 7)
    }
    pub(crate) fn __reduce13<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<Dec_> ";") = Dec, ";" => ActionFn(470);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action470::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (2, 8)
    }
    pub(crate) fn __reduce14<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<Dec_> ";")* =  => ActionFn(199);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action199::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (0, 9)
    }
    pub(crate) fn __reduce15<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<Dec_> ";")* = (<Dec_> ";")+ => ActionFn(200);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action200::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce16<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<Dec_> ";")+ = Dec, ";" => ActionFn(473);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action473::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (2, 10)
    }
    pub(crate) fn __reduce17<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<Dec_> ";")+ = (<Dec_> ";")+, Dec, ";" => ActionFn(474);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant30(__symbols);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action474::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (3, 10)
    }
    pub(crate) fn __reduce18<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<ExpField_> ";") = ExpField, ";" => ActionFn(478);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant41(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action478::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (2, 11)
    }
    pub(crate) fn __reduce19<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<ExpField_> ";")* =  => ActionFn(189);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action189::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (0, 12)
    }
    pub(crate) fn __reduce20<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<ExpField_> ";")* = (<ExpField_> ";")+ => ActionFn(190);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action190::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 12)
    }
    pub(crate) fn __reduce21<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<ExpField_> ";")+ = ExpField, ";" => ActionFn(480);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant41(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action480::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (2, 13)
    }
    pub(crate) fn __reduce22<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<ExpField_> ";")+ = (<ExpField_> ";")+, ExpField, ";" => ActionFn(481);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant41(__symbols);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action481::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (3, 13)
    }
    pub(crate) fn __reduce23<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<ExpNonVar_<Ob>> ",") = ExpNonVar<Ob>, "," => ActionFn(485);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action485::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (2, 14)
    }
    pub(crate) fn __reduce24<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<ExpNonVar_<Ob>> ",")* =  => ActionFn(339);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action339::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (0, 15)
    }
    pub(crate) fn __reduce25<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<ExpNonVar_<Ob>> ",")* = (<ExpNonVar_<Ob>> ",")+ => ActionFn(340);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action340::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (1, 15)
    }
    pub(crate) fn __reduce26<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<ExpNonVar_<Ob>> ",")+ = ExpNonVar<Ob>, "," => ActionFn(487);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action487::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (2, 16)
    }
    pub(crate) fn __reduce27<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<ExpNonVar_<Ob>> ",")+ = (<ExpNonVar_<Ob>> ",")+, ExpNonVar<Ob>, "," => ActionFn(488);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action488::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (3, 16)
    }
    pub(crate) fn __reduce28<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<Exp_<Ob>> ",") = Exp<Ob>, "," => ActionFn(492);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action492::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (2, 17)
    }
    pub(crate) fn __reduce29<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<Exp_<Ob>> ",")+ = Exp<Ob>, "," => ActionFn(507);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action507::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (2, 18)
    }
    pub(crate) fn __reduce30<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<Exp_<Ob>> ",")+ = (<Exp_<Ob>> ",")+, Exp<Ob>, "," => ActionFn(508);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action508::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (3, 18)
    }
    pub(crate) fn __reduce31<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<Node<Case>> ";") = Case, ";" => ActionFn(509);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant28(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action509::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (2, 19)
    }
    pub(crate) fn __reduce32<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<Node<Case>> ";")* =  => ActionFn(194);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action194::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (0, 20)
    }
    pub(crate) fn __reduce33<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<Node<Case>> ";")* = (<Node<Case>> ";")+ => ActionFn(195);
        let __sym0 = __pop_Variant15(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action195::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 20)
    }
    pub(crate) fn __reduce34<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<Node<Case>> ";")+ = Case, ";" => ActionFn(511);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant28(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action511::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (2, 21)
    }
    pub(crate) fn __reduce35<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<Node<Case>> ";")+ = (<Node<Case>> ";")+, Case, ";" => ActionFn(512);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant28(__symbols);
        let __sym0 = __pop_Variant15(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action512::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (3, 21)
    }
    pub(crate) fn __reduce36<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<PatBin_> ",") = PatBin, "," => ActionFn(516);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant56(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action516::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (2, 22)
    }
    pub(crate) fn __reduce37<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<PatBin_> ",")+ = PatBin, "," => ActionFn(520);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant56(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action520::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (2, 23)
    }
    pub(crate) fn __reduce38<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<PatBin_> ",")+ = (<PatBin_> ",")+, PatBin, "," => ActionFn(521);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant56(__symbols);
        let __sym0 = __pop_Variant17(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action521::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (3, 23)
    }
    pub(crate) fn __reduce39<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (ExpNullary_<Bl>) = ExpNullary<Bl> => ActionFn(523);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action523::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 24)
    }
    pub(crate) fn __reduce40<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (ExpNullary_<Bl>)? = ExpNullary<Bl> => ActionFn(524);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action524::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (1, 25)
    }
    pub(crate) fn __reduce41<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (ExpNullary_<Bl>)? =  => ActionFn(345);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action345::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (0, 25)
    }
    pub(crate) fn __reduce42<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (ExpNullary_<Ob>) = ExpNullary<Ob> => ActionFn(528);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action528::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 26)
    }
    pub(crate) fn __reduce43<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (ExpNullary_<Ob>)? = ExpNullary<Ob> => ActionFn(539);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action539::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (1, 27)
    }
    pub(crate) fn __reduce44<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (ExpNullary_<Ob>)? =  => ActionFn(313);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action313::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (0, 27)
    }
    pub(crate) fn __reduce45<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (Id_) = Id => ActionFn(543);
        let __sym0 = __pop_Variant43(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action543::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (1, 28)
    }
    pub(crate) fn __reduce46<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (Id_)? = Id => ActionFn(556);
        let __sym0 = __pop_Variant43(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action556::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 29)
    }
    pub(crate) fn __reduce47<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (Id_)? =  => ActionFn(133);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action133::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (0, 29)
    }
    pub(crate) fn __reduce48<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (Id_?) = Id => ActionFn(565);
        let __sym0 = __pop_Variant43(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action565::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 30)
    }
    pub(crate) fn __reduce49<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (Id_?) =  => ActionFn(566);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action566::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (0, 30)
    }
    pub(crate) fn __reduce50<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (Stab_) = Stab => ActionFn(572);
        let __sym0 = __pop_Variant61(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action572::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (1, 31)
    }
    pub(crate) fn __reduce51<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (Stab_)? = Stab => ActionFn(573);
        let __sym0 = __pop_Variant61(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action573::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (1, 32)
    }
    pub(crate) fn __reduce52<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (Stab_)? =  => ActionFn(113);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action113::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (0, 32)
    }
    pub(crate) fn __reduce53<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (Vis_) = Vis => ActionFn(577);
        let __sym0 = __pop_Variant66(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action577::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (1, 33)
    }
    pub(crate) fn __reduce54<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (Vis_)? = Vis => ActionFn(578);
        let __sym0 = __pop_Variant66(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action578::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (1, 34)
    }
    pub(crate) fn __reduce55<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (Vis_)? =  => ActionFn(116);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action116::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (0, 34)
    }
    pub(crate) fn __reduce56<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // @L =  => ActionFn(215);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action215::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (0, 35)
    }
    pub(crate) fn __reduce57<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // @R =  => ActionFn(214);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action214::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (0, 36)
    }
    pub(crate) fn __reduce58<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BinOp = "+" => ActionFn(86);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action86::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce59<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BinOp = "-" => ActionFn(87);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action87::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce60<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BinOp = "*" => ActionFn(88);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action88::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce61<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BinOp = "/" => ActionFn(89);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action89::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce62<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BinOp = "%" => ActionFn(90);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action90::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce63<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BinOp = "**" => ActionFn(91);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action91::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce64<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BinOp = "+%" => ActionFn(92);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action92::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce65<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BinOp = "-%" => ActionFn(93);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action93::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce66<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BinOp = "*%" => ActionFn(94);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action94::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce67<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BinOp = "**%" => ActionFn(95);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action95::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce68<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BinOp = "&" => ActionFn(96);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action96::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce69<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BinOp = "|" => ActionFn(97);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action97::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce70<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BinOp = "^" => ActionFn(98);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action98::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce71<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BinOp = "<<" => ActionFn(99);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action99::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce72<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BinOp = "<<>" => ActionFn(100);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action100::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce73<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BinOp = "<>>" => ActionFn(101);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action101::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce74<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BinOp = "#" => ActionFn(102);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action102::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce75<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Bl = r#"\\\\\\\\BIG.FART."# => ActionFn(5);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action5::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 38)
    }
    pub(crate) fn __reduce76<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Block = "{", Decs, "}" => ActionFn(61);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant34(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action61::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 39)
    }
    pub(crate) fn __reduce77<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Block_ = Block => ActionFn(583);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action583::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 40)
    }
    pub(crate) fn __reduce78<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Case = "case", PatNullary, ExpNest => ActionFn(731);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant56(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action731::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant28(__nt), __end));
        (3, 41)
    }
    pub(crate) fn __reduce79<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Cases = Delim0<Node<Case>, ";"> => ActionFn(65);
        let __sym0 = __pop_Variant39(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action65::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 42)
    }
    pub(crate) fn __reduce80<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Dec = DecVar => ActionFn(71);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action71::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 43)
    }
    pub(crate) fn __reduce81<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Dec = DecNonVar => ActionFn(72);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action72::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 43)
    }
    pub(crate) fn __reduce82<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Dec = ExpNonDec<Ob> => ActionFn(73);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action73::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 43)
    }
    pub(crate) fn __reduce83<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecField = Vis, Stab, Dec => ActionFn(579);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant30(__symbols);
        let __sym1 = __pop_Variant61(__symbols);
        let __sym0 = __pop_Variant66(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action579::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant31(__nt), __end));
        (3, 44)
    }
    pub(crate) fn __reduce84<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecField = Stab, Dec => ActionFn(580);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant30(__symbols);
        let __sym0 = __pop_Variant61(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action580::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant31(__nt), __end));
        (2, 44)
    }
    pub(crate) fn __reduce85<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecField = Vis, Dec => ActionFn(581);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant30(__symbols);
        let __sym0 = __pop_Variant66(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action581::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant31(__nt), __end));
        (2, 44)
    }
    pub(crate) fn __reduce86<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecField = Dec => ActionFn(582);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action582::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant31(__nt), __end));
        (1, 44)
    }
    pub(crate) fn __reduce87<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecField_ = DecField => ActionFn(462);
        let __sym0 = __pop_Variant31(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action462::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 45)
    }
    pub(crate) fn __reduce88<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecField_? = DecField => ActionFn(464);
        let __sym0 = __pop_Variant31(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action464::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant32(__nt), __end));
        (1, 46)
    }
    pub(crate) fn __reduce89<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecField_? =  => ActionFn(210);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action210::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant32(__nt), __end));
        (0, 46)
    }
    pub(crate) fn __reduce90<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecNonVar = "let", Pat, "=", Exp<Ob> => ActionFn(741);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant27(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant56(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action741::<>(lookup, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (4, 47)
    }
    pub(crate) fn __reduce91<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecNonVar = "module", Id, "=", ObjBody => ActionFn(557);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant55(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant43(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action557::<>(lookup, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (4, 47)
    }
    pub(crate) fn __reduce92<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecNonVar = "module", "=", ObjBody => ActionFn(558);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant55(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action558::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (3, 47)
    }
    pub(crate) fn __reduce93<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecNonVar = "module", Id, ObjBody => ActionFn(559);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant55(__symbols);
        let __sym1 = __pop_Variant43(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action559::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (3, 47)
    }
    pub(crate) fn __reduce94<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecNonVar = "module", ObjBody => ActionFn(560);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant55(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action560::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (2, 47)
    }
    pub(crate) fn __reduce95<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecNonVar = SortPat, "func", Id, PatPlain, ":", Type, Block => ActionFn(745);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant27(__symbols);
        let __sym5 = __pop_Variant63(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant56(__symbols);
        let __sym2 = __pop_Variant43(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant59(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym6.2.clone();
        let __nt = super::__action745::<>(lookup, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (7, 47)
    }
    pub(crate) fn __reduce96<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecNonVar = SortPat, "func", PatPlain, ":", Type, Block => ActionFn(746);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant27(__symbols);
        let __sym4 = __pop_Variant63(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant56(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant59(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action746::<>(lookup, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (6, 47)
    }
    pub(crate) fn __reduce97<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecNonVar = SortPat, "func", Id, PatPlain, Block => ActionFn(747);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant27(__symbols);
        let __sym3 = __pop_Variant56(__symbols);
        let __sym2 = __pop_Variant43(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant59(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action747::<>(lookup, input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (5, 47)
    }
    pub(crate) fn __reduce98<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecNonVar = SortPat, "func", PatPlain, Block => ActionFn(748);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant27(__symbols);
        let __sym2 = __pop_Variant56(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant59(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action748::<>(lookup, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (4, 47)
    }
    pub(crate) fn __reduce99<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecNonVar = SortPat, "func", Id, PatPlain, ":", Type, "=", Exp<Ob> => ActionFn(749);
        assert!(__symbols.len() >= 8);
        let __sym7 = __pop_Variant27(__symbols);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant63(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant56(__symbols);
        let __sym2 = __pop_Variant43(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant59(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym7.2.clone();
        let __nt = super::__action749::<>(lookup, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (8, 47)
    }
    pub(crate) fn __reduce100<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecNonVar = SortPat, "func", PatPlain, ":", Type, "=", Exp<Ob> => ActionFn(750);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant27(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant63(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant56(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant59(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym6.2.clone();
        let __nt = super::__action750::<>(lookup, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (7, 47)
    }
    pub(crate) fn __reduce101<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecNonVar = SortPat, "func", Id, PatPlain, "=", Exp<Ob> => ActionFn(751);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant27(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant56(__symbols);
        let __sym2 = __pop_Variant43(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant59(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action751::<>(lookup, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (6, 47)
    }
    pub(crate) fn __reduce102<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecNonVar = SortPat, "func", PatPlain, "=", Exp<Ob> => ActionFn(752);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant27(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant56(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant59(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action752::<>(lookup, input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (5, 47)
    }
    pub(crate) fn __reduce103<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecNonVar_ = DecNonVar => ActionFn(596);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action596::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 48)
    }
    pub(crate) fn __reduce104<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecVar = "var", Pat, "=", Exp<Ob> => ActionFn(742);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant27(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant56(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action742::<>(lookup, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (4, 49)
    }
    pub(crate) fn __reduce105<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecVar_ = DecVar => ActionFn(599);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action599::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 50)
    }
    pub(crate) fn __reduce106<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Dec_ = Dec => ActionFn(469);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action469::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 51)
    }
    pub(crate) fn __reduce107<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Dec_? = Dec => ActionFn(472);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action472::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant33(__nt), __end));
        (1, 52)
    }
    pub(crate) fn __reduce108<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Dec_? =  => ActionFn(198);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action198::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant33(__nt), __end));
        (0, 52)
    }
    pub(crate) fn __reduce109<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Decs = Delim0<Dec_, ";"> => ActionFn(69);
        let __sym0 = __pop_Variant36(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action69::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant34(__nt), __end));
        (1, 53)
    }
    pub(crate) fn __reduce110<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim0<DecField_, ";"> = DecField => ActionFn(592);
        let __sym0 = __pop_Variant31(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action592::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant35(__nt), __end));
        (1, 54)
    }
    pub(crate) fn __reduce111<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim0<DecField_, ";"> =  => ActionFn(593);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action593::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant35(__nt), __end));
        (0, 54)
    }
    pub(crate) fn __reduce112<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim0<DecField_, ";"> = (<DecField_> ";")+, DecField => ActionFn(594);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant31(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action594::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant35(__nt), __end));
        (2, 54)
    }
    pub(crate) fn __reduce113<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim0<DecField_, ";"> = (<DecField_> ";")+ => ActionFn(595);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action595::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant35(__nt), __end));
        (1, 54)
    }
    pub(crate) fn __reduce114<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim0<Dec_, ";"> = Dec => ActionFn(602);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action602::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 55)
    }
    pub(crate) fn __reduce115<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim0<Dec_, ";"> =  => ActionFn(603);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action603::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (0, 55)
    }
    pub(crate) fn __reduce116<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim0<Dec_, ";"> = (<Dec_> ";")+, Dec => ActionFn(604);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant30(__symbols);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action604::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (2, 55)
    }
    pub(crate) fn __reduce117<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim0<Dec_, ";"> = (<Dec_> ";")+ => ActionFn(605);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action605::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 55)
    }
    pub(crate) fn __reduce118<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim0<ExpField_, ";"> = ExpField => ActionFn(666);
        let __sym0 = __pop_Variant41(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action666::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant37(__nt), __end));
        (1, 56)
    }
    pub(crate) fn __reduce119<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim0<ExpField_, ";"> =  => ActionFn(667);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action667::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant37(__nt), __end));
        (0, 56)
    }
    pub(crate) fn __reduce120<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim0<ExpField_, ";"> = (<ExpField_> ";")+, ExpField => ActionFn(668);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant41(__symbols);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action668::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant37(__nt), __end));
        (2, 56)
    }
    pub(crate) fn __reduce121<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim0<ExpField_, ";"> = (<ExpField_> ";")+ => ActionFn(669);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action669::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant37(__nt), __end));
        (1, 56)
    }
    pub(crate) fn __reduce122<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim0<ExpNonVar_<Ob>, ","> = ExpNonVar<Ob> => ActionFn(686);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action686::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant38(__nt), __end));
        (1, 57)
    }
    pub(crate) fn __reduce123<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim0<ExpNonVar_<Ob>, ","> =  => ActionFn(687);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action687::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant38(__nt), __end));
        (0, 57)
    }
    pub(crate) fn __reduce124<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim0<ExpNonVar_<Ob>, ","> = (<ExpNonVar_<Ob>> ",")+, ExpNonVar<Ob> => ActionFn(688);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action688::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant38(__nt), __end));
        (2, 57)
    }
    pub(crate) fn __reduce125<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim0<ExpNonVar_<Ob>, ","> = (<ExpNonVar_<Ob>> ",")+ => ActionFn(689);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action689::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant38(__nt), __end));
        (1, 57)
    }
    pub(crate) fn __reduce126<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim0<Node<Case>, ";"> = Case => ActionFn(721);
        let __sym0 = __pop_Variant28(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action721::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant39(__nt), __end));
        (1, 58)
    }
    pub(crate) fn __reduce127<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim0<Node<Case>, ";"> =  => ActionFn(722);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action722::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant39(__nt), __end));
        (0, 58)
    }
    pub(crate) fn __reduce128<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim0<Node<Case>, ";"> = (<Node<Case>> ";")+, Case => ActionFn(723);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant28(__symbols);
        let __sym0 = __pop_Variant15(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action723::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant39(__nt), __end));
        (2, 58)
    }
    pub(crate) fn __reduce129<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim0<Node<Case>, ";"> = (<Node<Case>> ";")+ => ActionFn(724);
        let __sym0 = __pop_Variant15(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action724::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant39(__nt), __end));
        (1, 58)
    }
    pub(crate) fn __reduce130<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim1<Exp_<Ob>, ","> = Exp<Ob> => ActionFn(497);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action497::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant38(__nt), __end));
        (1, 59)
    }
    pub(crate) fn __reduce131<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim1<Exp_<Ob>, ","> = (<Exp_<Ob>> ",")+, Exp<Ob> => ActionFn(717);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action717::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant38(__nt), __end));
        (2, 59)
    }
    pub(crate) fn __reduce132<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim1<Exp_<Ob>, ","> = (<Exp_<Ob>> ",")+ => ActionFn(718);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action718::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant38(__nt), __end));
        (1, 59)
    }
    pub(crate) fn __reduce133<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim1<PatBin_, ","> = PatBin => ActionFn(517);
        let __sym0 = __pop_Variant56(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action517::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant40(__nt), __end));
        (1, 60)
    }
    pub(crate) fn __reduce134<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim1<PatBin_, ","> = (<PatBin_> ",")+, PatBin => ActionFn(729);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant56(__symbols);
        let __sym0 = __pop_Variant17(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action729::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant40(__nt), __end));
        (2, 60)
    }
    pub(crate) fn __reduce135<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim1<PatBin_, ","> = (<PatBin_> ",")+ => ActionFn(730);
        let __sym0 = __pop_Variant17(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action730::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant40(__nt), __end));
        (1, 60)
    }
    pub(crate) fn __reduce136<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Exp<Bl> = ExpNonVar<Bl> => ActionFn(159);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action159::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 61)
    }
    pub(crate) fn __reduce137<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Exp<Bl> = DecVar => ActionFn(600);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action600::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 61)
    }
    pub(crate) fn __reduce138<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Exp<Ob> = ExpNonVar<Ob> => ActionFn(180);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action180::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 62)
    }
    pub(crate) fn __reduce139<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Exp<Ob> = DecVar => ActionFn(601);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action601::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 62)
    }
    pub(crate) fn __reduce140<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin000<Bl> = ExpBin000<Bl>, "or", ExpBin00<Bl> => ActionFn(611);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action611::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 63)
    }
    pub(crate) fn __reduce141<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin000<Bl> = ExpBin00<Bl> => ActionFn(272);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action272::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 63)
    }
    pub(crate) fn __reduce142<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin000<Ob> = ExpBin000<Ob>, "or", ExpBin00<Ob> => ActionFn(614);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action614::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 64)
    }
    pub(crate) fn __reduce143<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin000<Ob> = ExpBin00<Ob> => ActionFn(219);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action219::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 64)
    }
    pub(crate) fn __reduce144<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin000_<Bl> = ExpBin000<Bl> => ActionFn(606);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action606::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 65)
    }
    pub(crate) fn __reduce145<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin000_<Ob> = ExpBin000<Ob> => ActionFn(608);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action608::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 66)
    }
    pub(crate) fn __reduce146<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin00<Bl> = ExpBin00<Bl>, "and", ExpBin0<Bl> => ActionFn(617);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action617::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 67)
    }
    pub(crate) fn __reduce147<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin00<Bl> = ExpBin0<Bl> => ActionFn(283);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action283::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 67)
    }
    pub(crate) fn __reduce148<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin00<Ob> = ExpBin00<Ob>, "and", ExpBin0<Ob> => ActionFn(625);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action625::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 68)
    }
    pub(crate) fn __reduce149<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin00<Ob> = ExpBin0<Ob> => ActionFn(262);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action262::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 68)
    }
    pub(crate) fn __reduce150<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin00_<Bl> = ExpBin00<Bl> => ActionFn(610);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action610::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 69)
    }
    pub(crate) fn __reduce151<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin00_<Ob> = ExpBin00<Ob> => ActionFn(613);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action613::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 70)
    }
    pub(crate) fn __reduce152<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin0<Bl> = ExpBin0<Bl>, "+", ExpBin1<Bl> => ActionFn(633);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action633::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 71)
    }
    pub(crate) fn __reduce153<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin0<Bl> = ExpBin0<Bl>, "+%", ExpBin1<Bl> => ActionFn(634);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action634::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 71)
    }
    pub(crate) fn __reduce154<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin0<Bl> = ExpBin0<Bl>, "-", ExpBin1<Bl> => ActionFn(635);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action635::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 71)
    }
    pub(crate) fn __reduce155<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin0<Bl> = ExpBin0<Bl>, ":", Type => ActionFn(621);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant63(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action621::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 71)
    }
    pub(crate) fn __reduce156<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin0<Bl> = ExpBin1<Bl> => ActionFn(281);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action281::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 71)
    }
    pub(crate) fn __reduce157<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin0<Ob> = ExpBin0<Ob>, "+", ExpBin1<Ob> => ActionFn(639);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action639::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 72)
    }
    pub(crate) fn __reduce158<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin0<Ob> = ExpBin0<Ob>, "+%", ExpBin1<Ob> => ActionFn(640);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action640::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 72)
    }
    pub(crate) fn __reduce159<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin0<Ob> = ExpBin0<Ob>, "-", ExpBin1<Ob> => ActionFn(641);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action641::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 72)
    }
    pub(crate) fn __reduce160<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin0<Ob> = ExpBin0<Ob>, ":", Type => ActionFn(629);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant63(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action629::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 72)
    }
    pub(crate) fn __reduce161<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin0<Ob> = ExpBin1<Ob> => ActionFn(260);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action260::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 72)
    }
    pub(crate) fn __reduce162<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin0_<Bl> = ExpBin0<Bl> => ActionFn(616);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action616::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 73)
    }
    pub(crate) fn __reduce163<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin0_<Ob> = ExpBin0<Ob> => ActionFn(624);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action624::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 74)
    }
    pub(crate) fn __reduce164<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin1<Bl> = ExpBin2<Bl>, "*", ExpBin1<Bl> => ActionFn(645);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action645::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 75)
    }
    pub(crate) fn __reduce165<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin1<Bl> = ExpBin2<Bl>, "/", ExpBin1<Bl> => ActionFn(646);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action646::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 75)
    }
    pub(crate) fn __reduce166<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin1<Bl> = ExpBin2<Bl> => ActionFn(298);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action298::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 75)
    }
    pub(crate) fn __reduce167<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin1<Ob> = ExpBin2<Ob>, "*", ExpBin1<Ob> => ActionFn(649);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action649::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 76)
    }
    pub(crate) fn __reduce168<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin1<Ob> = ExpBin2<Ob>, "/", ExpBin1<Ob> => ActionFn(650);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action650::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 76)
    }
    pub(crate) fn __reduce169<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin1<Ob> = ExpBin2<Ob> => ActionFn(269);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action269::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 76)
    }
    pub(crate) fn __reduce170<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin1_<Bl> = ExpBin1<Bl> => ActionFn(632);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action632::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 77)
    }
    pub(crate) fn __reduce171<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin1_<Ob> = ExpBin1<Ob> => ActionFn(638);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action638::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 78)
    }
    pub(crate) fn __reduce172<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin2<Bl> = ExpBin3<Bl>, "|", ExpBin2<Bl> => ActionFn(653);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action653::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 79)
    }
    pub(crate) fn __reduce173<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin2<Bl> = ExpBin3<Bl> => ActionFn(302);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action302::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 79)
    }
    pub(crate) fn __reduce174<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin2<Ob> = ExpBin3<Ob>, "|", ExpBin2<Ob> => ActionFn(656);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action656::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 80)
    }
    pub(crate) fn __reduce175<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin2<Ob> = ExpBin3<Ob> => ActionFn(288);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action288::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 80)
    }
    pub(crate) fn __reduce176<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin2_<Bl> = ExpBin2<Bl> => ActionFn(644);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action644::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 81)
    }
    pub(crate) fn __reduce177<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin2_<Ob> = ExpBin2<Ob> => ActionFn(648);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action648::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 82)
    }
    pub(crate) fn __reduce178<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin3<Bl> = ExpUn<Bl>, "&", ExpBin3<Bl> => ActionFn(704);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action704::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 83)
    }
    pub(crate) fn __reduce179<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin3<Bl> = ExpUn<Bl> => ActionFn(324);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action324::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 83)
    }
    pub(crate) fn __reduce180<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin3<Ob> = ExpUn<Ob>, "&", ExpBin3<Ob> => ActionFn(708);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action708::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 84)
    }
    pub(crate) fn __reduce181<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin3<Ob> = ExpUn<Ob> => ActionFn(292);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action292::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 84)
    }
    pub(crate) fn __reduce182<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin3_<Bl> = ExpBin3<Bl> => ActionFn(652);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action652::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 85)
    }
    pub(crate) fn __reduce183<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin3_<Ob> = ExpBin3<Ob> => ActionFn(655);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action655::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 86)
    }
    pub(crate) fn __reduce184<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin<Bl> = ExpBin<Bl>, "==", ExpBin0<Bl> => ActionFn(659);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action659::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 87)
    }
    pub(crate) fn __reduce185<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin<Bl> = ExpBin<Bl>, "!=", ExpBin0<Bl> => ActionFn(660);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action660::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 87)
    }
    pub(crate) fn __reduce186<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin<Bl> = ExpBin000<Bl> => ActionFn(254);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action254::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 87)
    }
    pub(crate) fn __reduce187<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin<Ob> = ExpBin<Ob>, "==", ExpBin0<Ob> => ActionFn(663);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action663::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 88)
    }
    pub(crate) fn __reduce188<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin<Ob> = ExpBin<Ob>, "!=", ExpBin0<Ob> => ActionFn(664);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action664::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 88)
    }
    pub(crate) fn __reduce189<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin<Ob> = ExpBin000<Ob> => ActionFn(208);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action208::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 88)
    }
    pub(crate) fn __reduce190<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin_<Bl> = ExpBin<Bl> => ActionFn(658);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action658::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 89)
    }
    pub(crate) fn __reduce191<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin_<Ob> = ExpBin<Ob> => ActionFn(662);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action662::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 90)
    }
    pub(crate) fn __reduce192<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpField = VarOpt, Id, ":", Type, "=", Exp<Ob> => ActionFn(544);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant27(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant63(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant43(__symbols);
        let __sym0 = __pop_Variant65(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action544::<>(lookup, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant41(__nt), __end));
        (6, 91)
    }
    pub(crate) fn __reduce193<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpField = VarOpt, Id, "=", Exp<Ob> => ActionFn(545);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant27(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant43(__symbols);
        let __sym0 = __pop_Variant65(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action545::<>(lookup, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant41(__nt), __end));
        (4, 91)
    }
    pub(crate) fn __reduce194<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpField_ = ExpField => ActionFn(477);
        let __sym0 = __pop_Variant41(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action477::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (1, 92)
    }
    pub(crate) fn __reduce195<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpField_? = ExpField => ActionFn(479);
        let __sym0 = __pop_Variant41(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action479::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant42(__nt), __end));
        (1, 93)
    }
    pub(crate) fn __reduce196<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpField_? =  => ActionFn(188);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action188::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant42(__nt), __end));
        (0, 93)
    }
    pub(crate) fn __reduce197<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNest = Block => ActionFn(59);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action59::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 94)
    }
    pub(crate) fn __reduce198<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNest = Exp<Bl> => ActionFn(60);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action60::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 94)
    }
    pub(crate) fn __reduce199<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNest_ = ExpNest => ActionFn(670);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action670::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 95)
    }
    pub(crate) fn __reduce200<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Bl> = ExpBin<Bl> => ActionFn(233);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action233::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 96)
    }
    pub(crate) fn __reduce201<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Bl> = ExpBin<Bl>, ":=", Exp<Ob> => ActionFn(661);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action661::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 96)
    }
    pub(crate) fn __reduce202<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Bl> = "if", ExpNullary<Ob>, ExpNest, "else", ExpNest => ActionFn(672);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant27(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action672::<>(lookup, input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (5, 96)
    }
    pub(crate) fn __reduce203<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Bl> = "if", ExpNullary<Ob>, ExpNest, "\\no_else" => ActionFn(673);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action673::<>(lookup, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (4, 96)
    }
    pub(crate) fn __reduce204<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Bl> = "return", Exp<Bl> => ActionFn(715);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action715::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 96)
    }
    pub(crate) fn __reduce205<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Bl> = "return" => ActionFn(716);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action716::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 96)
    }
    pub(crate) fn __reduce206<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Bl> = "switch", ExpNullary<Ob>, "{", Cases, "}" => ActionFn(531);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant29(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action531::<>(lookup, input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (5, 96)
    }
    pub(crate) fn __reduce207<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Bl> = "while", ExpNullary<Ob>, ExpNest => ActionFn(674);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action674::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 96)
    }
    pub(crate) fn __reduce208<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Bl> = "for", "(", Pat, "in", Exp<Ob>, ")", ExpNest => ActionFn(743);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant27(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant27(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant56(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym6.2.clone();
        let __nt = super::__action743::<>(lookup, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (7, 96)
    }
    pub(crate) fn __reduce209<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Bl> = "ignore", ExpNest => ActionFn(676);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action676::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 96)
    }
    pub(crate) fn __reduce210<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Bl> = "do", Block => ActionFn(588);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action588::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 96)
    }
    pub(crate) fn __reduce211<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Bl> = "do", "?", Block => ActionFn(589);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action589::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 96)
    }
    pub(crate) fn __reduce212<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Bl> = "assert", ExpNest => ActionFn(677);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action677::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 96)
    }
    pub(crate) fn __reduce213<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Bl> = "debug", ExpNest => ActionFn(678);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action678::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 96)
    }
    pub(crate) fn __reduce214<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Ob> = ExpBin<Ob> => ActionFn(136);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action136::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 97)
    }
    pub(crate) fn __reduce215<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Ob> = ExpBin<Ob>, ":=", Exp<Ob> => ActionFn(665);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action665::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 97)
    }
    pub(crate) fn __reduce216<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Ob> = "if", ExpNullary<Ob>, ExpNest, "else", ExpNest => ActionFn(679);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant27(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action679::<>(lookup, input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (5, 97)
    }
    pub(crate) fn __reduce217<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Ob> = "if", ExpNullary<Ob>, ExpNest, "\\no_else" => ActionFn(680);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action680::<>(lookup, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (4, 97)
    }
    pub(crate) fn __reduce218<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Ob> = "return", Exp<Ob> => ActionFn(719);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action719::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 97)
    }
    pub(crate) fn __reduce219<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Ob> = "return" => ActionFn(720);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action720::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 97)
    }
    pub(crate) fn __reduce220<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Ob> = "switch", ExpNullary<Ob>, "{", Cases, "}" => ActionFn(535);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant29(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action535::<>(lookup, input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (5, 97)
    }
    pub(crate) fn __reduce221<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Ob> = "while", ExpNullary<Ob>, ExpNest => ActionFn(681);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action681::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 97)
    }
    pub(crate) fn __reduce222<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Ob> = "for", "(", Pat, "in", Exp<Ob>, ")", ExpNest => ActionFn(744);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant27(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant27(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant56(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym6.2.clone();
        let __nt = super::__action744::<>(lookup, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (7, 97)
    }
    pub(crate) fn __reduce223<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Ob> = "ignore", ExpNest => ActionFn(683);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action683::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 97)
    }
    pub(crate) fn __reduce224<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Ob> = "do", Block => ActionFn(590);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action590::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 97)
    }
    pub(crate) fn __reduce225<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Ob> = "do", "?", Block => ActionFn(591);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action591::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 97)
    }
    pub(crate) fn __reduce226<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Ob> = "assert", ExpNest => ActionFn(684);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action684::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 97)
    }
    pub(crate) fn __reduce227<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Ob> = "debug", ExpNest => ActionFn(685);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action685::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 97)
    }
    pub(crate) fn __reduce228<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonVar<Bl> = ExpNonDec<Bl> => ActionFn(185);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action185::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 98)
    }
    pub(crate) fn __reduce229<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonVar<Bl> = DecNonVar => ActionFn(597);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action597::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 98)
    }
    pub(crate) fn __reduce230<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonVar<Ob> = ExpNonDec<Ob> => ActionFn(246);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action246::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 99)
    }
    pub(crate) fn __reduce231<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonVar<Ob> = DecNonVar => ActionFn(598);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action598::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 99)
    }
    pub(crate) fn __reduce232<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonVar_<Ob> = ExpNonVar<Ob> => ActionFn(484);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action484::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 100)
    }
    pub(crate) fn __reduce233<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonVar_<Ob>? = ExpNonVar<Ob> => ActionFn(486);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action486::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (1, 101)
    }
    pub(crate) fn __reduce234<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonVar_<Ob>? =  => ActionFn(338);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action338::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (0, 101)
    }
    pub(crate) fn __reduce235<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNullary<Bl> = Bl => ActionFn(357);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action357::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 102)
    }
    pub(crate) fn __reduce236<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNullary<Bl> = ExpPlain => ActionFn(358);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action358::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 102)
    }
    pub(crate) fn __reduce237<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNullary<Bl> = Id => ActionFn(359);
        let __sym0 = __pop_Variant43(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action359::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 102)
    }
    pub(crate) fn __reduce238<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNullary<Bl> = "prim", StringLiteral => ActionFn(360);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant62(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action360::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 102)
    }
    pub(crate) fn __reduce239<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNullary<Ob> = Ob => ActionFn(223);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action223::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 103)
    }
    pub(crate) fn __reduce240<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNullary<Ob> = ExpPlain => ActionFn(224);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action224::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 103)
    }
    pub(crate) fn __reduce241<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNullary<Ob> = Id => ActionFn(225);
        let __sym0 = __pop_Variant43(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action225::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 103)
    }
    pub(crate) fn __reduce242<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNullary<Ob> = "prim", StringLiteral => ActionFn(226);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant62(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action226::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 103)
    }
    pub(crate) fn __reduce243<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNullary_<Bl> = ExpNullary<Bl> => ActionFn(522);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action522::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 104)
    }
    pub(crate) fn __reduce244<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNullary_<Ob> = ExpNullary<Ob> => ActionFn(527);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action527::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 105)
    }
    pub(crate) fn __reduce245<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpObj = "{", Delim0<ExpField_, ";">, "}" => ActionFn(63);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant37(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action63::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 106)
    }
    pub(crate) fn __reduce246<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpPlain = Literal => ActionFn(54);
        let __sym0 = __pop_Variant44(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action54::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 107)
    }
    pub(crate) fn __reduce247<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpPlain = "(", Delim1<Exp_<Ob>, ",">, ")" => ActionFn(55);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant38(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action55::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 107)
    }
    pub(crate) fn __reduce248<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpPlain_ = ExpPlain => ActionFn(690);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action690::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 108)
    }
    pub(crate) fn __reduce249<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpPost<Bl> = ExpNullary<Bl> => ActionFn(348);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action348::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 109)
    }
    pub(crate) fn __reduce250<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpPost<Bl> = "[", VarOpt, Delim0<ExpNonVar_<Ob>, ",">, "]" => ActionFn(349);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant38(__symbols);
        let __sym1 = __pop_Variant65(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action349::<>(lookup, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (4, 109)
    }
    pub(crate) fn __reduce251<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpPost<Bl> = ExpPost<Bl>, "[", Exp<Ob>, "]" => ActionFn(692);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action692::<>(lookup, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (4, 109)
    }
    pub(crate) fn __reduce252<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpPost<Bl> = ExpPost<Bl>, ".", NatIndex => ActionFn(693);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant25(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action693::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 109)
    }
    pub(crate) fn __reduce253<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpPost<Bl> = ExpPost<Bl>, ".", Id => ActionFn(694);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant43(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action694::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 109)
    }
    pub(crate) fn __reduce254<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpPost<Bl> = ExpPost<Bl>, ExpNullary<Ob> => ActionFn(695);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action695::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 109)
    }
    pub(crate) fn __reduce255<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpPost<Bl> = ExpPost<Bl>, "!" => ActionFn(696);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action696::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 109)
    }
    pub(crate) fn __reduce256<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpPost<Ob> = ExpNullary<Ob> => ActionFn(315);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action315::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 110)
    }
    pub(crate) fn __reduce257<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpPost<Ob> = "[", VarOpt, Delim0<ExpNonVar_<Ob>, ",">, "]" => ActionFn(316);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant38(__symbols);
        let __sym1 = __pop_Variant65(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action316::<>(lookup, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (4, 110)
    }
    pub(crate) fn __reduce258<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpPost<Ob> = ExpPost<Ob>, "[", Exp<Ob>, "]" => ActionFn(698);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action698::<>(lookup, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (4, 110)
    }
    pub(crate) fn __reduce259<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpPost<Ob> = ExpPost<Ob>, ".", NatIndex => ActionFn(699);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant25(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action699::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 110)
    }
    pub(crate) fn __reduce260<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpPost<Ob> = ExpPost<Ob>, ".", Id => ActionFn(700);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant43(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action700::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 110)
    }
    pub(crate) fn __reduce261<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpPost<Ob> = ExpPost<Ob>, ExpNullary<Ob> => ActionFn(701);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action701::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 110)
    }
    pub(crate) fn __reduce262<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpPost<Ob> = ExpPost<Ob>, "!" => ActionFn(702);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action702::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 110)
    }
    pub(crate) fn __reduce263<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpPost_<Bl> = ExpPost<Bl> => ActionFn(691);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action691::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 111)
    }
    pub(crate) fn __reduce264<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpPost_<Ob> = ExpPost<Ob> => ActionFn(697);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action697::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 112)
    }
    pub(crate) fn __reduce265<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpUn<Bl> = ExpPost<Bl> => ActionFn(327);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action327::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 113)
    }
    pub(crate) fn __reduce266<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpUn<Bl> = "#", Id, ExpNullary<Bl> => ActionFn(548);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant43(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action548::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 113)
    }
    pub(crate) fn __reduce267<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpUn<Bl> = "#", Id => ActionFn(549);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant43(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action549::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 113)
    }
    pub(crate) fn __reduce268<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpUn<Bl> = "?", ExpUn<Ob> => ActionFn(709);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action709::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 113)
    }
    pub(crate) fn __reduce269<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpUn<Bl> = UnOp, ExpUn<Bl> => ActionFn(705);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant64(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action705::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 113)
    }
    pub(crate) fn __reduce270<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpUn<Bl> = "not", ExpUn<Bl> => ActionFn(706);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action706::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 113)
    }
    pub(crate) fn __reduce271<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpUn<Ob> = ExpPost<Ob> => ActionFn(305);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action305::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 114)
    }
    pub(crate) fn __reduce272<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpUn<Ob> = "#", Id, ExpNullary<Ob> => ActionFn(550);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant43(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action550::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 114)
    }
    pub(crate) fn __reduce273<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpUn<Ob> = "#", Id => ActionFn(551);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant43(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action551::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 114)
    }
    pub(crate) fn __reduce274<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpUn<Ob> = "?", ExpUn<Ob> => ActionFn(710);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action710::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 114)
    }
    pub(crate) fn __reduce275<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpUn<Ob> = UnOp, ExpUn<Ob> => ActionFn(711);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant64(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action711::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 114)
    }
    pub(crate) fn __reduce276<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpUn<Ob> = "not", ExpUn<Ob> => ActionFn(712);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action712::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 114)
    }
    pub(crate) fn __reduce277<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpUn_<Bl> = ExpUn<Bl> => ActionFn(703);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action703::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 115)
    }
    pub(crate) fn __reduce278<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpUn_<Ob> = ExpUn<Ob> => ActionFn(707);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action707::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 116)
    }
    pub(crate) fn __reduce279<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Exp_<Bl> = Exp<Bl> => ActionFn(713);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action713::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 117)
    }
    pub(crate) fn __reduce280<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Exp_<Bl>? = Exp<Bl> => ActionFn(714);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action714::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (1, 118)
    }
    pub(crate) fn __reduce281<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Exp_<Bl>? =  => ActionFn(249);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action249::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (0, 118)
    }
    pub(crate) fn __reduce282<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Exp_<Ob> = Exp<Ob> => ActionFn(491);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action491::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 119)
    }
    pub(crate) fn __reduce283<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Exp_<Ob>? = Exp<Ob> => ActionFn(506);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action506::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (1, 120)
    }
    pub(crate) fn __reduce284<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Exp_<Ob>? =  => ActionFn(203);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action203::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (0, 120)
    }
    pub(crate) fn __reduce285<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Id = r#"[a-zA-Z_][a-zA-Z_0-9]*"# => ActionFn(8);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action8::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant43(__nt), __end));
        (1, 121)
    }
    pub(crate) fn __reduce286<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Id_ = Id => ActionFn(542);
        let __sym0 = __pop_Variant43(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action542::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (1, 122)
    }
    pub(crate) fn __reduce287<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Id_? = Id => ActionFn(552);
        let __sym0 = __pop_Variant43(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action552::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 123)
    }
    pub(crate) fn __reduce288<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Id_? =  => ActionFn(126);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action126::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (0, 123)
    }
    pub(crate) fn __reduce289<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Literal = "null" => ActionFn(10);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action10::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant44(__nt), __end));
        (1, 124)
    }
    pub(crate) fn __reduce290<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Literal = "true" => ActionFn(11);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action11::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant44(__nt), __end));
        (1, 124)
    }
    pub(crate) fn __reduce291<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Literal = "false" => ActionFn(12);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action12::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant44(__nt), __end));
        (1, 124)
    }
    pub(crate) fn __reduce292<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Literal = "(", ")" => ActionFn(13);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action13::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant44(__nt), __end));
        (2, 124)
    }
    pub(crate) fn __reduce293<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Literal = r#"[+-]?[0-9]([0-9_]*[0-9])?[Ee][0-9]([0-9_]*[0-9])?"# => ActionFn(14);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action14::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant44(__nt), __end));
        (1, 124)
    }
    pub(crate) fn __reduce294<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Literal = r#"[+-]?[0-9]([0-9_]*[0-9])?\\.([0-9]([0-9_]*[0-9])?)?([Ee][0-9]([0-9_]*[0-9])?)?"# => ActionFn(15);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action15::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant44(__nt), __end));
        (1, 124)
    }
    pub(crate) fn __reduce295<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Literal = r#"0x[0-9a-fA-F]+"# => ActionFn(16);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action16::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant44(__nt), __end));
        (1, 124)
    }
    pub(crate) fn __reduce296<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Literal = r#"[0-9]([0-9_]*[0-9])?"# => ActionFn(17);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action17::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant44(__nt), __end));
        (1, 124)
    }
    pub(crate) fn __reduce297<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Literal = r#"'(?:[^\\\\'\\s]|\\\\.)*'|' '"# => ActionFn(18);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action18::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant44(__nt), __end));
        (1, 124)
    }
    pub(crate) fn __reduce298<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Literal = StringLiteral => ActionFn(19);
        let __sym0 = __pop_Variant62(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action19::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant44(__nt), __end));
        (1, 124)
    }
    pub(crate) fn __reduce299<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // NatIndex = r#"[0-9]([0-9_]*[0-9])?"# => ActionFn(7);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action7::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (1, 125)
    }
    pub(crate) fn __reduce300<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<Block> = Block => ActionFn(407);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action407::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 126)
    }
    pub(crate) fn __reduce301<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<Case> = Case => ActionFn(408);
        let __sym0 = __pop_Variant28(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action408::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (1, 127)
    }
    pub(crate) fn __reduce302<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<Case>? = Case => ActionFn(510);
        let __sym0 = __pop_Variant28(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action510::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant46(__nt), __end));
        (1, 128)
    }
    pub(crate) fn __reduce303<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<Case>? =  => ActionFn(193);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action193::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant46(__nt), __end));
        (0, 128)
    }
    pub(crate) fn __reduce304<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<Dec> = Dec => ActionFn(409);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action409::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant47(__nt), __end));
        (1, 129)
    }
    pub(crate) fn __reduce305<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<DecField> = DecField => ActionFn(410);
        let __sym0 = __pop_Variant31(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action410::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant48(__nt), __end));
        (1, 130)
    }
    pub(crate) fn __reduce306<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<DecNonVar> = DecNonVar => ActionFn(411);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action411::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant47(__nt), __end));
        (1, 131)
    }
    pub(crate) fn __reduce307<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<DecVar> = DecVar => ActionFn(412);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action412::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant47(__nt), __end));
        (1, 132)
    }
    pub(crate) fn __reduce308<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<Exp<Bl>> = Exp<Bl> => ActionFn(413);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action413::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 133)
    }
    pub(crate) fn __reduce309<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<Exp<Ob>> = Exp<Ob> => ActionFn(414);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action414::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 134)
    }
    pub(crate) fn __reduce310<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpBin000<Bl>> = ExpBin000<Bl> => ActionFn(415);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action415::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 135)
    }
    pub(crate) fn __reduce311<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpBin000<Ob>> = ExpBin000<Ob> => ActionFn(416);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action416::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 136)
    }
    pub(crate) fn __reduce312<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpBin00<Bl>> = ExpBin00<Bl> => ActionFn(417);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action417::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 137)
    }
    pub(crate) fn __reduce313<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpBin00<Ob>> = ExpBin00<Ob> => ActionFn(418);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action418::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 138)
    }
    pub(crate) fn __reduce314<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpBin0<Bl>> = ExpBin0<Bl> => ActionFn(419);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action419::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 139)
    }
    pub(crate) fn __reduce315<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpBin0<Ob>> = ExpBin0<Ob> => ActionFn(420);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action420::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 140)
    }
    pub(crate) fn __reduce316<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpBin1<Bl>> = ExpBin1<Bl> => ActionFn(421);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action421::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 141)
    }
    pub(crate) fn __reduce317<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpBin1<Ob>> = ExpBin1<Ob> => ActionFn(422);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action422::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 142)
    }
    pub(crate) fn __reduce318<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpBin2<Bl>> = ExpBin2<Bl> => ActionFn(423);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action423::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 143)
    }
    pub(crate) fn __reduce319<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpBin2<Ob>> = ExpBin2<Ob> => ActionFn(424);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action424::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 144)
    }
    pub(crate) fn __reduce320<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpBin3<Bl>> = ExpBin3<Bl> => ActionFn(425);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action425::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 145)
    }
    pub(crate) fn __reduce321<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpBin3<Ob>> = ExpBin3<Ob> => ActionFn(426);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action426::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 146)
    }
    pub(crate) fn __reduce322<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpBin<Bl>> = ExpBin<Bl> => ActionFn(427);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action427::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 147)
    }
    pub(crate) fn __reduce323<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpBin<Ob>> = ExpBin<Ob> => ActionFn(428);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action428::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 148)
    }
    pub(crate) fn __reduce324<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpField> = ExpField => ActionFn(429);
        let __sym0 = __pop_Variant41(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action429::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (1, 149)
    }
    pub(crate) fn __reduce325<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpNest> = ExpNest => ActionFn(430);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action430::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 150)
    }
    pub(crate) fn __reduce326<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpNonVar<Ob>> = ExpNonVar<Ob> => ActionFn(431);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action431::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 151)
    }
    pub(crate) fn __reduce327<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpNullary<Bl>> = ExpNullary<Bl> => ActionFn(432);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action432::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 152)
    }
    pub(crate) fn __reduce328<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpNullary<Ob>> = ExpNullary<Ob> => ActionFn(433);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action433::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 153)
    }
    pub(crate) fn __reduce329<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpPlain> = ExpPlain => ActionFn(434);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action434::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 154)
    }
    pub(crate) fn __reduce330<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpPost<Bl>> = ExpPost<Bl> => ActionFn(435);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action435::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 155)
    }
    pub(crate) fn __reduce331<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpPost<Ob>> = ExpPost<Ob> => ActionFn(436);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action436::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 156)
    }
    pub(crate) fn __reduce332<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpUn<Bl>> = ExpUn<Bl> => ActionFn(437);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action437::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 157)
    }
    pub(crate) fn __reduce333<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpUn<Ob>> = ExpUn<Ob> => ActionFn(438);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action438::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 158)
    }
    pub(crate) fn __reduce334<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<Id> = Id => ActionFn(439);
        let __sym0 = __pop_Variant43(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action439::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant49(__nt), __end));
        (1, 159)
    }
    pub(crate) fn __reduce335<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<Pat> = Pat => ActionFn(440);
        let __sym0 = __pop_Variant56(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action440::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant50(__nt), __end));
        (1, 160)
    }
    pub(crate) fn __reduce336<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<PatBin> = PatBin => ActionFn(441);
        let __sym0 = __pop_Variant56(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action441::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant50(__nt), __end));
        (1, 161)
    }
    pub(crate) fn __reduce337<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<PatNullary> = PatNullary => ActionFn(442);
        let __sym0 = __pop_Variant56(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action442::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant50(__nt), __end));
        (1, 162)
    }
    pub(crate) fn __reduce338<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<PatPlain> = PatPlain => ActionFn(443);
        let __sym0 = __pop_Variant56(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action443::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant50(__nt), __end));
        (1, 163)
    }
    pub(crate) fn __reduce339<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<SortPat> = SortPat => ActionFn(444);
        let __sym0 = __pop_Variant59(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action444::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant51(__nt), __end));
        (1, 164)
    }
    pub(crate) fn __reduce340<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<Stab> = Stab => ActionFn(445);
        let __sym0 = __pop_Variant61(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action445::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant52(__nt), __end));
        (1, 165)
    }
    pub(crate) fn __reduce341<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<Type> = Type => ActionFn(446);
        let __sym0 = __pop_Variant63(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action446::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant53(__nt), __end));
        (1, 166)
    }
    pub(crate) fn __reduce342<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<Vis> = Vis => ActionFn(447);
        let __sym0 = __pop_Variant66(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action447::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant54(__nt), __end));
        (1, 167)
    }
    pub(crate) fn __reduce343<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Ob = ExpObj => ActionFn(6);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action6::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 168)
    }
    pub(crate) fn __reduce344<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ObjBody = "{", Delim0<DecField_, ";">, "}" => ActionFn(103);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant35(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action103::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant55(__nt), __end));
        (3, 169)
    }
    pub(crate) fn __reduce345<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Pat = PatBin => ActionFn(35);
        let __sym0 = __pop_Variant56(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action35::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant56(__nt), __end));
        (1, 170)
    }
    pub(crate) fn __reduce346<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PatBin = PatBin, ":", Type => ActionFn(518);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant63(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant56(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action518::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant56(__nt), __end));
        (3, 171)
    }
    pub(crate) fn __reduce347<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PatBin = PatUn => ActionFn(30);
        let __sym0 = __pop_Variant56(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action30::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant56(__nt), __end));
        (1, 171)
    }
    pub(crate) fn __reduce348<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PatBin_ = PatBin => ActionFn(515);
        let __sym0 = __pop_Variant56(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action515::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (1, 172)
    }
    pub(crate) fn __reduce349<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PatBin_? = PatBin => ActionFn(519);
        let __sym0 = __pop_Variant56(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action519::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 173)
    }
    pub(crate) fn __reduce350<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PatBin_? =  => ActionFn(175);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action175::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (0, 173)
    }
    pub(crate) fn __reduce351<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PatNullary = PatPlain => ActionFn(27);
        let __sym0 = __pop_Variant56(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action27::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant56(__nt), __end));
        (1, 174)
    }
    pub(crate) fn __reduce352<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PatNullary_ = PatNullary => ActionFn(726);
        let __sym0 = __pop_Variant56(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action726::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (1, 175)
    }
    pub(crate) fn __reduce353<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PatPlain = "_" => ActionFn(22);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action22::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant56(__nt), __end));
        (1, 176)
    }
    pub(crate) fn __reduce354<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PatPlain = Id => ActionFn(553);
        let __sym0 = __pop_Variant43(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action553::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant56(__nt), __end));
        (1, 176)
    }
    pub(crate) fn __reduce355<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PatPlain = Literal => ActionFn(24);
        let __sym0 = __pop_Variant44(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action24::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant56(__nt), __end));
        (1, 176)
    }
    pub(crate) fn __reduce356<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PatPlain = "(", Delim1<PatBin_, ",">, ")" => ActionFn(25);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant40(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action25::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant56(__nt), __end));
        (3, 176)
    }
    pub(crate) fn __reduce357<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PatPlain_ = PatPlain => ActionFn(727);
        let __sym0 = __pop_Variant56(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action727::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (1, 177)
    }
    pub(crate) fn __reduce358<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PatUn = PatNullary => ActionFn(31);
        let __sym0 = __pop_Variant56(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action31::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant56(__nt), __end));
        (1, 178)
    }
    pub(crate) fn __reduce359<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PatUn = "#", Id => ActionFn(554);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant43(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action554::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant56(__nt), __end));
        (2, 178)
    }
    pub(crate) fn __reduce360<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PatUn = "#", Id, PatNullary => ActionFn(732);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant56(__symbols);
        let __sym1 = __pop_Variant43(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action732::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant56(__nt), __end));
        (3, 178)
    }
    pub(crate) fn __reduce361<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Pat_ = Pat => ActionFn(725);
        let __sym0 = __pop_Variant56(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action725::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (1, 179)
    }
    pub(crate) fn __reduce362<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PrimType = "(", ")" => ActionFn(36);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action36::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant58(__nt), __end));
        (2, 180)
    }
    pub(crate) fn __reduce363<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PrimType = "Bool" => ActionFn(37);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action37::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant58(__nt), __end));
        (1, 180)
    }
    pub(crate) fn __reduce364<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PrimType = "Nat" => ActionFn(38);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action38::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant58(__nt), __end));
        (1, 180)
    }
    pub(crate) fn __reduce365<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PrimType = "Nat8" => ActionFn(39);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action39::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant58(__nt), __end));
        (1, 180)
    }
    pub(crate) fn __reduce366<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PrimType = "Nat16" => ActionFn(40);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action40::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant58(__nt), __end));
        (1, 180)
    }
    pub(crate) fn __reduce367<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PrimType = "Nat32" => ActionFn(41);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action41::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant58(__nt), __end));
        (1, 180)
    }
    pub(crate) fn __reduce368<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PrimType = "Nat64" => ActionFn(42);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action42::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant58(__nt), __end));
        (1, 180)
    }
    pub(crate) fn __reduce369<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PrimType = "Int" => ActionFn(43);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action43::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant58(__nt), __end));
        (1, 180)
    }
    pub(crate) fn __reduce370<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PrimType = "Int8" => ActionFn(44);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action44::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant58(__nt), __end));
        (1, 180)
    }
    pub(crate) fn __reduce371<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PrimType = "Int16" => ActionFn(45);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action45::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant58(__nt), __end));
        (1, 180)
    }
    pub(crate) fn __reduce372<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PrimType = "Int32" => ActionFn(46);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action46::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant58(__nt), __end));
        (1, 180)
    }
    pub(crate) fn __reduce373<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PrimType = "Int64" => ActionFn(47);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action47::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant58(__nt), __end));
        (1, 180)
    }
    pub(crate) fn __reduce374<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PrimType = "Principal" => ActionFn(48);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action48::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant58(__nt), __end));
        (1, 180)
    }
    pub(crate) fn __reduce375<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PrimType = "Text" => ActionFn(49);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action49::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant58(__nt), __end));
        (1, 180)
    }
    pub(crate) fn __reduce376<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Prog = Decs => ActionFn(52);
        let __sym0 = __pop_Variant34(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action52::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant34(__nt), __end));
        (1, 181)
    }
    pub(crate) fn __reduce377<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // SortPat =  => ActionFn(80);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action80::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant59(__nt), __end));
        (0, 182)
    }
    pub(crate) fn __reduce378<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // SortPat_ = SortPat => ActionFn(728);
        let __sym0 = __pop_Variant59(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action728::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant60(__nt), __end));
        (1, 183)
    }
    pub(crate) fn __reduce379<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Stab = "stable" => ActionFn(108);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action108::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant61(__nt), __end));
        (1, 184)
    }
    pub(crate) fn __reduce380<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Stab = "flexible" => ActionFn(109);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action109::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant61(__nt), __end));
        (1, 184)
    }
    pub(crate) fn __reduce381<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Stab_ = Stab => ActionFn(571);
        let __sym0 = __pop_Variant61(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action571::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (1, 185)
    }
    pub(crate) fn __reduce382<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // StringLiteral = r#"\"(?:[^\\\\\"\\n]|\\\\.)*\""# => ActionFn(20);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action20::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant62(__nt), __end));
        (1, 186)
    }
    pub(crate) fn __reduce383<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // TextId = Id => ActionFn(64);
        let __sym0 = __pop_Variant43(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action64::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant62(__nt), __end));
        (1, 187)
    }
    pub(crate) fn __reduce384<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Type = PrimType => ActionFn(51);
        let __sym0 = __pop_Variant58(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action51::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant63(__nt), __end));
        (1, 188)
    }
    pub(crate) fn __reduce385<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Type_ = Type => ActionFn(448);
        let __sym0 = __pop_Variant63(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action448::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 189)
    }
    pub(crate) fn __reduce386<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // UnOp = "+" => ActionFn(83);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action83::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant64(__nt), __end));
        (1, 190)
    }
    pub(crate) fn __reduce387<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // UnOp = "-" => ActionFn(84);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action84::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant64(__nt), __end));
        (1, 190)
    }
    pub(crate) fn __reduce388<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // UnOp = "^" => ActionFn(85);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action85::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant64(__nt), __end));
        (1, 190)
    }
    pub(crate) fn __reduce389<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // VarOpt = "var" => ActionFn(56);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action56::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant65(__nt), __end));
        (1, 191)
    }
    pub(crate) fn __reduce390<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // VarOpt =  => ActionFn(57);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action57::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant65(__nt), __end));
        (0, 191)
    }
    pub(crate) fn __reduce391<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Vis = "public" => ActionFn(105);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action105::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant66(__nt), __end));
        (1, 192)
    }
    pub(crate) fn __reduce392<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Vis = "private" => ActionFn(106);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action106::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant66(__nt), __end));
        (1, 192)
    }
    pub(crate) fn __reduce393<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Vis_ = Vis => ActionFn(576);
        let __sym0 = __pop_Variant66(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action576::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (1, 193)
    }
    pub(crate) fn __reduce394<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // __Literal = Literal => ActionFn(0);
        let __sym0 = __pop_Variant44(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action0::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant44(__nt), __end));
        (1, 194)
    }
    pub(crate) fn __reduce395<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // __Pat = Pat => ActionFn(1);
        let __sym0 = __pop_Variant56(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action1::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant56(__nt), __end));
        (1, 195)
    }
    pub(crate) fn __reduce397<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // __Prog = Prog => ActionFn(4);
        let __sym0 = __pop_Variant34(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action4::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant34(__nt), __end));
        (1, 197)
    }
    pub(crate) fn __reduce398<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // __Type = Type => ActionFn(3);
        let __sym0 = __pop_Variant63(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action3::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant63(__nt), __end));
        (1, 198)
    }
}
pub use self::__parse__PrimType::PrimTypeParser;

#[cfg_attr(rustfmt, rustfmt_skip)]
mod __parse__Prog {
    #![allow(non_snake_case, non_camel_case_types, unused_mut, unused_variables, unused_imports, unused_parens, clippy::all)]

    use crate::parser_utils::{dec_node_into_exp, get_one, node};
    use crate::ast::{Node, Source, Id, Id_, Pat, Pat_, Exp, Exp_, ExpField, Type, Type_, PrimType, Literal, Case, Cases, Decs, Dec, Dec_, UnOp, BinOp, RelOp, Delim, Mut, SortPat, SortPat_, Sugar, Vis, Vis_, Stab, Stab_, DecField, DecField_, DecFields};
    use line_col::LineColLookup;
    #[allow(unused_extern_crates)]
    extern crate lalrpop_util as __lalrpop_util;
    #[allow(unused_imports)]
    use self::__lalrpop_util::state_machine as __state_machine;
    extern crate core;
    extern crate alloc;
    use self::__lalrpop_util::lexer::Token;
    #[allow(dead_code)]
    pub(crate) enum __Symbol<'input>
     {
        Variant0(&'input str),
        Variant1(core::option::Option<&'input str>),
        Variant2(Type_),
        Variant3(core::option::Option<Type_>),
        Variant4((&'input str, Type_)),
        Variant5(core::option::Option<(&'input str, Type_)>),
        Variant6(DecField_),
        Variant7(alloc::vec::Vec<DecField_>),
        Variant8(Dec_),
        Variant9(alloc::vec::Vec<Dec_>),
        Variant10(Node<ExpField>),
        Variant11(alloc::vec::Vec<Node<ExpField>>),
        Variant12(Exp_),
        Variant13(alloc::vec::Vec<Exp_>),
        Variant14(Node<Case>),
        Variant15(alloc::vec::Vec<Node<Case>>),
        Variant16(Pat_),
        Variant17(alloc::vec::Vec<Pat_>),
        Variant18(core::option::Option<Exp_>),
        Variant19(Id_),
        Variant20(core::option::Option<Id_>),
        Variant21(Stab_),
        Variant22(core::option::Option<Stab_>),
        Variant23(Vis_),
        Variant24(core::option::Option<Vis_>),
        Variant25(usize),
        Variant26(BinOp),
        Variant27(Exp),
        Variant28(Case),
        Variant29(Cases),
        Variant30(Dec),
        Variant31(DecField),
        Variant32(core::option::Option<DecField_>),
        Variant33(core::option::Option<Dec_>),
        Variant34(Decs),
        Variant35(Delim<DecField_>),
        Variant36(Delim<Dec_>),
        Variant37(Delim<Node<ExpField>>),
        Variant38(Delim<Exp_>),
        Variant39(Delim<Node<Case>>),
        Variant40(Delim<Pat_>),
        Variant41(ExpField),
        Variant42(core::option::Option<Node<ExpField>>),
        Variant43(Id),
        Variant44(Literal),
        Variant45(Node<Exp>),
        Variant46(core::option::Option<Node<Case>>),
        Variant47(Node<Dec>),
        Variant48(Node<DecField>),
        Variant49(Node<Id>),
        Variant50(Node<Pat>),
        Variant51(Node<SortPat>),
        Variant52(Node<Stab>),
        Variant53(Node<Type>),
        Variant54(Node<Vis>),
        Variant55(DecFields),
        Variant56(Pat),
        Variant57(core::option::Option<Pat_>),
        Variant58(PrimType),
        Variant59(SortPat),
        Variant60(SortPat_),
        Variant61(Stab),
        Variant62(String),
        Variant63(Type),
        Variant64(UnOp),
        Variant65(Mut),
        Variant66(Vis),
    }
    const __ACTION: &[i16] = &[
        // State 0
        0, 0, 5, 0, 0, 6, 0, 0, 0, 0, 0, 149, 0, 0, 150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 151, 0, 0, 9, 0, 10, 11, 0, 152, 0, 153, -378, 12, 13, 0, 14, 15, 16, 154, 0, 17, 0, 0, 18, 0, 19, 155, 20, 21, 22, 0, 0, 156, 157, 158, 159, 160, 161, 162, 0,
        // State 1
        0, 0, 5, 0, 0, 6, 0, 0, 0, 0, 0, 149, 0, 0, 150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 151, 0, 0, 9, 0, 10, 11, 0, 152, 0, 153, -378, 12, 13, 0, 14, 15, 16, 154, 0, 17, 0, 0, 18, 0, 19, 155, 20, 21, 22, 0, -118, 156, 157, 158, 159, 160, 161, 162, 0,
        // State 2
        166, -272, 0, 0, -272, 6, -272, -272, 0, 0, 0, -272, -272, -272, -272, 0, 35, -272, -272, -272, -272, 0, 0, 0, 0, -272, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, -272, -272, 0, 0, -272, 0, 0, 0, 0, -272, 152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 154, -272, 17, 0, 0, 0, 0, 0, 155, 0, 0, 22, -272, -272, 156, 157, 158, 159, 160, 161, 162, 0,
        // State 3
        0, 0, 5, 0, 0, 6, 0, 0, 0, 0, 0, 149, 0, 0, 150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 151, 0, 0, 0, 0, 0, 0, 0, 152, 0, 0, 0, 0, 0, 0, 0, 0, 16, 154, 0, 17, 0, 0, 0, 0, 0, 155, 0, 0, 22, 0, 0, 156, 157, 158, 159, 160, 161, 162, 0,
        // State 4
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 162, 0,
        // State 5
        0, 0, 5, 0, 0, 6, 174, 0, 0, 0, 0, 149, 0, 0, 150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 151, 0, 0, 9, 0, 10, 11, 0, 152, 0, 153, -378, 12, 13, 0, 14, 15, 16, 154, 0, 17, 0, 0, 18, 0, 19, 155, 20, 21, 22, 0, 0, 156, 157, 158, 159, 160, 161, 162, 0,
        // State 6
        0, 0, 5, 0, 0, 6, 0, 0, 0, 0, 0, 149, 0, 0, 150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 151, 0, 0, 0, 0, 0, 0, 0, 152, 0, 0, 0, 0, 0, 0, 0, 0, 16, 154, 0, 17, 0, 0, 0, 0, 0, 155, 0, 0, 22, 0, 0, 156, 157, 158, 159, 160, 161, 162, 0,
        // State 7
        0, 0, -391, 0, 0, -391, 0, 0, 0, 0, 0, -391, 0, 0, -391, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -391, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -391, 0, -391, -391, 0, 0, -391, 0, -391, -391, 0, -391, 0, -391, -391, -391, -391, 0, -391, -391, -391, -391, 0, -391, 0, 0, -391, 0, -391, -391, 176, -391, -391, 0, 0, -391, -391, -391, -391, -391, -391, -391, 0,
        // State 8
        0, 0, 44, 0, 0, 6, 0, 0, 0, 0, 0, 149, 0, 0, 150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 0, 0, 151, 0, 0, 47, 0, 48, 49, 0, 152, 0, 196, -378, 50, 51, 0, 14, 15, 52, 154, 0, 53, 0, 0, 54, 0, 55, 155, 20, 56, 57, 0, 0, 156, 157, 158, 159, 160, 161, 162, 197,
        // State 9
        0, 0, 44, 0, 0, 6, 0, 0, 0, 0, 0, 149, 0, 0, 150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 0, 0, 151, 0, 0, 47, 0, 48, 49, 0, 152, 0, 196, -378, 50, 51, 0, 14, 15, 52, 154, 0, 53, 0, 0, 54, 0, 55, 155, 20, 56, 57, 0, 0, 156, 157, 158, 159, 160, 161, 162, 197,
        // State 10
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 11
        0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 154, 0, 17, 0, 0, 0, 0, 0, 155, 0, 0, 22, 0, 0, 156, 157, 158, 159, 160, 161, 162, 0,
        // State 12
        0, 0, 44, 0, 0, 6, 0, 0, 0, 0, 0, 149, 0, 0, 150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 0, 0, 151, 0, 0, 47, 0, 48, 49, 0, 152, 0, 196, -378, 50, 51, 0, 14, 15, 52, 154, 0, 53, 0, 0, 54, 0, 55, 155, 20, 56, 57, 0, 0, 156, 157, 158, 159, 160, 161, 162, 197,
        // State 13
        0, 0, 61, 0, 0, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 208, 0, 0, 0, 0, 0, 0, 152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 154, 0, 0, 0, 0, 0, 0, 0, 155, 0, 0, 0, 0, 0, 156, 157, 158, 159, 160, 161, 162, 0,
        // State 14
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65, 0, 0, 0, 0, 0, 0, 0, 0, 162, 0,
        // State 15
        0, 0, 5, 0, 0, 6, 0, 0, 0, 0, 0, 149, 0, 0, 150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 151, 0, 0, 0, 0, 0, 0, 0, 152, 0, 0, 0, 0, 0, 0, 0, 0, 16, 154, 0, 17, 0, 0, 0, 0, 0, 155, 0, 0, 22, 0, 0, 156, 157, 158, 159, 160, 161, 162, 0,
        // State 16
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 156, 0, 0, 0, 0, 0, 0, 0,
        // State 17
        0, 0, 5, 0, 0, 6, -220, 0, 0, 0, 0, 149, 0, -220, 150, 0, 0, 0, 0, 0, -220, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, -220, -220, 151, 0, 0, 9, 0, 10, 11, -220, 152, 0, 153, -378, 12, 13, 0, 14, 15, 16, 154, 0, 17, 0, 0, 18, 0, 19, 155, 20, 21, 22, 0, -220, 156, 157, 158, 159, 160, 161, 162, 0,
        // State 18
        0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 154, 0, 17, 0, 0, 0, 0, 0, 155, 0, 0, 22, 0, 0, 156, 157, 158, 159, 160, 161, 162, 0,
        // State 19
        0, 0, 61, 0, 0, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 208, 0, 0, 0, 0, 0, 0, 152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 154, 0, 0, 0, 0, 0, 0, 0, 155, 0, 0, 0, 0, 0, 156, 157, 158, 159, 160, 161, 162, 0,
        // State 20
        0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 154, 0, 17, 0, 0, 0, 0, 0, 155, 0, 0, 22, 0, 0, 156, 157, 158, 159, 160, 161, 162, 0,
        // State 21
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 176, 0, 0, 0, -120, 0, 0, 0, 0, 0, 0, -391, 0,
        // State 22
        0, 0, 5, 0, 0, 6, 0, 0, 0, 0, 0, 149, 0, 0, 150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 151, 0, 0, 0, 0, 0, 0, 0, 152, 0, 0, 0, 0, 0, 0, 0, 0, 16, 154, 0, 17, 0, 0, 0, 0, 0, 155, 0, 0, 22, 0, 0, 156, 157, 158, 159, 160, 161, 162, 0,
        // State 23
        0, 0, 5, 0, 0, 6, 0, 0, 0, 0, 0, 149, 0, 0, 150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 151, 0, 0, 0, 0, 0, 0, 0, 152, 0, 0, 0, 0, 0, 0, 0, 0, 16, 154, 0, 17, 0, 0, 0, 0, 0, 155, 0, 0, 22, 0, 0, 156, 157, 158, 159, 160, 161, 162, 0,
        // State 24
        0, 0, 5, 0, 0, 6, 0, 0, 0, 0, 0, 149, 0, 0, 150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 151, 0, 0, 0, 0, 0, 0, 0, 152, 0, 0, 0, 0, 0, 0, 0, 0, 16, 154, 0, 17, 0, 0, 0, 0, 0, 155, 0, 0, 22, 0, 0, 156, 157, 158, 159, 160, 161, 162, 0,
        // State 25
        0, 0, 5, 0, 0, 6, 0, 0, 0, 0, 0, 149, 0, 0, 150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 151, 0, 0, 0, 0, 0, 0, 0, 152, 0, 0, 0, 0, 0, 0, 0, 0, 16, 154, 0, 17, 0, 0, 0, 0, 0, 155, 0, 0, 22, 0, 0, 156, 157, 158, 159, 160, 161, 162, 0,
        // State 26
        0, 0, 5, 0, 0, 6, 0, 0, 0, 0, 0, 149, 0, 0, 150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 151, 0, 0, 0, 0, 0, 0, 0, 152, 0, 0, 0, 0, 0, 0, 0, 0, 16, 154, 0, 17, 0, 0, 0, 0, 0, 155, 0, 0, 22, 0, 0, 156, 157, 158, 159, 160, 161, 162, 0,
        // State 27
        0, 0, 0, 0, 0, 225, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 28
        0, 0, 5, 0, 0, 6, 0, 0, 0, 0, 0, 149, 0, 0, 150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 151, 0, 0, 0, 0, 0, 0, 0, 152, 0, 0, 0, 0, 0, 0, 0, 0, 16, 154, 0, 17, 0, 0, 0, 0, 0, 155, 0, 0, 22, 0, 0, 156, 157, 158, 159, 160, 161, 162, 0,
        // State 29
        0, 0, 5, 0, 0, 6, 0, 0, 0, 0, 0, 149, 0, 0, 150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 151, 0, 0, 0, 0, 0, 0, 0, 152, 0, 0, 0, 0, 0, 0, 0, 0, 16, 154, 0, 17, 0, 0, 0, 0, 0, 155, 0, 0, 22, 0, 0, 156, 157, 158, 159, 160, 161, 162, 0,
        // State 30
        0, 0, 5, 0, 0, 6, 0, 0, 0, 0, 0, 149, 0, 0, 150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 151, 0, 0, 0, 0, 0, 0, 0, 152, 0, 0, 0, 0, 0, 0, 0, 0, 16, 154, 0, 17, 0, 0, 0, 0, 0, 155, 0, 0, 22, 0, 0, 156, 157, 158, 159, 160, 161, 162, 0,
        // State 31
        0, 0, 5, 0, 0, 6, 0, 0, 0, 0, 0, 149, 0, 0, 150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 151, 0, 0, 0, 0, 0, 0, 0, 152, 0, 0, 0, 0, 0, 0, 0, 0, 16, 154, 0, 17, 0, 0, 0, 0, 0, 155, 0, 0, 22, 0, 0, 156, 157, 158, 159, 160, 161, 162, 0,
        // State 32
        0, 0, 5, 0, 0, 6, 0, 0, 0, 0, 0, 149, 0, 0, 150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 151, 0, 0, 9, 0, 10, 11, 0, 152, 0, 153, -378, 12, 13, 0, 14, 15, 16, 154, 0, 17, 0, 0, 18, 0, 19, 155, 20, 21, 22, 0, 0, 156, 157, 158, 159, 160, 161, 162, 0,
        // State 33
        0, 0, 5, 0, 0, 6, 0, 0, 0, 0, 0, 149, 0, 0, 150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 151, 0, 0, 0, 0, 0, 0, 0, 152, 0, 0, 0, 0, 0, 0, 0, 0, 16, 154, 0, 17, 0, 0, 0, 0, 0, 155, 0, 0, 22, 0, 0, 156, 157, 158, 159, 160, 161, 162, 0,
        // State 34
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 247, 162, 0,
        // State 35
        0, 0, 5, 0, 0, 6, 0, 0, 0, 0, 0, 149, 0, 0, 150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 151, 0, 0, 9, 0, 10, 11, 0, 152, 0, 153, -378, 12, 13, 0, 14, 15, 16, 154, 0, 17, 0, 0, 18, 0, 19, 155, 20, 21, 22, 0, 0, 156, 157, 158, 159, 160, 161, 162, 0,
        // State 36
        0, 0, 5, 0, 0, 6, 0, 0, 0, 0, 0, 149, 0, 0, 150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 151, 0, 0, 0, 0, 0, 0, 0, 152, 0, 0, 0, 0, 0, 0, 0, 0, 16, 154, 0, 17, 0, 0, 0, 0, 0, 155, 0, 0, 22, 0, 0, 156, 157, 158, 159, 160, 161, 162, 0,
        // State 37
        0, 0, 0, 0, 0, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 208, 0, 0, 0, 0, 0, 0, 152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 154, 0, 0, 0, 0, 0, 0, 0, 155, 0, 0, 0, 0, 0, 156, 157, 158, 159, 160, 161, 162, 0,
        // State 38
        0, -274, 0, 0, -274, 6, -274, -274, 0, 0, 0, -274, -274, -274, -274, 0, 0, -274, -274, -274, -274, 0, 0, 0, 0, -274, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -274, -274, 0, 0, -274, 0, 0, 0, 0, -274, 152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 154, -274, 17, 0, 0, 0, 0, 0, 155, 0, 0, 22, -274, -274, 156, 157, 158, 159, 160, 161, 162, 0,
        // State 39
        0, 0, 5, 0, 0, 6, -133, 0, 0, 0, 0, 149, 0, 0, 150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 151, 0, 0, 9, 0, 10, 11, 0, 152, 0, 153, -378, 12, 13, 0, 14, 15, 16, 154, 0, 17, 0, 0, 18, 0, 19, 155, 20, 21, 22, 0, 0, 156, 157, 158, 159, 160, 161, 162, 0,
        // State 40
        0, 0, 5, 0, 0, 6, 0, 0, 0, 0, 0, 149, 0, 0, 150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, -124, 151, 0, 0, 9, 0, 10, 11, 0, 152, 0, 153, -378, 12, 13, 0, 14, 15, 16, 154, 0, 17, 0, 0, 18, 0, 19, 155, 0, 21, 22, 0, 0, 156, 157, 158, 159, 160, 161, 162, 0,
        // State 41
        257, -266, 0, 0, -266, 6, -266, -266, 0, 0, 0, -266, -266, -266, -266, 0, 84, -266, -266, -266, -266, 0, 0, 0, 0, -266, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 85, -266, -266, 0, 0, -266, 0, 0, 0, 0, -266, 152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 154, -266, 17, 0, 0, 0, 0, 0, 155, 0, 0, 22, -266, -266, 156, 157, 158, 159, 160, 161, 162, 0,
        // State 42
        0, 0, 44, 0, 0, 6, 0, 0, 0, 0, 0, 149, 0, 0, 150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 0, 0, 151, 0, 0, 0, 0, 0, 0, 0, 152, 0, 0, 0, 0, 0, 0, 0, 0, 52, 154, 0, 53, 0, 0, 0, 0, 0, 155, 0, 0, 0, 0, 0, 156, 157, 158, 159, 160, 161, 162, 197,
        // State 43
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 162, 0,
        // State 44
        0, 0, 5, 0, 0, 6, 0, 0, 0, 0, 0, 149, 0, 0, 150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 151, 0, 0, 0, 0, 0, 0, 0, 152, 0, 0, 0, 0, 0, 0, 0, 0, 16, 154, 0, 17, 0, 0, 0, 0, 0, 155, 0, 0, 22, 0, 0, 156, 157, 158, 159, 160, 161, 162, 0,
        // State 45
        0, 0, -391, 0, 0, -391, 0, 0, 0, 0, 0, -391, 0, 0, -391, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -391, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -391, 0, -391, -391, 0, 0, -391, 0, -391, -391, 0, -391, 0, -391, -391, -391, -391, 0, -391, -391, -391, -391, 0, -391, 0, 0, -391, 0, -391, -391, 176, -391, -391, 0, 0, -391, -391, -391, -391, -391, -391, -391, 0,
        // State 46
        0, 0, 44, 0, 0, 6, 0, 0, 0, 0, 0, 149, 0, 0, 150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 0, 0, 151, 0, 0, 47, 0, 48, 49, 0, 152, 0, 196, -378, 50, 51, 0, 14, 15, 52, 154, 0, 53, 0, 0, 54, 0, 55, 155, 20, 56, 57, 0, 0, 156, 157, 158, 159, 160, 161, 162, 197,
        // State 47
        0, 0, 44, 0, 0, 6, 0, 0, 0, 0, 0, 149, 0, 0, 150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 0, 0, 151, 0, 0, 47, 0, 48, 49, 0, 152, 0, 196, -378, 50, 51, 0, 14, 15, 52, 154, 0, 53, 0, 0, 54, 0, 55, 155, 20, 56, 57, 0, 0, 156, 157, 158, 159, 160, 161, 162, 197,
        // State 48
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 89, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 49
        0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 154, 0, 17, 0, 0, 0, 0, 0, 155, 0, 0, 22, 0, 0, 156, 157, 158, 159, 160, 161, 162, 0,
        // State 50
        0, 0, 44, 0, 0, 6, 0, 0, 0, 0, 0, 149, 0, 0, 150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 0, 0, 151, 0, 0, 47, 0, 48, 49, 0, 152, 0, 196, -378, 50, 51, 0, 14, 15, 52, 154, 0, 53, 0, 0, 54, 0, 55, 155, 20, 56, 57, 0, 0, 156, 157, 158, 159, 160, 161, 162, 197,
        // State 51
        0, 0, 44, 0, 0, 6, 0, 0, 0, 0, 0, 149, 0, 0, 150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 0, 0, 151, 0, 0, 0, 0, 0, 0, 0, 152, 0, 0, 0, 0, 0, 0, 0, 0, 52, 154, 0, 53, 0, 0, 0, 0, 0, 155, 0, 0, 0, 0, 0, 156, 157, 158, 159, 160, 161, 162, 197,
        // State 52
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 156, 0, 0, 0, 0, 0, 0, 0,
        // State 53
        0, 0, 44, 0, 0, 6, -206, 0, 0, 0, 0, 149, 0, -206, 150, 0, 0, 0, 0, 0, -206, 0, 0, 0, 0, 0, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, -206, -206, 151, 0, 0, 47, 0, 48, 49, -206, 152, 0, 196, -378, 50, 51, 0, 14, 15, 52, 154, 0, 53, 0, 0, 54, 0, 55, 155, 20, 56, 0, 0, -206, 156, 157, 158, 159, 160, 161, 162, 197,
        // State 54
        0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 154, 0, 17, 0, 0, 0, 0, 0, 155, 0, 0, 22, 0, 0, 156, 157, 158, 159, 160, 161, 162, 0,
        // State 55
        0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 154, 0, 17, 0, 0, 0, 0, 0, 155, 0, 0, 22, 0, 0, 156, 157, 158, 159, 160, 161, 162, 0,
        // State 56
        0, 0, 5, 0, 0, 6, 0, 0, 0, 0, 0, 149, 0, 0, 150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 151, 0, 0, 9, 0, 10, 11, 0, 152, 0, 153, -378, 12, 13, 0, 14, 15, 16, 154, 0, 17, 0, 0, 18, 0, 19, 155, 20, 21, 22, 0, -116, 156, 157, 158, 159, 160, 161, 162, 0,
        // State 57
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 58
        0, 0, 61, 0, 0, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 208, 0, 0, 0, 0, 0, 0, 152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 154, 0, 0, 0, 0, 0, 0, 0, 155, 0, 0, 0, 0, 0, 156, 157, 158, 159, 160, 161, 162, 0,
        // State 59
        0, 0, 44, 0, 0, 6, 0, 0, 0, 0, 0, 149, 0, 0, 150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 0, 0, 151, 0, 0, 47, 0, 48, 49, 0, 152, 0, 196, -378, 50, 51, 0, 14, 15, 52, 154, 0, 53, 0, 0, 54, 0, 55, 155, 20, 56, 57, 0, 0, 156, 157, 158, 159, 160, 161, 162, 197,
        // State 60
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 162, 0,
        // State 61
        0, 0, 61, 0, 0, 62, 174, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 208, 0, 0, 0, 0, 0, 0, 152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 154, 0, 0, 0, 0, 0, 0, 0, 155, 0, 0, 0, 0, 0, 156, 157, 158, 159, 160, 161, 162, 0,
        // State 62
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 63
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 64
        0, 0, 5, 0, 0, 6, 0, 0, 0, 0, 0, 149, 0, 0, 150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 151, 0, 0, 9, 0, 10, 11, 0, 152, 279, 153, -378, 12, 13, 0, 14, 15, 16, 154, 0, 17, 280, 281, 18, 282, 19, 155, 20, 21, 22, 0, -112, 156, 157, 158, 159, 160, 161, 162, 0,
        // State 65
        0, 0, 44, 0, 0, 6, 0, 0, 0, 0, 0, 149, 0, 0, 150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 0, 0, 151, 0, 0, 47, 0, 48, 49, 0, 152, 0, 196, -378, 50, 51, 0, 14, 15, 52, 154, 0, 53, 0, 0, 54, 0, 55, 155, 20, 56, 57, 0, 0, 156, 157, 158, 159, 160, 161, 162, 197,
        // State 66
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 176, 0, 0, 0, -122, 0, 0, 0, 0, 0, 0, -391, 0,
        // State 67
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 162, 0,
        // State 68
        0, 0, 0, 0, 0, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -355, 0, 0, 0, 0, 0, -355, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 208, 0, 0, 0, 0, 0, 0, 152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 154, 0, 0, 0, 0, 0, 0, 0, 155, 0, 0, -355, 0, 0, 156, 157, 158, 159, 160, 161, 162, 0,
        // State 69
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 104, 0, 0, 0, 0, 0, 105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 70
        0, 0, 5, 0, 0, 6, 0, 0, 0, 0, 0, 149, 0, 0, 150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, -126, 151, 0, 0, 9, 0, 10, 11, 0, 152, 0, 153, -378, 12, 13, 0, 14, 15, 16, 154, 0, 17, 0, 0, 18, 0, 19, 155, 0, 21, 22, 0, 0, 156, 157, 158, 159, 160, 161, 162, 0,
        // State 71
        0, 0, 44, 0, 0, 6, 0, 0, 0, 0, 0, 149, 0, 0, 150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 0, 0, 151, 0, 0, 0, 0, 0, 0, 0, 152, 0, 0, 0, 0, 0, 0, 0, 0, 52, 154, 0, 53, 0, 0, 0, 0, 0, 155, 0, 0, 0, 0, 0, 156, 157, 158, 159, 160, 161, 162, 197,
        // State 72
        0, 0, 44, 0, 0, 6, 0, 0, 0, 0, 0, 149, 0, 0, 150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 0, 0, 151, 0, 0, 0, 0, 0, 0, 0, 152, 0, 0, 0, 0, 0, 0, 0, 0, 52, 154, 0, 53, 0, 0, 0, 0, 0, 155, 0, 0, 0, 0, 0, 156, 157, 158, 159, 160, 161, 162, 197,
        // State 73
        0, 0, 44, 0, 0, 6, 0, 0, 0, 0, 0, 149, 0, 0, 150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 0, 0, 151, 0, 0, 0, 0, 0, 0, 0, 152, 0, 0, 0, 0, 0, 0, 0, 0, 52, 154, 0, 53, 0, 0, 0, 0, 0, 155, 0, 0, 0, 0, 0, 156, 157, 158, 159, 160, 161, 162, 197,
        // State 74
        0, 0, 44, 0, 0, 6, 0, 0, 0, 0, 0, 149, 0, 0, 150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 0, 0, 151, 0, 0, 0, 0, 0, 0, 0, 152, 0, 0, 0, 0, 0, 0, 0, 0, 52, 154, 0, 53, 0, 0, 0, 0, 0, 155, 0, 0, 0, 0, 0, 156, 157, 158, 159, 160, 161, 162, 197,
        // State 75
        0, 0, 44, 0, 0, 6, 0, 0, 0, 0, 0, 149, 0, 0, 150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 0, 0, 151, 0, 0, 0, 0, 0, 0, 0, 152, 0, 0, 0, 0, 0, 0, 0, 0, 52, 154, 0, 53, 0, 0, 0, 0, 0, 155, 0, 0, 0, 0, 0, 156, 157, 158, 159, 160, 161, 162, 197,
        // State 76
        0, 0, 0, 0, 0, 225, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 77
        0, 0, 44, 0, 0, 6, 0, 0, 0, 0, 0, 149, 0, 0, 150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 0, 0, 151, 0, 0, 0, 0, 0, 0, 0, 152, 0, 0, 0, 0, 0, 0, 0, 0, 52, 154, 0, 53, 0, 0, 0, 0, 0, 155, 0, 0, 0, 0, 0, 156, 157, 158, 159, 160, 161, 162, 197,
        // State 78
        0, 0, 44, 0, 0, 6, 0, 0, 0, 0, 0, 149, 0, 0, 150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 0, 0, 151, 0, 0, 0, 0, 0, 0, 0, 152, 0, 0, 0, 0, 0, 0, 0, 0, 52, 154, 0, 53, 0, 0, 0, 0, 0, 155, 0, 0, 0, 0, 0, 156, 157, 158, 159, 160, 161, 162, 197,
        // State 79
        0, 0, 44, 0, 0, 6, 0, 0, 0, 0, 0, 149, 0, 0, 150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 0, 0, 151, 0, 0, 0, 0, 0, 0, 0, 152, 0, 0, 0, 0, 0, 0, 0, 0, 52, 154, 0, 53, 0, 0, 0, 0, 0, 155, 0, 0, 0, 0, 0, 156, 157, 158, 159, 160, 161, 162, 197,
        // State 80
        0, 0, 44, 0, 0, 6, 0, 0, 0, 0, 0, 149, 0, 0, 150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 0, 0, 151, 0, 0, 0, 0, 0, 0, 0, 152, 0, 0, 0, 0, 0, 0, 0, 0, 52, 154, 0, 53, 0, 0, 0, 0, 0, 155, 0, 0, 0, 0, 0, 156, 157, 158, 159, 160, 161, 162, 197,
        // State 81
        0, 0, 5, 0, 0, 6, 0, 0, 0, 0, 0, 149, 0, 0, 150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 151, 0, 0, 9, 0, 10, 11, 0, 152, 0, 153, -378, 12, 13, 0, 14, 15, 16, 154, 0, 17, 0, 0, 18, 0, 19, 155, 20, 21, 22, 0, 0, 156, 157, 158, 159, 160, 161, 162, 0,
        // State 82
        0, 0, 44, 0, 0, 6, 0, 0, 0, 0, 0, 149, 0, 0, 150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 0, 0, 151, 0, 0, 0, 0, 0, 0, 0, 152, 0, 0, 0, 0, 0, 0, 0, 0, 52, 154, 0, 53, 0, 0, 0, 0, 0, 155, 0, 0, 0, 0, 0, 156, 157, 158, 159, 160, 161, 162, 197,
        // State 83
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 247, 162, 0,
        // State 84
        0, 0, 5, 0, 0, 6, 0, 0, 0, 0, 0, 149, 0, 0, 150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 151, 0, 0, 9, 0, 10, 11, 0, 152, 0, 153, -378, 12, 13, 0, 14, 15, 16, 154, 0, 17, 0, 0, 18, 0, 19, 155, 20, 21, 22, 0, 0, 156, 157, 158, 159, 160, 161, 162, 0,
        // State 85
        0, 0, 44, 0, 0, 6, 0, 0, 0, 0, 0, 149, 0, 0, 150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 0, 0, 151, 0, 0, 0, 0, 0, 0, 0, 152, 0, 0, 0, 0, 0, 0, 0, 0, 52, 154, 0, 53, 0, 0, 0, 0, 0, 155, 0, 0, 0, 0, 0, 156, 157, 158, 159, 160, 161, 162, 197,
        // State 86
        0, -268, 0, 0, -268, 6, -268, -268, 0, 0, 0, -268, -268, -268, -268, 0, 0, -268, -268, -268, -268, 0, 0, 0, 0, -268, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -268, -268, 0, 0, -268, 0, 0, 0, 0, -268, 152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 154, -268, 53, 0, 0, 0, 0, 0, 155, 0, 0, 0, -268, -268, 156, 157, 158, 159, 160, 161, 162, 197,
        // State 87
        0, 0, 5, 0, 0, 6, 0, 0, 0, 0, 0, 149, 0, 0, 150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, -124, 151, 0, 0, 9, 0, 10, 11, 0, 152, 0, 153, -378, 12, 13, 0, 14, 15, 16, 154, 0, 17, 0, 0, 18, 0, 19, 155, 0, 21, 22, 0, 0, 156, 157, 158, 159, 160, 161, 162, 0,
        // State 88
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 89
        0, 0, 61, 0, 0, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 208, 0, 0, 0, 0, 0, 0, 152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 154, 0, 0, 0, 0, 0, 0, 0, 155, 0, 0, 0, 0, 0, 156, 157, 158, 159, 160, 161, 162, 0,
        // State 90
        0, 0, 44, 0, 0, 6, 0, 0, 0, 0, 0, 149, 0, 0, 150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 0, 0, 151, 0, 0, 47, 0, 48, 49, 0, 152, 0, 196, -378, 50, 51, 0, 14, 15, 52, 154, 0, 53, 0, 0, 54, 0, 55, 155, 20, 56, 57, 0, 0, 156, 157, 158, 159, 160, 161, 162, 197,
        // State 91
        0, 0, 44, 0, 0, 6, 0, 0, 0, 0, 0, 149, 0, 0, 150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 0, 0, 151, 0, 0, 47, 0, 48, 49, 0, 152, 0, 196, -378, 50, 51, 0, 14, 15, 52, 154, 0, 53, 0, 0, 54, 0, 55, 155, 20, 56, 57, 0, 0, 156, 157, 158, 159, 160, 161, 162, 197,
        // State 92
        0, 0, 5, 0, 0, 6, 0, 0, 0, 0, 0, 149, 0, 0, 150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 151, 0, 0, 9, 0, 10, 11, 0, 152, 0, 153, -378, 12, 13, 0, 14, 15, 16, 154, 0, 17, 0, 0, 18, 0, 19, 155, 20, 21, 22, 0, 0, 156, 157, 158, 159, 160, 161, 162, 0,
        // State 93
        0, 0, 0, 0, 0, 225, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 94
        0, 0, 0, 0, 0, 62, -360, 0, 0, 0, 0, 0, 0, -360, 0, 0, 0, 0, -360, 0, 0, 0, 0, 0, -360, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 208, 0, 0, 0, 0, 0, 0, 152, 0, 0, 0, 0, 0, -360, 0, 0, 0, 154, 0, 0, 0, 0, 0, 0, 0, 155, 0, 0, 0, 0, 0, 156, 157, 158, 159, 160, 161, 162, 0,
        // State 95
        0, 0, 61, 0, 0, 62, -136, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 208, 0, 0, 0, 0, 0, 0, 152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 154, 0, 0, 0, 0, 0, 0, 0, 155, 0, 0, 0, 0, 0, 156, 157, 158, 159, 160, 161, 162, 0,
        // State 96
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 97
        0, 0, 5, 0, 0, 6, 0, 0, 0, 0, 0, 149, 0, 0, 150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 151, 0, 0, 9, 0, 10, 11, 0, 152, 279, 153, -378, 12, 13, 0, 14, 15, 16, 154, 0, 17, 280, 281, 18, 282, 19, 155, 20, 21, 22, 0, -114, 156, 157, 158, 159, 160, 161, 162, 0,
        // State 98
        0, 0, 5, 0, 0, 6, 0, 0, 0, 0, 0, 149, 0, 0, 150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 151, 0, 0, 9, 0, 10, 11, 0, 152, 0, 153, -378, 12, 13, 0, 14, 15, 16, 154, 0, 17, 0, 0, 18, 0, 19, 155, 20, 21, 22, 0, 0, 156, 157, 158, 159, 160, 161, 162, 0,
        // State 99
        0, 0, 5, 0, 0, 6, 0, 0, 0, 0, 0, 149, 0, 0, 150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 151, 0, 0, 9, 0, 10, 11, 0, 152, 279, 153, -378, 12, 13, 0, 14, 15, 16, 154, 0, 17, 0, 0, 18, 282, 19, 155, 20, 21, 22, 0, 0, 156, 157, 158, 159, 160, 161, 162, 0,
        // State 100
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 101
        0, 0, 5, 0, 0, 6, 0, 0, 0, 0, 0, 149, 0, 0, 150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 151, 0, 0, 9, 0, 10, 11, 0, 152, 0, 153, -378, 12, 13, 0, 14, 15, 16, 154, 0, 17, 0, 0, 18, 0, 19, 155, 20, 21, 22, 0, 0, 156, 157, 158, 159, 160, 161, 162, 0,
        // State 102
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 114, 0, 0, 0, 0, 0, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 103
        0, 0, 0, 0, 0, 225, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 104
        0, 0, 5, 0, 0, 6, 0, 0, 0, 0, 0, 149, 0, 0, 150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 151, 0, 0, 9, 0, 10, 11, 0, 152, 0, 153, -378, 12, 13, 0, 14, 15, 16, 154, 0, 17, 0, 0, 18, 0, 19, 155, 20, 21, 22, 0, 0, 156, 157, 158, 159, 160, 161, 162, 0,
        // State 105
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 106
        0, 0, 5, 0, 0, 6, 0, 0, 0, 0, 0, 149, 0, 0, 150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 151, 0, 0, 9, 0, 10, 11, 0, 152, 0, 153, -378, 12, 13, 0, 14, 15, 16, 154, 0, 17, 0, 0, 18, 0, 19, 155, 20, 21, 22, 0, 0, 156, 157, 158, 159, 160, 161, 162, 0,
        // State 107
        0, 0, 44, 0, 0, 6, 0, 0, 0, 0, 0, 149, 0, 0, 150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 0, 0, 151, 0, 0, 47, 0, 48, 49, 0, 152, 0, 196, -378, 50, 51, 0, 14, 15, 52, 154, 0, 53, 0, 0, 54, 0, 55, 155, 20, 56, 57, 0, 0, 156, 157, 158, 159, 160, 161, 162, 197,
        // State 108
        0, 0, 5, 0, 0, 6, 0, 0, 0, 0, 0, 149, 0, 0, 150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 151, 0, 0, 9, 0, 10, 11, 0, 152, 0, 153, -378, 12, 13, 0, 14, 15, 16, 154, 0, 17, 0, 0, 18, 0, 19, 155, 20, 21, 22, 0, 0, 156, 157, 158, 159, 160, 161, 162, 0,
        // State 109
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -130, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 110
        0, 0, 0, 0, 0, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 208, 0, 0, 0, 0, 0, 0, 152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 154, 0, 0, 0, 0, 0, 0, 0, 155, 0, 0, 0, 0, 0, 156, 157, 158, 159, 160, 161, 162, 0,
        // State 111
        0, 0, 0, 0, 0, 225, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 112
        0, 0, 5, 0, 0, 6, 0, 0, 0, 0, 0, 149, 0, 0, 150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 151, 0, 0, 9, 0, 10, 11, 0, 152, 0, 153, -378, 12, 13, 0, 14, 15, 16, 154, 0, 17, 0, 0, 18, 0, 19, 155, 20, 21, 22, 0, 0, 156, 157, 158, 159, 160, 161, 162, 0,
        // State 113
        0, 0, 0, 0, 0, 225, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 114
        0, 0, 5, 0, 0, 6, 0, 0, 0, 0, 0, 149, 0, 0, 150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 151, 0, 0, 9, 0, 10, 11, 0, 152, 0, 153, -378, 12, 13, 0, 14, 15, 16, 154, 0, 17, 0, 0, 18, 0, 19, 155, 20, 21, 22, 0, 0, 156, 157, 158, 159, 160, 161, 162, 0,
        // State 115
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 121, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 116
        0, 0, 5, 0, 0, 6, 0, 0, 0, 0, 0, 149, 0, 0, 150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 151, 0, 0, 9, 0, 10, 11, 0, 152, 0, 153, -378, 12, 13, 0, 14, 15, 16, 154, 0, 17, 0, 0, 18, 0, 19, 155, 20, 21, 22, 0, 0, 156, 157, 158, 159, 160, 161, 162, 0,
        // State 117
        0, 0, 44, 0, 0, 6, 0, 0, 0, 0, 0, 149, 0, 0, 150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 0, 0, 151, 0, 0, 47, 0, 48, 49, 0, 152, 0, 196, -378, 50, 51, 0, 14, 15, 52, 154, 0, 53, 0, 0, 54, 0, 55, 155, 20, 56, 57, 0, 0, 156, 157, 158, 159, 160, 161, 162, 197,
        // State 118
        0, 0, 44, 0, 0, 6, 0, 0, 0, 0, 0, 149, 0, 0, 150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 0, 0, 151, 0, 0, 47, 0, 48, 49, 0, 152, 0, 196, -378, 50, 51, 0, 14, 15, 52, 154, 0, 53, 0, 0, 54, 0, 55, 155, 20, 56, 57, 0, 0, 156, 157, 158, 159, 160, 161, 162, 197,
        // State 119
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 120
        0, 0, 5, 0, 0, 6, 0, 0, 0, 0, 0, 149, 0, 0, 150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 151, 0, 0, 9, 0, 10, 11, 0, 152, 0, 153, -378, 12, 13, 0, 14, 15, 16, 154, 0, 17, 0, 0, 18, 0, 19, 155, 20, 21, 22, 0, 0, 156, 157, 158, 159, 160, 161, 162, 0,
        // State 121
        0, 0, 44, 0, 0, 6, 0, 0, 0, 0, 0, 149, 0, 0, 150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 0, 0, 151, 0, 0, 47, 0, 48, 49, 0, 152, 0, 196, -378, 50, 51, 0, 14, 15, 52, 154, 0, 53, 0, 0, 54, 0, 55, 155, 20, 56, 57, 0, 0, 156, 157, 158, 159, 160, 161, 162, 197,
        // State 122
        0, 0, 5, 0, 0, 6, 0, 0, 0, 0, 0, 149, 0, 0, 150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 151, 0, 0, 9, 0, 10, 11, 0, 152, 0, 153, -378, 12, 13, 0, 14, 15, 16, 154, 0, 17, 0, 0, 18, 0, 19, 155, 20, 21, 22, 0, 0, 156, 157, 158, 159, 160, 161, 162, 0,
        // State 123
        0, 0, 5, 0, 0, 6, 0, 0, 0, 0, 0, 149, 0, 0, 150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 151, 0, 0, 9, 0, 10, 11, 0, 152, 0, 153, -378, 12, 13, 0, 14, 15, 16, 154, 0, 17, 0, 0, 18, 0, 19, 155, 20, 21, 22, 0, 0, 156, 157, 158, 159, 160, 161, 162, 0,
        // State 124
        0, 0, 44, 0, 0, 6, 0, 0, 0, 0, 0, 149, 0, 0, 150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 0, 0, 151, 0, 0, 47, 0, 48, 49, 0, 152, 0, 196, -378, 50, 51, 0, 14, 15, 52, 154, 0, 53, 0, 0, 54, 0, 55, 155, 20, 56, 57, 0, 0, 156, 157, 158, 159, 160, 161, 162, 197,
        // State 125
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 164, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -115, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 126
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -82, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -82, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 127
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -81, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -81, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 128
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 129
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -110, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 130
        0, -190, 0, 0, 0, 0, -190, 0, 0, 0, 0, 0, 0, -190, 0, 0, 0, 0, 0, -190, -190, 0, 0, 0, 0, -190, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -190, -190, 0, 0, 0, 0, 0, 0, 0, -190, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -190, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 131
        0, -144, 0, 0, 0, 0, -144, 0, 0, 0, 0, 0, 0, -144, 0, 0, 0, 0, 0, -144, -144, 0, 0, 0, 0, -144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -144, -144, 0, 0, 24, 0, 0, 0, 0, -144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -144, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 132
        0, -150, 0, 0, 0, 0, -150, 0, 0, 0, 0, 25, 26, -150, 27, 0, 0, 0, 28, -150, -150, 0, 0, 0, 0, -150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -150, -150, 0, 0, -150, 0, 0, 0, 0, -150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -150, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 133
        0, -162, 0, 0, 0, 0, -162, 0, 0, 0, 0, -162, -162, -162, -162, 0, 0, 0, -162, -162, -162, 0, 0, 0, 0, -162, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -162, -162, 0, 0, -162, 0, 0, 0, 0, -162, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -162, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -162, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 134
        0, -170, 0, 0, 0, 0, -170, 29, 0, 0, 0, -170, -170, -170, -170, 0, 0, 30, -170, -170, -170, 0, 0, 0, 0, -170, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -170, -170, 0, 0, -170, 0, 0, 0, 0, -170, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -170, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -170, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 135
        0, -176, 0, 0, 0, 0, -176, -176, 0, 0, 0, -176, -176, -176, -176, 0, 0, -176, -176, -176, -176, 0, 0, 0, 0, -176, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -176, -176, 0, 0, -176, 0, 0, 0, 0, -176, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -176, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, -176, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 136
        0, 32, 0, 0, 0, 0, -215, 0, 0, 0, 0, 0, 0, -215, 0, 0, 0, 0, 0, 33, -215, 0, 0, 0, 0, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -215, -215, 0, 0, 0, 0, 0, 0, 0, -215, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -215, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 137
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -83, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -83, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 138
        -257, -257, 0, 0, -257, -257, -257, -257, 0, 0, 0, -257, -257, -257, -257, 0, -257, -257, -257, -257, -257, 0, 0, 0, 0, -257, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -257, -257, -257, 0, 0, -257, 0, 0, 0, 0, -257, -257, 0, 0, 0, 0, 0, 0, 0, 0, 0, -257, -257, -257, 0, 0, 0, 0, 0, -257, 0, 0, -257, -257, -257, -257, -257, -257, -257, -257, -257, -257, 0,
        // State 139
        -344, -344, -344, 0, -344, -344, -344, -344, 0, 0, 0, -344, -344, -344, -344, 0, -344, -344, -344, -344, -344, 0, 0, 0, 0, -344, -344, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -344, -344, -344, -344, 0, -344, -344, 0, -344, -344, -344, -344, 0, -344, -344, -344, -344, 0, -344, -344, -344, -344, -344, -344, 0, 0, -344, 0, -344, -344, -344, -344, -344, -344, -344, -344, -344, -344, -344, -344, -344, -344, -344,
        // State 140
        -241, -241, -241, 0, -241, -241, -241, -241, 0, 0, 0, -241, -241, -241, -241, 0, -241, -241, -241, -241, -241, 0, 0, 0, 0, -241, -241, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -241, -241, -241, -241, 0, -241, -241, 0, -241, -241, -241, -241, 0, -241, -241, -241, -241, 0, -241, -241, -241, -241, -241, -241, 0, 0, -241, 0, -241, -241, -241, -241, -241, -241, -241, -241, -241, -241, -241, -241, -241, -241, -241,
        // State 141
        0, -182, 0, 0, 37, 0, -182, -182, 0, 0, 0, -182, -182, -182, -182, 0, 0, -182, -182, -182, -182, 0, 0, 0, 0, -182, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -182, -182, 0, 0, -182, 0, 0, 0, 0, -182, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -182, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -182, -182, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 142
        -242, -242, -242, 0, -242, -242, -242, -242, 0, 0, 0, -242, -242, -242, -242, 0, -242, -242, -242, -242, -242, 0, 0, 0, 0, -242, -242, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -242, -242, -242, -242, 0, -242, -242, 0, -242, -242, -242, -242, 0, -242, -242, -242, -242, 0, -242, -242, -242, -242, -242, -242, 0, 0, -242, 0, -242, -242, -242, -242, -242, -242, -242, -242, -242, -242, -242, -242, -242, -242, -242,
        // State 143
        -247, -247, -247, 0, -247, -247, -247, -247, 0, 0, 0, -247, -247, -247, -247, 0, -247, -247, -247, -247, -247, 0, 0, 0, 0, -247, -247, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -247, -247, -247, -247, 0, -247, -247, 0, -247, -247, -247, -247, 0, -247, -247, -247, -247, 0, -247, -247, -247, -247, -247, -247, 0, 0, -247, 0, -247, -247, -247, -247, -247, -247, -247, -247, -247, -247, -247, -247, -247, -247, -247,
        // State 144
        -240, -240, -240, 0, -240, -240, -240, -240, 0, 0, 0, -240, -240, -240, -240, 0, -240, -240, -240, -240, -240, 0, 0, 0, 0, -240, -240, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -240, -240, -240, -240, 0, -240, -240, 0, -240, -240, -240, -240, 0, -240, -240, -240, -240, 0, -240, -240, -240, -240, -240, -240, 0, 0, -240, 0, -240, -240, -240, -240, -240, -240, -240, -240, -240, -240, -240, -240, -240, -240, -240,
        // State 145
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 146
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 147
        -299, -299, -299, 0, -299, -299, -299, -299, 0, 0, 0, -299, -299, -299, -299, 0, -299, -299, -299, -299, -299, 0, 0, 0, -299, -299, -299, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -299, -299, -299, -299, 0, -299, -299, 0, -299, -299, -299, -299, 0, -299, -299, -299, -299, -299, -299, -299, -299, -299, -299, -299, 0, 0, -299, 0, -299, -299, -299, -299, -299, -299, -299, -299, -299, -299, -299, -299, -299, -299, -299,
        // State 148
        0, 0, -387, 0, 0, -387, 0, 0, 0, 0, 0, -387, 0, 0, -387, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -387, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -387, 0, 0, -387, 0, 0, 0, 0, 0, 0, 0, -387, 0, 0, 0, 0, 0, 0, 0, 0, -387, -387, 0, -387, 0, 0, 0, 0, 0, -387, 0, 0, -387, 0, 0, -387, -387, -387, -387, -387, -387, -387, -387,
        // State 149
        0, 0, -388, 0, 0, -388, 0, 0, 0, 0, 0, -388, 0, 0, -388, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -388, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -388, 0, 0, -388, 0, 0, 0, 0, 0, 0, 0, -388, 0, 0, 0, 0, 0, 0, 0, 0, -388, -388, 0, -388, 0, 0, 0, 0, 0, -388, 0, 0, -388, 0, 0, -388, -388, -388, -388, -388, -388, -388, -388,
        // State 150
        0, 0, -389, 0, 0, -389, 0, 0, 0, 0, 0, -389, 0, 0, -389, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -389, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -389, 0, 0, -389, 0, 0, 0, 0, 0, 0, 0, -389, 0, 0, 0, 0, 0, 0, 0, 0, -389, -389, 0, -389, 0, 0, 0, 0, 0, -389, 0, 0, -389, 0, 0, -389, -389, -389, -389, -389, -389, -389, -389,
        // State 151
        -292, -292, -292, 0, -292, -292, -292, -292, 0, 0, 0, -292, -292, -292, -292, 0, -292, -292, -292, -292, -292, 0, 0, 0, -292, -292, -292, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -292, -292, -292, -292, 0, -292, -292, 0, -292, -292, -292, -292, 0, -292, -292, -292, -292, -292, -292, -292, -292, -292, -292, -292, 0, 0, -292, 0, -292, -292, -292, -292, -292, -292, -292, -292, -292, -292, -292, -292, -292, -292, -292,
        // State 152
        0, 0, 0, 0, 0, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 153
        -290, -290, -290, 0, -290, -290, -290, -290, 0, 0, 0, -290, -290, -290, -290, 0, -290, -290, -290, -290, -290, 0, 0, 0, -290, -290, -290, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -290, -290, -290, -290, 0, -290, -290, 0, -290, -290, -290, -290, 0, -290, -290, -290, -290, -290, -290, -290, -290, -290, -290, -290, 0, 0, -290, 0, -290, -290, -290, -290, -290, -290, -290, -290, -290, -290, -290, -290, -290, -290, -290,
        // State 154
        -291, -291, -291, 0, -291, -291, -291, -291, 0, 0, 0, -291, -291, -291, -291, 0, -291, -291, -291, -291, -291, 0, 0, 0, -291, -291, -291, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -291, -291, -291, -291, 0, -291, -291, 0, -291, -291, -291, -291, 0, -291, -291, -291, -291, -291, -291, -291, -291, -291, -291, -291, 0, 0, -291, 0, -291, -291, -291, -291, -291, -291, -291, -291, -291, -291, -291, -291, -291, -291, -291,
        // State 155
        -383, -383, -383, 0, -383, -383, -383, -383, 0, 0, 0, -383, -383, -383, -383, 0, -383, -383, -383, -383, -383, 0, 0, 0, -383, -383, -383, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -383, -383, -383, -383, 0, -383, -383, 0, -383, -383, -383, -383, 0, -383, -383, -383, -383, -383, -383, -383, -383, -383, -383, -383, 0, 0, -383, 0, -383, -383, -383, -383, -383, -383, -383, -383, -383, -383, -383, -383, -383, -383, -383,
        // State 156
        -298, -298, -298, 0, -298, -298, -298, -298, 0, 0, 0, -298, -298, -298, -298, 0, -298, -298, -298, -298, -298, 0, 0, 0, -298, -298, -298, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -298, -298, -298, -298, 0, -298, -298, 0, -298, -298, -298, -298, 0, -298, -298, -298, -298, -298, -298, -298, -298, -298, -298, -298, 0, 0, -298, 0, -298, -298, -298, -298, -298, -298, -298, -298, -298, -298, -298, -298, -298, -298, -298,
        // State 157
        -296, -296, -296, 0, -296, -296, -296, -296, 0, 0, 0, -296, -296, -296, -296, 0, -296, -296, -296, -296, -296, 0, 0, 0, -296, -296, -296, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -296, -296, -296, -296, 0, -296, -296, 0, -296, -296, -296, -296, 0, -296, -296, -296, -296, -296, -296, -296, -296, -296, -296, -296, 0, 0, -296, 0, -296, -296, -296, -296, -296, -296, -296, -296, -296, -296, -296, -296, -296, -296, -296,
        // State 158
        -294, -294, -294, 0, -294, -294, -294, -294, 0, 0, 0, -294, -294, -294, -294, 0, -294, -294, -294, -294, -294, 0, 0, 0, -294, -294, -294, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -294, -294, -294, -294, 0, -294, -294, 0, -294, -294, -294, -294, 0, -294, -294, -294, -294, -294, -294, -294, -294, -294, -294, -294, 0, 0, -294, 0, -294, -294, -294, -294, -294, -294, -294, -294, -294, -294, -294, -294, -294, -294, -294,
        // State 159
        -295, -295, -295, 0, -295, -295, -295, -295, 0, 0, 0, -295, -295, -295, -295, 0, -295, -295, -295, -295, -295, 0, 0, 0, -295, -295, -295, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -295, -295, -295, -295, 0, -295, -295, 0, -295, -295, -295, -295, 0, -295, -295, -295, -295, -295, -295, -295, -295, -295, -295, -295, 0, 0, -295, 0, -295, -295, -295, -295, -295, -295, -295, -295, -295, -295, -295, -295, -295, -295, -295,
        // State 160
        -297, -297, -297, 0, -297, -297, -297, -297, 0, 0, 0, -297, -297, -297, -297, 0, -297, -297, -297, -297, -297, 0, 0, 0, -297, -297, -297, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -297, -297, -297, -297, 0, -297, -297, 0, -297, -297, -297, -297, 0, -297, -297, -297, -297, -297, -297, -297, -297, -297, -297, -297, 0, 0, -297, 0, -297, -297, -297, -297, -297, -297, -297, -297, -297, -297, -297, -297, -297, -297, -297,
        // State 161
        -286, -286, -286, 0, -286, -286, -286, -286, 0, 0, 0, -286, -286, -286, -286, 0, -286, -286, -286, -286, -286, 0, 0, 0, -286, -286, -286, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -286, -286, -286, -286, -286, -286, -286, 0, -286, -286, -286, -286, 0, -286, -286, -286, -286, -286, -286, -286, -286, -286, -286, -286, 0, 0, -286, 0, -286, -286, -286, -286, -286, -286, -286, -286, -286, -286, -286, -286, -286, -286, -286,
        // State 162
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 217, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -117, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 163
        0, 0, -17, 0, 0, -17, 0, 0, 0, 0, 0, -17, 0, 0, -17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -17, 0, 0, -17, 0, 0, -17, 0, -17, -17, 0, -17, 0, -17, -17, -17, -17, 0, -17, -17, -17, -17, 0, -17, 0, 0, -17, 0, -17, -17, -17, -17, -17, 0, -17, -17, -17, -17, -17, -17, -17, -17, 0,
        // State 164
        -262, -262, 0, 0, -262, -262, -262, -262, 0, 0, 0, -262, -262, -262, -262, 0, -262, -262, -262, -262, -262, 0, 0, 0, 0, -262, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -262, -262, -262, 0, 0, -262, 0, 0, 0, 0, -262, -262, 0, 0, 0, 0, 0, 0, 0, 0, 0, -262, -262, -262, 0, 0, 0, 0, 0, -262, 0, 0, -262, -262, -262, -262, -262, -262, -262, -262, -262, -262, 0,
        // State 165
        -263, -263, 0, 0, -263, -263, -263, -263, 0, 0, 0, -263, -263, -263, -263, 0, -263, -263, -263, -263, -263, 0, 0, 0, 0, -263, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -263, -263, -263, 0, 0, -263, 0, 0, 0, 0, -263, -263, 0, 0, 0, 0, 0, 0, 0, 0, 0, -263, -263, -263, 0, 0, 0, 0, 0, -263, 0, 0, -263, -263, -263, -263, -263, -263, -263, -263, -263, -263, 0,
        // State 166
        0, -276, 0, 0, -276, 0, -276, -276, 0, 0, 0, -276, -276, -276, -276, 0, 0, -276, -276, -276, -276, 0, 0, 0, 0, -276, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -276, -276, 0, 0, -276, 0, 0, 0, 0, -276, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -276, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -276, -276, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 167
        0, 0, 0, 0, 0, 0, -232, 0, 0, 0, 0, 0, 0, -232, 0, 0, 0, 0, 0, 0, -232, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -232, -232, 0, 0, 0, 0, 0, 0, 0, -232, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -232, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 168
        0, 0, 0, 0, 0, 0, -140, 0, 0, 0, 0, 0, 0, -140, 0, 0, 0, 0, 0, 0, -140, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -140, -140, 0, 0, 0, 0, 0, 0, 0, -140, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -140, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 169
        0, 0, 0, 0, 0, 0, 252, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 170
        0, 0, 0, 0, 0, 0, -131, 0, 0, 0, 0, 0, 0, 253, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 171
        0, 0, 0, 0, 0, 0, -231, 0, 0, 0, 0, 0, 0, -231, 0, 0, 0, 0, 0, 0, -231, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -231, -231, 0, 0, 0, 0, 0, 0, 0, -231, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -231, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 172
        0, 0, 0, 0, 0, 0, -139, 0, 0, 0, 0, 0, 0, -139, 0, 0, 0, 0, 0, 0, -139, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -139, -139, 0, 0, 0, 0, 0, 0, 0, -139, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -139, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 173
        -293, -293, -293, 0, -293, -293, -293, -293, 0, 0, 0, -293, -293, -293, -293, 0, -293, -293, -293, -293, -293, 0, 0, 0, -293, -293, -293, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -293, -293, -293, -293, 0, -293, -293, 0, -293, -293, -293, -293, 0, -293, -293, -293, -293, -293, -293, -293, -293, -293, -293, -293, 0, 0, -293, 0, -293, -293, -293, -293, -293, -293, -293, -293, -293, -293, -293, -293, -293, -293, -293,
        // State 174
        0, -275, 0, 0, -275, 0, -275, -275, 0, 0, 0, -275, -275, -275, -275, 0, 0, -275, -275, -275, -275, 0, 0, 0, 0, -275, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -275, -275, 0, 0, -275, 0, 0, 0, 0, -275, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -275, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -275, -275, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 175
        0, 0, -390, 0, 0, -390, 0, 0, 0, 0, 0, -390, 0, 0, -390, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -390, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -390, 0, -390, -390, 0, 0, -390, 0, -390, -390, 0, -390, 0, -390, -390, -390, -390, 0, -390, -390, -390, -390, 0, -390, 0, 0, -390, 0, -390, -390, 0, -390, -390, 0, 0, -390, -390, -390, -390, -390, -390, -390, 0,
        // State 176
        -236, -236, 0, 0, -236, -236, -236, -236, 0, 0, 0, -236, -236, -236, -236, 0, -236, -236, -236, -236, -236, 0, 0, 0, 0, -236, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -236, -236, -236, 0, 0, -236, 0, 0, 0, 0, -236, -236, 0, 0, 0, 0, 0, 0, 0, 0, 0, -236, -236, -236, 0, 0, 0, 0, 0, -236, 0, 0, -236, -236, -236, -236, -236, -236, -236, -236, -236, -236, 0,
        // State 177
        0, 0, 0, 0, 0, 0, -198, 0, 0, 0, 0, 0, 0, -198, 0, 0, 0, 0, 0, 0, -198, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -198, -198, 0, 0, 0, 0, 0, 0, 0, -198, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -198, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 178
        0, 0, 0, 0, 0, 0, -230, 0, 0, 0, 0, 0, 0, -230, 0, 0, 0, 0, 0, 0, -230, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -230, -230, 0, 0, 0, 0, 0, 0, 0, -230, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -230, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 179
        0, 0, 0, 0, 0, 0, -138, 0, 0, 0, 0, 0, 0, -138, 0, 0, 0, 0, 0, 0, -138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -138, -138, 0, 0, 0, 0, 0, 0, 0, -138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -138, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 180
        0, 0, 0, 0, 0, 0, -199, 0, 0, 0, 0, 0, 0, -199, 0, 0, 0, 0, 0, 0, -199, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -199, -199, 0, 0, 0, 0, 0, 0, 0, -199, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -199, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 181
        0, -187, 0, 0, 0, 0, -187, 0, 0, 0, 0, 0, 0, -187, 0, 0, 0, 0, 0, -187, -187, 0, 0, 0, 0, -187, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -187, -187, 0, 0, 0, 0, 0, 0, 0, -187, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -187, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 182
        0, -142, 0, 0, 0, 0, -142, 0, 0, 0, 0, 0, 0, -142, 0, 0, 0, 0, 0, -142, -142, 0, 0, 0, 0, -142, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -142, -142, 0, 0, 73, 0, 0, 0, 0, -142, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -142, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -142, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 183
        0, -148, 0, 0, 0, 0, -148, 0, 0, 0, 0, 74, 75, -148, 76, 0, 0, 0, 77, -148, -148, 0, 0, 0, 0, -148, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -148, -148, 0, 0, -148, 0, 0, 0, 0, -148, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -148, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -148, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 184
        0, -157, 0, 0, 0, 0, -157, 0, 0, 0, 0, -157, -157, -157, -157, 0, 0, 0, -157, -157, -157, 0, 0, 0, 0, -157, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -157, -157, 0, 0, -157, 0, 0, 0, 0, -157, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -157, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -157, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 185
        0, -167, 0, 0, 0, 0, -167, 78, 0, 0, 0, -167, -167, -167, -167, 0, 0, 79, -167, -167, -167, 0, 0, 0, 0, -167, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -167, -167, 0, 0, -167, 0, 0, 0, 0, -167, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -167, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -167, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 186
        0, -174, 0, 0, 0, 0, -174, -174, 0, 0, 0, -174, -174, -174, -174, 0, 0, -174, -174, -174, -174, 0, 0, 0, 0, -174, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -174, -174, 0, 0, -174, 0, 0, 0, 0, -174, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -174, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, -174, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 187
        0, 81, 0, 0, 0, 0, -201, 0, 0, 0, 0, 0, 0, -201, 0, 0, 0, 0, 0, 82, -201, 0, 0, 0, 0, 83, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -201, -201, 0, 0, 0, 0, 0, 0, 0, -201, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -201, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 188
        0, 0, 0, 0, 0, 0, -227, 0, 0, 0, 0, 0, 0, -227, 0, 0, 0, 0, 0, 0, -227, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -227, -227, 0, 0, 0, 0, 0, 0, 0, -227, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -227, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 189
        0, 0, 0, 0, 0, 0, -229, 0, 0, 0, 0, 0, 0, -229, 0, 0, 0, 0, 0, 0, -229, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -229, -229, 0, 0, 0, 0, 0, 0, 0, -229, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -229, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 190
        0, 0, 0, 0, 0, 0, -137, 0, 0, 0, 0, 0, 0, -137, 0, 0, 0, 0, 0, 0, -137, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -137, -137, 0, 0, 0, 0, 0, 0, 0, -137, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -137, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 191
        -250, -250, 0, 0, -250, -250, -250, -250, 0, 0, 0, -250, -250, -250, -250, 0, -250, -250, -250, -250, -250, 0, 0, 0, 0, -250, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -250, -250, -250, 0, 0, -250, 0, 0, 0, 0, -250, -250, 0, 0, 0, 0, 0, 0, 0, 0, 0, -250, -250, -250, 0, 0, 0, 0, 0, -250, 0, 0, -250, -250, -250, -250, -250, -250, -250, -250, -250, -250, 0,
        // State 192
        -237, -237, 0, 0, -237, -237, -237, -237, 0, 0, 0, -237, -237, -237, -237, 0, -237, -237, -237, -237, -237, 0, 0, 0, 0, -237, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -237, -237, -237, 0, 0, -237, 0, 0, 0, 0, -237, -237, 0, 0, 0, 0, 0, 0, 0, 0, 0, -237, -237, -237, 0, 0, 0, 0, 0, -237, 0, 0, -237, -237, -237, -237, -237, -237, -237, -237, -237, -237, 0,
        // State 193
        0, -180, 0, 0, 86, 0, -180, -180, 0, 0, 0, -180, -180, -180, -180, 0, 0, -180, -180, -180, -180, 0, 0, 0, 0, -180, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -180, -180, 0, 0, -180, 0, 0, 0, 0, -180, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -180, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -180, -180, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 194
        -238, -238, 0, 0, -238, -238, -238, -238, 0, 0, 0, -238, -238, -238, -238, 0, -238, -238, -238, -238, -238, 0, 0, 0, 0, -238, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -238, -238, -238, 0, 0, -238, 0, 0, 0, 0, -238, -238, 0, 0, 0, 0, 0, 0, 0, 0, 0, -238, -238, -238, 0, 0, 0, 0, 0, -238, 0, 0, -238, -238, -238, -238, -238, -238, -238, -238, -238, -238, 0,
        // State 195
        0, 0, 0, 0, 0, 90, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 196
        -76, -76, 0, 0, -76, -76, -76, -76, 0, 0, 0, -76, -76, -76, -76, 0, -76, -76, -76, -76, -76, 0, 0, 0, 0, -76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -76, -76, -76, 0, 0, -76, 0, 0, 0, 0, -76, -76, 0, 0, 0, 0, 0, 0, 0, 0, 0, -76, -76, -76, 0, 0, 0, 0, 0, -76, 0, 0, -76, -76, -76, -76, -76, -76, -76, -76, -76, -76, 0,
        // State 197
        0, 0, 0, 0, 0, 0, -228, 0, 0, 0, 0, 0, 0, -228, 0, 0, 0, 0, 0, 0, -228, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -228, -228, 0, 0, 0, 0, 0, 0, 0, -228, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -228, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 198
        0, 0, 0, 0, 0, 0, -225, 0, 0, 0, 0, 0, 0, -225, 0, 0, 0, 0, 0, 0, -225, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -225, -225, 0, 0, 0, 0, 0, 0, 0, -225, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -225, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 199
        0, 0, 0, 0, 0, 0, -224, 0, 0, 0, 0, 0, 0, -224, 0, 0, 0, 0, 0, 0, -224, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -224, -224, 0, 0, 0, 0, 0, 0, 0, -224, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -224, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 200
        0, 0, -355, 0, 0, -355, -355, 0, 0, 0, 0, -355, 0, -355, -355, 0, 0, 0, -355, 0, 0, 0, 0, 0, -355, 0, -355, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -355, 0, 0, -355, 0, 0, -355, 0, -355, -355, 0, -355, 0, -355, -355, -355, -355, -355, -355, -355, -355, -355, 0, -355, 0, 0, -355, 0, -355, -355, -355, -355, -355, 0, 0, -355, -355, -355, -355, -355, -355, -355, -355,
        // State 201
        0, 0, -356, 0, 0, -356, -356, 0, 0, 0, 0, -356, 0, -356, -356, 0, 0, 0, -356, 0, 0, 0, 0, 0, -356, 0, -356, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -356, 0, 0, -356, 0, 0, -356, 0, -356, -356, 0, -356, 0, -356, -356, -356, -356, -356, -356, -356, -356, -356, 0, -356, 0, 0, -356, 0, -356, -356, -356, -356, -356, 0, 0, -356, -356, -356, -356, -356, -356, -356, -356,
        // State 202
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 203
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 94, 0, 0, 0, 0, 0, -346, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -346, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 204
        0, 0, 0, 0, 0, 0, -359, 0, 0, 0, 0, 0, 0, -359, 0, 0, 0, 0, -359, 0, 0, 0, 0, 0, -359, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -359, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 205
        0, 0, -352, 0, 0, -352, -352, 0, 0, 0, 0, -352, 0, -352, -352, 0, 0, 0, -352, 0, 0, 0, 0, 0, -352, 0, -352, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -352, 0, 0, -352, 0, 0, -352, 0, -352, -352, 0, -352, 0, -352, -352, -352, -352, -352, -352, -352, -352, -352, 0, -352, 0, 0, -352, 0, -352, -352, -352, -352, -352, 0, 0, -352, -352, -352, -352, -352, -352, -352, -352,
        // State 206
        0, 0, 0, 0, 0, 0, -348, 0, 0, 0, 0, 0, 0, -348, 0, 0, 0, 0, -348, 0, 0, 0, 0, 0, -348, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -348, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 207
        0, 0, -354, 0, 0, -354, -354, 0, 0, 0, 0, -354, 0, -354, -354, 0, 0, 0, -354, 0, 0, 0, 0, 0, -354, 0, -354, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -354, 0, 0, -354, 0, 0, -354, 0, -354, -354, 0, -354, 0, -354, -354, -354, -354, -354, -354, -354, -354, -354, 0, -354, 0, 0, -354, 0, -354, -354, -354, -354, -354, 0, 0, -354, -354, -354, -354, -354, -354, -354, -354,
        // State 208
        0, 0, 0, 0, 0, 0, -95, 0, 0, 0, 0, 0, 0, -95, 0, 0, 0, 0, 0, 0, -95, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -95, -95, 0, 0, 0, 0, 0, 0, 0, -95, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -95, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 209
        0, -277, 0, 0, -277, 0, -277, -277, 0, 0, 0, -277, -277, -277, -277, 0, 0, -277, -277, -277, -277, 0, 0, 0, 0, -277, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -277, -277, 0, 0, -277, 0, 0, 0, 0, -277, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -277, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -277, -277, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 210
        -243, -243, -243, 0, -243, -243, -243, -243, 0, 0, 0, -243, -243, -243, -243, 0, -243, -243, -243, -243, -243, 0, 0, 0, 0, -243, -243, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -243, -243, -243, -243, 0, -243, -243, 0, -243, -243, -243, -243, 0, -243, -243, -243, -243, 0, -243, -243, -243, -243, -243, -243, 0, 0, -243, 0, -243, -243, -243, -243, -243, -243, -243, -243, -243, -243, -243, -243, -243, -243, -243,
        // State 211
        0, 0, 0, 0, 0, 0, -219, 0, 0, 0, 0, 0, 0, -219, 0, 0, 0, 0, 0, 0, -219, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -219, -219, 0, 0, 0, 0, 0, 0, 0, -219, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -219, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 212
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 213
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 214
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 285, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 215
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 286, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -119, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 216
        0, 0, -18, 0, 0, -18, 0, 0, 0, 0, 0, -18, 0, 0, -18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -18, 0, 0, -18, 0, 0, -18, 0, -18, -18, 0, -18, 0, -18, -18, -18, -18, 0, -18, -18, -18, -18, 0, -18, 0, 0, -18, 0, -18, -18, -18, -18, -18, 0, -18, -18, -18, -18, -18, -18, -18, -18, 0,
        // State 217
        0, -143, 0, 0, 0, 0, -143, 0, 0, 0, 0, 0, 0, -143, 0, 0, 0, 0, 0, -143, -143, 0, 0, 0, 0, -143, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -143, -143, 0, 0, 24, 0, 0, 0, 0, -143, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -143, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -143, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 218
        0, -149, 0, 0, 0, 0, -149, 0, 0, 0, 0, 25, 26, -149, 27, 0, 0, 0, 28, -149, -149, 0, 0, 0, 0, -149, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -149, -149, 0, 0, -149, 0, 0, 0, 0, -149, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -149, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -149, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 219
        0, -158, 0, 0, 0, 0, -158, 0, 0, 0, 0, -158, -158, -158, -158, 0, 0, 0, -158, -158, -158, 0, 0, 0, 0, -158, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -158, -158, 0, 0, -158, 0, 0, 0, 0, -158, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -158, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -158, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 220
        0, -159, 0, 0, 0, 0, -159, 0, 0, 0, 0, -159, -159, -159, -159, 0, 0, 0, -159, -159, -159, 0, 0, 0, 0, -159, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -159, -159, 0, 0, -159, 0, 0, 0, 0, -159, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -159, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -159, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 221
        0, -160, 0, 0, 0, 0, -160, 0, 0, 0, 0, -160, -160, -160, -160, 0, 0, 0, -160, -160, -160, 0, 0, 0, 0, -160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -160, -160, 0, 0, -160, 0, 0, 0, 0, -160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -160, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 222
        0, -385, 0, 0, 0, 0, -385, 0, 0, 0, 0, -385, -385, -385, -385, 0, 0, 0, -385, -385, -385, 0, 0, 0, -385, -385, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -385, -385, 0, 0, -385, 0, 0, 0, 0, -385, 0, 0, 0, 0, 0, 0, -385, 0, 0, 0, 0, -385, 0, 0, 0, 0, 0, 0, 0, 0, 0, -385, 0, -385, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 223
        0, -161, 0, 0, 0, 0, -161, 0, 0, 0, 0, -161, -161, -161, -161, 0, 0, 0, -161, -161, -161, 0, 0, 0, 0, -161, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -161, -161, 0, 0, -161, 0, 0, 0, 0, -161, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -161, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -161, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 224
        0, 0, 0, 0, 0, 0, 288, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 225
        0, -364, 0, 0, 0, 0, -364, 0, 0, 0, 0, -364, -364, -364, -364, 0, 0, 0, -364, -364, -364, 0, 0, 0, -364, -364, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -364, -364, 0, 0, -364, 0, 0, 0, 0, -364, 0, 0, 0, 0, 0, 0, -364, 0, 0, 0, 0, -364, 0, 0, 0, 0, 0, 0, 0, 0, 0, -364, 0, -364, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 226
        0, -370, 0, 0, 0, 0, -370, 0, 0, 0, 0, -370, -370, -370, -370, 0, 0, 0, -370, -370, -370, 0, 0, 0, -370, -370, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -370, -370, 0, 0, -370, 0, 0, 0, 0, -370, 0, 0, 0, 0, 0, 0, -370, 0, 0, 0, 0, -370, 0, 0, 0, 0, 0, 0, 0, 0, 0, -370, 0, -370, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 227
        0, -372, 0, 0, 0, 0, -372, 0, 0, 0, 0, -372, -372, -372, -372, 0, 0, 0, -372, -372, -372, 0, 0, 0, -372, -372, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -372, -372, 0, 0, -372, 0, 0, 0, 0, -372, 0, 0, 0, 0, 0, 0, -372, 0, 0, 0, 0, -372, 0, 0, 0, 0, 0, 0, 0, 0, 0, -372, 0, -372, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 228
        0, -373, 0, 0, 0, 0, -373, 0, 0, 0, 0, -373, -373, -373, -373, 0, 0, 0, -373, -373, -373, 0, 0, 0, -373, -373, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -373, -373, 0, 0, -373, 0, 0, 0, 0, -373, 0, 0, 0, 0, 0, 0, -373, 0, 0, 0, 0, -373, 0, 0, 0, 0, 0, 0, 0, 0, 0, -373, 0, -373, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 229
        0, -374, 0, 0, 0, 0, -374, 0, 0, 0, 0, -374, -374, -374, -374, 0, 0, 0, -374, -374, -374, 0, 0, 0, -374, -374, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -374, -374, 0, 0, -374, 0, 0, 0, 0, -374, 0, 0, 0, 0, 0, 0, -374, 0, 0, 0, 0, -374, 0, 0, 0, 0, 0, 0, 0, 0, 0, -374, 0, -374, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 230
        0, -371, 0, 0, 0, 0, -371, 0, 0, 0, 0, -371, -371, -371, -371, 0, 0, 0, -371, -371, -371, 0, 0, 0, -371, -371, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -371, -371, 0, 0, -371, 0, 0, 0, 0, -371, 0, 0, 0, 0, 0, 0, -371, 0, 0, 0, 0, -371, 0, 0, 0, 0, 0, 0, 0, 0, 0, -371, 0, -371, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 231
        0, -365, 0, 0, 0, 0, -365, 0, 0, 0, 0, -365, -365, -365, -365, 0, 0, 0, -365, -365, -365, 0, 0, 0, -365, -365, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -365, -365, 0, 0, -365, 0, 0, 0, 0, -365, 0, 0, 0, 0, 0, 0, -365, 0, 0, 0, 0, -365, 0, 0, 0, 0, 0, 0, 0, 0, 0, -365, 0, -365, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 232
        0, -367, 0, 0, 0, 0, -367, 0, 0, 0, 0, -367, -367, -367, -367, 0, 0, 0, -367, -367, -367, 0, 0, 0, -367, -367, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -367, -367, 0, 0, -367, 0, 0, 0, 0, -367, 0, 0, 0, 0, 0, 0, -367, 0, 0, 0, 0, -367, 0, 0, 0, 0, 0, 0, 0, 0, 0, -367, 0, -367, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 233
        0, -368, 0, 0, 0, 0, -368, 0, 0, 0, 0, -368, -368, -368, -368, 0, 0, 0, -368, -368, -368, 0, 0, 0, -368, -368, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -368, -368, 0, 0, -368, 0, 0, 0, 0, -368, 0, 0, 0, 0, 0, 0, -368, 0, 0, 0, 0, -368, 0, 0, 0, 0, 0, 0, 0, 0, 0, -368, 0, -368, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 234
        0, -369, 0, 0, 0, 0, -369, 0, 0, 0, 0, -369, -369, -369, -369, 0, 0, 0, -369, -369, -369, 0, 0, 0, -369, -369, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -369, -369, 0, 0, -369, 0, 0, 0, 0, -369, 0, 0, 0, 0, 0, 0, -369, 0, 0, 0, 0, -369, 0, 0, 0, 0, 0, 0, 0, 0, 0, -369, 0, -369, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 235
        0, -366, 0, 0, 0, 0, -366, 0, 0, 0, 0, -366, -366, -366, -366, 0, 0, 0, -366, -366, -366, 0, 0, 0, -366, -366, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -366, -366, 0, 0, -366, 0, 0, 0, 0, -366, 0, 0, 0, 0, 0, 0, -366, 0, 0, 0, 0, -366, 0, 0, 0, 0, 0, 0, 0, 0, 0, -366, 0, -366, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 236
        0, -375, 0, 0, 0, 0, -375, 0, 0, 0, 0, -375, -375, -375, -375, 0, 0, 0, -375, -375, -375, 0, 0, 0, -375, -375, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -375, -375, 0, 0, -375, 0, 0, 0, 0, -375, 0, 0, 0, 0, 0, 0, -375, 0, 0, 0, 0, -375, 0, 0, 0, 0, 0, 0, 0, 0, 0, -375, 0, -375, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 237
        0, -376, 0, 0, 0, 0, -376, 0, 0, 0, 0, -376, -376, -376, -376, 0, 0, 0, -376, -376, -376, 0, 0, 0, -376, -376, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -376, -376, 0, 0, -376, 0, 0, 0, 0, -376, 0, 0, 0, 0, 0, 0, -376, 0, 0, 0, 0, -376, 0, 0, 0, 0, 0, 0, 0, 0, 0, -376, 0, -376, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 238
        0, -168, 0, 0, 0, 0, -168, 0, 0, 0, 0, -168, -168, -168, -168, 0, 0, 0, -168, -168, -168, 0, 0, 0, 0, -168, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -168, -168, 0, 0, -168, 0, 0, 0, 0, -168, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -168, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -168, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 239
        0, -169, 0, 0, 0, 0, -169, 0, 0, 0, 0, -169, -169, -169, -169, 0, 0, 0, -169, -169, -169, 0, 0, 0, 0, -169, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -169, -169, 0, 0, -169, 0, 0, 0, 0, -169, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -169, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -169, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 240
        0, -175, 0, 0, 0, 0, -175, -175, 0, 0, 0, -175, -175, -175, -175, 0, 0, -175, -175, -175, -175, 0, 0, 0, 0, -175, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -175, -175, 0, 0, -175, 0, 0, 0, 0, -175, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -175, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -175, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 241
        0, -189, 0, 0, 0, 0, -189, 0, 0, 0, 0, 25, 26, -189, 27, 0, 0, 0, 28, -189, -189, 0, 0, 0, 0, -189, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -189, -189, 0, 0, 0, 0, 0, 0, 0, -189, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -189, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 242
        0, 0, 0, 0, 0, 0, -216, 0, 0, 0, 0, 0, 0, -216, 0, 0, 0, 0, 0, 0, -216, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -216, -216, 0, 0, 0, 0, 0, 0, 0, -216, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -216, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 243
        0, -188, 0, 0, 0, 0, -188, 0, 0, 0, 0, 25, 26, -188, 27, 0, 0, 0, 28, -188, -188, 0, 0, 0, 0, -188, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -188, -188, 0, 0, 0, 0, 0, 0, 0, -188, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -188, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 244
        -261, -261, 0, 0, -261, -261, -261, -261, 0, 0, 0, -261, -261, -261, -261, 0, -261, -261, -261, -261, -261, 0, 0, 0, 0, -261, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -261, -261, -261, 0, 0, -261, 0, 0, 0, 0, -261, -261, 0, 0, 0, 0, 0, 0, 0, 0, 0, -261, -261, -261, 0, 0, 0, 0, 0, -261, 0, 0, -261, -261, -261, -261, -261, -261, -261, -261, -261, -261, 0,
        // State 245
        -260, -260, 0, 0, -260, -260, -260, -260, 0, 0, 0, -260, -260, -260, -260, 0, -260, -260, -260, -260, -260, 0, 0, 0, 0, -260, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -260, -260, -260, 0, 0, -260, 0, 0, 0, 0, -260, -260, 0, 0, 0, 0, 0, 0, 0, 0, 0, -260, -260, -260, 0, 0, 0, 0, 0, -260, 0, 0, -260, -260, -260, -260, -260, -260, -260, -260, -260, -260, 0,
        // State 246
        -300, -300, 0, 0, -300, -300, -300, -300, 0, 0, 0, -300, -300, -300, -300, 0, -300, -300, -300, -300, -300, 0, 0, 0, 0, -300, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -300, -300, -300, 0, 0, -300, 0, 0, 0, 0, -300, -300, 0, 0, 0, 0, 0, 0, 0, 0, 0, -300, -300, -300, 0, 0, 0, 0, 0, -300, 0, 0, -300, -300, -300, -300, -300, -300, -300, -300, -300, -300, 0,
        // State 247
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 289, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 248
        0, -181, 0, 0, 0, 0, -181, -181, 0, 0, 0, -181, -181, -181, -181, 0, 0, -181, -181, -181, -181, 0, 0, 0, 0, -181, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -181, -181, 0, 0, -181, 0, 0, 0, 0, -181, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -181, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -181, -181, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 249
        0, -273, 0, 0, -273, 0, -273, -273, 0, 0, 0, -273, -273, -273, -273, 0, 0, -273, -273, -273, -273, 0, 0, 0, 0, -273, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -273, -273, 0, 0, -273, 0, 0, 0, 0, -273, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -273, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -273, -273, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 250
        0, 0, 0, 0, 0, 0, -132, 0, 0, 0, 0, 0, 0, 291, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 251
        -248, -248, -248, 0, -248, -248, -248, -248, 0, 0, 0, -248, -248, -248, -248, 0, -248, -248, -248, -248, -248, 0, 0, 0, 0, -248, -248, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -248, -248, -248, -248, 0, -248, -248, 0, -248, -248, -248, -248, 0, -248, -248, -248, -248, 0, -248, -248, -248, -248, -248, -248, 0, 0, -248, 0, -248, -248, -248, -248, -248, -248, -248, -248, -248, -248, -248, -248, -248, -248, -248,
        // State 252
        0, 0, -30, 0, 0, -30, -30, 0, 0, 0, 0, -30, 0, 0, -30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -30, 0, 0, -30, 0, 0, -30, 0, -30, -30, 0, -30, 0, -30, -30, -30, -30, 0, -30, -30, -30, -30, 0, -30, 0, 0, -30, 0, -30, -30, -30, -30, -30, 0, 0, -30, -30, -30, -30, -30, -30, -30, 0,
        // State 253
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 293, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 254
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 294, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 255
        -255, -255, 0, 0, -255, -255, -255, -255, 0, 0, 0, -255, -255, -255, -255, 0, -255, -255, -255, -255, -255, 0, 0, 0, 0, -255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -255, -255, -255, 0, 0, -255, 0, 0, 0, 0, -255, -255, 0, 0, 0, 0, 0, 0, 0, 0, 0, -255, -255, -255, 0, 0, 0, 0, 0, -255, 0, 0, -255, -255, -255, -255, -255, -255, -255, -255, -255, -255, 0,
        // State 256
        -256, -256, 0, 0, -256, -256, -256, -256, 0, 0, 0, -256, -256, -256, -256, 0, -256, -256, -256, -256, -256, 0, 0, 0, 0, -256, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -256, -256, -256, 0, 0, -256, 0, 0, 0, 0, -256, -256, 0, 0, 0, 0, 0, 0, 0, 0, 0, -256, -256, -256, 0, 0, 0, 0, 0, -256, 0, 0, -256, -256, -256, -256, -256, -256, -256, -256, -256, -256, 0,
        // State 257
        0, -270, 0, 0, -270, 0, -270, -270, 0, 0, 0, -270, -270, -270, -270, 0, 0, -270, -270, -270, -270, 0, 0, 0, 0, -270, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -270, -270, 0, 0, -270, 0, 0, 0, 0, -270, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -270, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -270, -270, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 258
        0, -269, 0, 0, -269, 0, -269, -269, 0, 0, 0, -269, -269, -269, -269, 0, 0, -269, -269, -269, -269, 0, 0, 0, 0, -269, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -269, -269, 0, 0, -269, 0, 0, 0, 0, -269, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -269, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -269, -269, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 259
        0, 0, 0, 0, 0, 0, -213, 0, 0, 0, 0, 0, 0, -213, 0, 0, 0, 0, 0, 0, -213, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -213, -213, 0, 0, 0, 0, 0, 0, 0, -213, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -213, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 260
        0, 0, 0, 0, 0, 0, -214, 0, 0, 0, 0, 0, 0, -214, 0, 0, 0, 0, 0, 0, -214, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -214, -214, 0, 0, 0, 0, 0, 0, 0, -214, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -214, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 261
        0, 0, 0, 0, 0, 0, -211, 0, 0, 0, 0, 0, 0, -211, 0, 0, 0, 0, 0, 0, -211, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -211, -211, 0, 0, 0, 0, 0, 0, 0, -211, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -211, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 262
        0, 0, 0, 0, 0, 0, -210, 0, 0, 0, 0, 0, 0, -210, 0, 0, 0, 0, 0, 0, -210, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -210, -210, 0, 0, 0, 0, 0, 0, 0, -210, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -210, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 263
        0, -271, 0, 0, -271, 0, -271, -271, 0, 0, 0, -271, -271, -271, -271, 0, 0, -271, -271, -271, -271, 0, 0, 0, 0, -271, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -271, -271, 0, 0, -271, 0, 0, 0, 0, -271, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -271, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -271, -271, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 264
        -239, -239, 0, 0, -239, -239, -239, -239, 0, 0, 0, -239, -239, -239, -239, 0, -239, -239, -239, -239, -239, 0, 0, 0, 0, -239, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -239, -239, -239, 0, 0, -239, 0, 0, 0, 0, -239, -239, 0, 0, 0, 0, 0, 0, 0, 0, 0, -239, -239, -239, 0, 0, 0, 0, 0, -239, 0, 0, -239, -239, -239, -239, -239, -239, -239, -239, -239, -239, 0,
        // State 265
        0, 0, 0, 0, 0, 0, -205, 0, 0, 0, 0, 0, 0, -205, 0, 0, 0, 0, 0, 0, -205, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -205, -205, 0, 0, 0, 0, 0, 0, 0, -205, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -205, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 266
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 267
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 317, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 268
        0, 0, 0, 0, 0, 0, -226, 0, 0, 0, 0, 0, 0, -226, 0, 0, 0, 0, 0, 0, -226, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -226, -226, 0, 0, 0, 0, 0, 0, 0, -226, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -226, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 269
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 107, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 270
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 318, 0, 0, 0, 0, 0, 0, 0, 0, 108, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 271
        0, 0, 0, 0, 0, 0, 323, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 272
        0, 0, 0, 0, 0, 0, -134, 0, 0, 0, 0, 0, 0, 324, 0, 0, 0, 0, 94, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 273
        0, 0, 0, 0, 0, 0, -94, 0, 0, 0, 0, 0, 0, -94, 0, 0, 0, 0, 0, 0, -94, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -94, -94, 0, 0, 0, 0, 0, 0, 0, -94, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -94, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 274
        0, 0, 0, 0, 0, 0, -93, 0, 0, 0, 0, 0, 0, -93, 0, 0, 0, 0, 0, 0, -93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -93, -93, 0, 0, 0, 0, 0, 0, 0, -93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -93, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 275
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -87, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -87, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 276
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 327, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -111, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 277
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 328, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 278
        0, 0, -381, 0, 0, -381, 0, 0, 0, 0, 0, -381, 0, 0, -381, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -381, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -381, 0, 0, -381, 0, 0, -381, 0, -381, -381, 0, -381, 0, -381, -381, -381, -381, 0, -381, -381, -381, -381, 0, -381, 0, 0, -381, 0, -381, -381, -381, -381, -381, 0, 0, -381, -381, -381, -381, -381, -381, -381, 0,
        // State 279
        0, 0, -393, 0, 0, -393, 0, 0, 0, 0, 0, -393, 0, 0, -393, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -393, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -393, 0, 0, -393, 0, 0, -393, 0, -393, -393, 0, -393, -393, -393, -393, -393, -393, 0, -393, -393, -393, -393, 0, -393, 0, 0, -393, -393, -393, -393, -393, -393, -393, 0, 0, -393, -393, -393, -393, -393, -393, -393, 0,
        // State 280
        0, 0, -392, 0, 0, -392, 0, 0, 0, 0, 0, -392, 0, 0, -392, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -392, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -392, 0, 0, -392, 0, 0, -392, 0, -392, -392, 0, -392, -392, -392, -392, -392, -392, 0, -392, -392, -392, -392, 0, -392, 0, 0, -392, -392, -392, -392, -392, -392, -392, 0, 0, -392, -392, -392, -392, -392, -392, -392, 0,
        // State 281
        0, 0, -380, 0, 0, -380, 0, 0, 0, 0, 0, -380, 0, 0, -380, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -380, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -380, 0, 0, -380, 0, 0, -380, 0, -380, -380, 0, -380, 0, -380, -380, -380, -380, 0, -380, -380, -380, -380, 0, -380, 0, 0, -380, 0, -380, -380, -380, -380, -380, 0, 0, -380, -380, -380, -380, -380, -380, -380, 0,
        // State 282
        0, 0, 0, 0, 0, 0, -222, 0, 0, 0, 0, 0, 0, -222, 0, 0, 0, 0, 0, 0, -222, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -222, -222, 0, 0, 0, 0, 0, 0, 0, -222, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -222, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 283
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 335, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -121, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 284
        -246, -246, -246, 0, -246, -246, -246, -246, 0, 0, 0, -246, -246, -246, -246, 0, -246, -246, -246, -246, -246, 0, 0, 0, 0, -246, -246, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -246, -246, -246, -246, 0, -246, -246, 0, -246, -246, -246, -246, 0, -246, -246, -246, -246, 0, -246, -246, -246, -246, -246, -246, 0, 0, -246, 0, -246, -246, -246, -246, -246, -246, -246, -246, -246, -246, -246, -246, -246, -246, -246,
        // State 285
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -22, 0, 0, 0, -22, 0, 0, 0, 0, 0, 0, -22, 0,
        // State 286
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 112, 0, 0, 0, 0, 0, 113, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 287
        0, -363, 0, 0, 0, 0, -363, 0, 0, 0, 0, -363, -363, -363, -363, 0, 0, 0, -363, -363, -363, 0, 0, 0, -363, -363, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -363, -363, 0, 0, -363, 0, 0, 0, 0, -363, 0, 0, 0, 0, 0, 0, -363, 0, 0, 0, 0, -363, 0, 0, 0, 0, 0, 0, 0, 0, 0, -363, 0, -363, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 288
        -259, -259, 0, 0, -259, -259, -259, -259, 0, 0, 0, -259, -259, -259, -259, 0, -259, -259, -259, -259, -259, 0, 0, 0, 0, -259, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -259, -259, -259, 0, 0, -259, 0, 0, 0, 0, -259, -259, 0, 0, 0, 0, 0, 0, 0, 0, 0, -259, -259, -259, 0, 0, 0, 0, 0, -259, 0, 0, -259, -259, -259, -259, -259, -259, -259, -259, -259, -259, 0,
        // State 289
        0, 0, 0, 0, 0, 0, -99, 0, 0, 0, 0, 0, 0, -99, 0, 0, 0, 0, 0, 0, -99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -99, -99, 0, 0, 0, 0, 0, 0, 0, -99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -99, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 290
        0, 0, -31, 0, 0, -31, -31, 0, 0, 0, 0, -31, 0, 0, -31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -31, 0, 0, -31, 0, 0, -31, 0, -31, -31, 0, -31, 0, -31, -31, -31, -31, 0, -31, -31, -31, -31, 0, -31, 0, 0, -31, 0, -31, -31, -31, -31, -31, 0, 0, -31, -31, -31, -31, -31, -31, -31, 0,
        // State 291
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 338, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -125, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 292
        -258, -258, 0, 0, -258, -258, -258, -258, 0, 0, 0, -258, -258, -258, -258, 0, -258, -258, -258, -258, -258, 0, 0, 0, 0, -258, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -258, -258, -258, 0, 0, -258, 0, 0, 0, 0, -258, -258, 0, 0, 0, 0, 0, 0, 0, 0, 0, -258, -258, -258, 0, 0, 0, 0, 0, -258, 0, 0, -258, -258, -258, -258, -258, -258, -258, -258, -258, -258, 0,
        // State 293
        0, 0, -27, 0, 0, -27, 0, 0, 0, 0, 0, -27, 0, 0, -27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -27, 0, -27, -27, 0, 0, -27, 0, -27, -27, 0, -27, 0, -27, -27, -27, -27, 0, -27, -27, -27, -27, 0, -27, 0, 0, -27, 0, -27, -27, 0, -27, -27, 0, 0, -27, -27, -27, -27, -27, -27, -27, 0,
        // State 294
        0, -141, 0, 0, 0, 0, -141, 0, 0, 0, 0, 0, 0, -141, 0, 0, 0, 0, 0, -141, -141, 0, 0, 0, 0, -141, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -141, -141, 0, 0, 73, 0, 0, 0, 0, -141, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -141, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -141, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 295
        0, -147, 0, 0, 0, 0, -147, 0, 0, 0, 0, 74, 75, -147, 76, 0, 0, 0, 77, -147, -147, 0, 0, 0, 0, -147, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -147, -147, 0, 0, -147, 0, 0, 0, 0, -147, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -147, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -147, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 296
        0, -153, 0, 0, 0, 0, -153, 0, 0, 0, 0, -153, -153, -153, -153, 0, 0, 0, -153, -153, -153, 0, 0, 0, 0, -153, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -153, -153, 0, 0, -153, 0, 0, 0, 0, -153, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -153, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -153, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 297
        0, -154, 0, 0, 0, 0, -154, 0, 0, 0, 0, -154, -154, -154, -154, 0, 0, 0, -154, -154, -154, 0, 0, 0, 0, -154, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -154, -154, 0, 0, -154, 0, 0, 0, 0, -154, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -154, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -154, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 298
        0, -155, 0, 0, 0, 0, -155, 0, 0, 0, 0, -155, -155, -155, -155, 0, 0, 0, -155, -155, -155, 0, 0, 0, 0, -155, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -155, -155, 0, 0, -155, 0, 0, 0, 0, -155, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -155, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -155, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 299
        0, -156, 0, 0, 0, 0, -156, 0, 0, 0, 0, -156, -156, -156, -156, 0, 0, 0, -156, -156, -156, 0, 0, 0, 0, -156, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -156, -156, 0, 0, -156, 0, 0, 0, 0, -156, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -156, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -156, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 300
        0, -165, 0, 0, 0, 0, -165, 0, 0, 0, 0, -165, -165, -165, -165, 0, 0, 0, -165, -165, -165, 0, 0, 0, 0, -165, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -165, -165, 0, 0, -165, 0, 0, 0, 0, -165, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -165, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -165, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 301
        0, -166, 0, 0, 0, 0, -166, 0, 0, 0, 0, -166, -166, -166, -166, 0, 0, 0, -166, -166, -166, 0, 0, 0, 0, -166, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -166, -166, 0, 0, -166, 0, 0, 0, 0, -166, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -166, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -166, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 302
        0, -173, 0, 0, 0, 0, -173, -173, 0, 0, 0, -173, -173, -173, -173, 0, 0, -173, -173, -173, -173, 0, 0, 0, 0, -173, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -173, -173, 0, 0, -173, 0, 0, 0, 0, -173, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -173, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -173, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 303
        0, -186, 0, 0, 0, 0, -186, 0, 0, 0, 0, 74, 75, -186, 76, 0, 0, 0, 77, -186, -186, 0, 0, 0, 0, -186, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -186, -186, 0, 0, 0, 0, 0, 0, 0, -186, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -186, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 304
        0, 0, 0, 0, 0, 0, -202, 0, 0, 0, 0, 0, 0, -202, 0, 0, 0, 0, 0, 0, -202, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -202, -202, 0, 0, 0, 0, 0, 0, 0, -202, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -202, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 305
        0, -185, 0, 0, 0, 0, -185, 0, 0, 0, 0, 74, 75, -185, 76, 0, 0, 0, 77, -185, -185, 0, 0, 0, 0, -185, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -185, -185, 0, 0, 0, 0, 0, 0, 0, -185, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -185, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 306
        -254, -254, 0, 0, -254, -254, -254, -254, 0, 0, 0, -254, -254, -254, -254, 0, -254, -254, -254, -254, -254, 0, 0, 0, 0, -254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -254, -254, -254, 0, 0, -254, 0, 0, 0, 0, -254, -254, 0, 0, 0, 0, 0, 0, 0, 0, 0, -254, -254, -254, 0, 0, 0, 0, 0, -254, 0, 0, -254, -254, -254, -254, -254, -254, -254, -254, -254, -254, 0,
        // State 307
        -253, -253, 0, 0, -253, -253, -253, -253, 0, 0, 0, -253, -253, -253, -253, 0, -253, -253, -253, -253, -253, 0, 0, 0, 0, -253, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -253, -253, -253, 0, 0, -253, 0, 0, 0, 0, -253, -253, 0, 0, 0, 0, 0, 0, 0, 0, 0, -253, -253, -253, 0, 0, 0, 0, 0, -253, 0, 0, -253, -253, -253, -253, -253, -253, -253, -253, -253, -253, 0,
        // State 308
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 339, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 309
        0, -179, 0, 0, 0, 0, -179, -179, 0, 0, 0, -179, -179, -179, -179, 0, 0, -179, -179, -179, -179, 0, 0, 0, 0, -179, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -179, -179, 0, 0, -179, 0, 0, 0, 0, -179, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -179, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -179, -179, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 310
        0, -267, 0, 0, -267, 0, -267, -267, 0, 0, 0, -267, -267, -267, -267, 0, 0, -267, -267, -267, -267, 0, 0, 0, 0, -267, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -267, -267, 0, 0, -267, 0, 0, 0, 0, -267, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -267, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -267, -267, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 311
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 340, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 312
        0, 0, 0, 0, 0, 0, -212, 0, 0, 0, 0, 0, 0, -212, 0, 0, 0, 0, 0, 0, -212, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -212, -212, 0, 0, 0, 0, 0, 0, 0, -212, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -212, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 313
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 117, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 314
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 341, 0, 0, 0, 0, 0, 0, 0, 0, 118, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 315
        0, 0, 0, 0, 0, 0, -208, 0, 0, 0, 0, 0, 0, -208, 0, 0, 0, 0, 0, 0, -208, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -208, -208, 0, 0, 0, 0, 0, 0, 0, -208, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -208, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 316
        0, 0, 0, 0, 0, 0, -77, 0, 0, 0, 0, 0, 0, -77, 0, 0, 0, 0, 0, 0, -77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -77, -77, 0, 0, 0, 0, 0, 0, 0, -77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -77, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 317
        0, 0, 0, 0, 0, 0, -218, 0, 0, 0, 0, 0, 0, -218, 0, 0, 0, 0, 0, 0, -218, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -218, -218, 0, 0, 0, 0, 0, 0, 0, -218, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -218, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 318
        0, 0, 0, 0, 0, 0, -91, 0, 0, 0, 0, 0, 0, -91, 0, 0, 0, 0, 0, 0, -91, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -91, -91, 0, 0, 0, 0, 0, 0, 0, -91, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -91, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 319
        0, 0, 0, 0, 0, 0, -347, 0, 0, 0, 0, 0, 0, -347, 0, 0, 0, 0, -347, 0, 0, 0, 0, 0, -347, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -347, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 320
        0, 0, 0, 0, 0, 0, -361, 0, 0, 0, 0, 0, 0, -361, 0, 0, 0, 0, -361, 0, 0, 0, 0, 0, -361, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -361, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 321
        0, 0, 0, 0, 0, 0, -135, 0, 0, 0, 0, 0, 0, 345, 0, 0, 0, 0, 94, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 322
        0, 0, -357, 0, 0, -357, -357, 0, 0, 0, 0, -357, 0, -357, -357, 0, 0, 0, -357, 0, 0, 0, 0, 0, -357, 0, -357, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -357, 0, 0, -357, 0, 0, -357, 0, -357, -357, 0, -357, 0, -357, -357, -357, -357, -357, -357, -357, -357, -357, 0, -357, 0, 0, -357, 0, -357, -357, -357, -357, -357, 0, 0, -357, -357, -357, -357, -357, -357, -357, -357,
        // State 323
        0, 0, -38, 0, 0, -38, -38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -38, 0, 0, 0, 0, 0, 0, -38, 0, 0, 0, 0, 0, 0, 0, 0, 0, -38, 0, 0, 0, 0, 0, 0, 0, -38, 0, 0, 0, 0, 0, -38, -38, -38, -38, -38, -38, -38, 0,
        // State 324
        0, 0, 0, 0, 0, 0, -92, 0, 0, 0, 0, 0, 0, -92, 0, 0, 0, 0, 0, 0, -92, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -92, -92, 0, 0, 0, 0, 0, 0, 0, -92, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -92, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 325
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 346, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -113, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 326
        0, 0, -12, 0, 0, -12, 0, 0, 0, 0, 0, -12, 0, 0, -12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -12, 0, 0, -12, 0, 0, -12, 0, -12, -12, 0, -12, -12, -12, -12, -12, -12, 0, -12, -12, -12, -12, 0, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, 0, -12, -12, -12, -12, -12, -12, -12, -12, 0,
        // State 327
        0, 0, 0, 0, 0, 0, -345, 0, 0, 0, 0, 0, 0, -345, 0, 0, 0, 0, 0, 0, -345, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -345, -345, 0, 0, 0, 0, 0, 0, 0, -345, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -345, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 328
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -85, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 329
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -86, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -86, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 330
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 349, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -127, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 331
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 350, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 332
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -80, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 333
        0, 0, 0, 0, 0, 0, -105, 0, 0, 0, 0, 0, 0, -105, 0, 0, 0, 0, 0, 0, -105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -105, -105, 0, 0, 0, 0, 0, 0, 0, -105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -105, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 334
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -23, 0, 0, 0, -23, 0, 0, 0, 0, 0, 0, -23, 0,
        // State 335
        0, 0, 0, 0, 0, 0, -98, 0, 0, 0, 0, 0, 0, -98, 0, 0, 0, 0, 0, 0, -98, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -98, -98, 0, 0, 0, 0, 0, 0, 0, -98, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -98, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 336
        0, 0, 0, 0, 0, 0, -103, 0, 0, 0, 0, 0, 0, -103, 0, 0, 0, 0, 0, 0, -103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -103, -103, 0, 0, 0, 0, 0, 0, 0, -103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -103, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 337
        0, 0, -28, 0, 0, -28, 0, 0, 0, 0, 0, -28, 0, 0, -28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -28, 0, -28, -28, 0, 0, -28, 0, -28, -28, 0, -28, 0, -28, -28, -28, -28, 0, -28, -28, -28, -28, 0, -28, 0, 0, -28, 0, -28, -28, 0, -28, -28, 0, 0, -28, -28, -28, -28, -28, -28, -28, 0,
        // State 338
        -252, -252, 0, 0, -252, -252, -252, -252, 0, 0, 0, -252, -252, -252, -252, 0, -252, -252, -252, -252, -252, 0, 0, 0, 0, -252, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -252, -252, -252, 0, 0, -252, 0, 0, 0, 0, -252, -252, 0, 0, 0, 0, 0, 0, 0, 0, 0, -252, -252, -252, 0, 0, 0, 0, 0, -252, 0, 0, -252, -252, -252, -252, -252, -252, -252, -252, -252, -252, 0,
        // State 339
        -251, -251, 0, 0, -251, -251, -251, -251, 0, 0, 0, -251, -251, -251, -251, 0, -251, -251, -251, -251, -251, 0, 0, 0, 0, -251, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -251, -251, -251, 0, 0, -251, 0, 0, 0, 0, -251, -251, 0, 0, 0, 0, 0, 0, 0, 0, 0, -251, -251, -251, 0, 0, 0, 0, 0, -251, 0, 0, -251, -251, -251, -251, -251, -251, -251, -251, -251, -251, 0,
        // State 340
        0, 0, 0, 0, 0, 0, -204, 0, 0, 0, 0, 0, 0, -204, 0, 0, 0, 0, 0, 0, -204, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -204, -204, 0, 0, 0, 0, 0, 0, 0, -204, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -204, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 341
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 357, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 342
        0, 0, 0, 0, 0, 0, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 343
        0, 0, 0, 0, 0, 0, -217, 0, 0, 0, 0, 0, 0, -217, 0, 0, 0, 0, 0, 0, -217, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -217, -217, 0, 0, 0, 0, 0, 0, 0, -217, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -217, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 344
        0, 0, -39, 0, 0, -39, -39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -39, 0, 0, 0, 0, 0, 0, -39, 0, 0, 0, 0, 0, 0, 0, 0, 0, -39, 0, 0, 0, 0, 0, 0, 0, -39, 0, 0, 0, 0, 0, -39, -39, -39, -39, -39, -39, -39, 0,
        // State 345
        0, 0, -13, 0, 0, -13, 0, 0, 0, 0, 0, -13, 0, 0, -13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -13, 0, 0, -13, 0, 0, -13, 0, -13, -13, 0, -13, -13, -13, -13, -13, -13, 0, -13, -13, -13, -13, 0, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, 0, -13, -13, -13, -13, -13, -13, -13, -13, 0,
        // State 346
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -84, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 347
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 358, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -129, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 348
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -35, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 349
        0, 0, 0, 0, 0, 0, -221, 0, 0, 0, 0, 0, 0, -221, 0, 0, 0, 0, 0, 0, -221, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -221, -221, 0, 0, 0, 0, 0, 0, 0, -221, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -221, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 350
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 351
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -194, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -194, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 352
        0, 0, 0, 0, 0, 0, -102, 0, 0, 0, 0, 0, 0, -102, 0, 0, 0, 0, 0, 0, -102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -102, -102, 0, 0, 0, 0, 0, 0, 0, -102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -102, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 353
        0, 0, 0, 0, 0, 0, -97, 0, 0, 0, 0, 0, 0, -97, 0, 0, 0, 0, 0, 0, -97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -97, -97, 0, 0, 0, 0, 0, 0, 0, -97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -97, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 354
        0, 0, 0, 0, 0, 0, 125, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 355
        0, 0, 0, 0, 0, 0, -203, 0, 0, 0, 0, 0, 0, -203, 0, 0, 0, 0, 0, 0, -203, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -203, -203, 0, 0, 0, 0, 0, 0, 0, -203, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -203, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 356
        0, 0, 0, 0, 0, 0, -207, 0, 0, 0, 0, 0, 0, -207, 0, 0, 0, 0, 0, 0, -207, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -207, -207, 0, 0, 0, 0, 0, 0, 0, -207, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -207, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 357
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -36, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 358
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -79, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -79, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 359
        0, 0, 0, 0, 0, 0, -96, 0, 0, 0, 0, 0, 0, -96, 0, 0, 0, 0, 0, 0, -96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -96, -96, 0, 0, 0, 0, 0, 0, 0, -96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -96, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 360
        0, 0, 0, 0, 0, 0, -101, 0, 0, 0, 0, 0, 0, -101, 0, 0, 0, 0, 0, 0, -101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -101, -101, 0, 0, 0, 0, 0, 0, 0, -101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -101, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 361
        0, 0, 0, 0, 0, 0, -223, 0, 0, 0, 0, 0, 0, -223, 0, 0, 0, 0, 0, 0, -223, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -223, -223, 0, 0, 0, 0, 0, 0, 0, -223, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -223, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 362
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -193, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -193, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 363
        0, 0, 0, 0, 0, 0, -100, 0, 0, 0, 0, 0, 0, -100, 0, 0, 0, 0, 0, 0, -100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -100, -100, 0, 0, 0, 0, 0, 0, 0, -100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -100, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 364
        0, 0, 0, 0, 0, 0, -209, 0, 0, 0, 0, 0, 0, -209, 0, 0, 0, 0, 0, 0, -209, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -209, -209, 0, 0, 0, 0, 0, 0, 0, -209, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -209, 0, 0, 0, 0, 0, 0, 0, 0,
    ];
    fn __action(state: i16, integer: usize) -> i16 {
        __ACTION[(state as usize) * 83 + integer]
    }
    const __EOF_ACTION: &[i16] = &[
        // State 0
        -116,
        // State 1
        -118,
        // State 2
        -272,
        // State 3
        0,
        // State 4
        0,
        // State 5
        0,
        // State 6
        0,
        // State 7
        0,
        // State 8
        0,
        // State 9
        0,
        // State 10
        0,
        // State 11
        0,
        // State 12
        0,
        // State 13
        0,
        // State 14
        0,
        // State 15
        0,
        // State 16
        0,
        // State 17
        -220,
        // State 18
        0,
        // State 19
        0,
        // State 20
        0,
        // State 21
        0,
        // State 22
        0,
        // State 23
        0,
        // State 24
        0,
        // State 25
        0,
        // State 26
        0,
        // State 27
        0,
        // State 28
        0,
        // State 29
        0,
        // State 30
        0,
        // State 31
        0,
        // State 32
        0,
        // State 33
        0,
        // State 34
        0,
        // State 35
        0,
        // State 36
        0,
        // State 37
        0,
        // State 38
        -274,
        // State 39
        0,
        // State 40
        0,
        // State 41
        -266,
        // State 42
        0,
        // State 43
        0,
        // State 44
        0,
        // State 45
        0,
        // State 46
        0,
        // State 47
        0,
        // State 48
        0,
        // State 49
        0,
        // State 50
        0,
        // State 51
        0,
        // State 52
        0,
        // State 53
        -206,
        // State 54
        0,
        // State 55
        0,
        // State 56
        0,
        // State 57
        0,
        // State 58
        0,
        // State 59
        0,
        // State 60
        0,
        // State 61
        0,
        // State 62
        0,
        // State 63
        0,
        // State 64
        0,
        // State 65
        0,
        // State 66
        0,
        // State 67
        0,
        // State 68
        0,
        // State 69
        0,
        // State 70
        0,
        // State 71
        0,
        // State 72
        0,
        // State 73
        0,
        // State 74
        0,
        // State 75
        0,
        // State 76
        0,
        // State 77
        0,
        // State 78
        0,
        // State 79
        0,
        // State 80
        0,
        // State 81
        0,
        // State 82
        0,
        // State 83
        0,
        // State 84
        0,
        // State 85
        0,
        // State 86
        -268,
        // State 87
        0,
        // State 88
        0,
        // State 89
        0,
        // State 90
        0,
        // State 91
        0,
        // State 92
        0,
        // State 93
        0,
        // State 94
        0,
        // State 95
        0,
        // State 96
        0,
        // State 97
        0,
        // State 98
        0,
        // State 99
        0,
        // State 100
        0,
        // State 101
        0,
        // State 102
        0,
        // State 103
        0,
        // State 104
        0,
        // State 105
        0,
        // State 106
        0,
        // State 107
        0,
        // State 108
        0,
        // State 109
        0,
        // State 110
        0,
        // State 111
        0,
        // State 112
        0,
        // State 113
        0,
        // State 114
        0,
        // State 115
        0,
        // State 116
        0,
        // State 117
        0,
        // State 118
        0,
        // State 119
        0,
        // State 120
        0,
        // State 121
        0,
        // State 122
        0,
        // State 123
        0,
        // State 124
        0,
        // State 125
        -115,
        // State 126
        -82,
        // State 127
        -81,
        // State 128
        -377,
        // State 129
        -110,
        // State 130
        -190,
        // State 131
        -144,
        // State 132
        -150,
        // State 133
        -162,
        // State 134
        -170,
        // State 135
        -176,
        // State 136
        -215,
        // State 137
        -83,
        // State 138
        -257,
        // State 139
        -344,
        // State 140
        -241,
        // State 141
        -182,
        // State 142
        -242,
        // State 143
        -247,
        // State 144
        -240,
        // State 145
        -398,
        // State 146
        0,
        // State 147
        -299,
        // State 148
        0,
        // State 149
        0,
        // State 150
        0,
        // State 151
        -292,
        // State 152
        0,
        // State 153
        -290,
        // State 154
        -291,
        // State 155
        -383,
        // State 156
        -298,
        // State 157
        -296,
        // State 158
        -294,
        // State 159
        -295,
        // State 160
        -297,
        // State 161
        -286,
        // State 162
        -117,
        // State 163
        -17,
        // State 164
        -262,
        // State 165
        -263,
        // State 166
        -276,
        // State 167
        -232,
        // State 168
        -140,
        // State 169
        0,
        // State 170
        0,
        // State 171
        -231,
        // State 172
        -139,
        // State 173
        -293,
        // State 174
        -275,
        // State 175
        0,
        // State 176
        -236,
        // State 177
        -198,
        // State 178
        -230,
        // State 179
        -138,
        // State 180
        -199,
        // State 181
        -187,
        // State 182
        -142,
        // State 183
        -148,
        // State 184
        -157,
        // State 185
        -167,
        // State 186
        -174,
        // State 187
        -201,
        // State 188
        -227,
        // State 189
        -229,
        // State 190
        -137,
        // State 191
        -250,
        // State 192
        -237,
        // State 193
        -180,
        // State 194
        -238,
        // State 195
        0,
        // State 196
        -76,
        // State 197
        -228,
        // State 198
        -225,
        // State 199
        -224,
        // State 200
        0,
        // State 201
        0,
        // State 202
        0,
        // State 203
        0,
        // State 204
        0,
        // State 205
        0,
        // State 206
        0,
        // State 207
        0,
        // State 208
        -95,
        // State 209
        -277,
        // State 210
        -243,
        // State 211
        -219,
        // State 212
        0,
        // State 213
        0,
        // State 214
        0,
        // State 215
        0,
        // State 216
        -18,
        // State 217
        -143,
        // State 218
        -149,
        // State 219
        -158,
        // State 220
        -159,
        // State 221
        -160,
        // State 222
        -385,
        // State 223
        -161,
        // State 224
        0,
        // State 225
        -364,
        // State 226
        -370,
        // State 227
        -372,
        // State 228
        -373,
        // State 229
        -374,
        // State 230
        -371,
        // State 231
        -365,
        // State 232
        -367,
        // State 233
        -368,
        // State 234
        -369,
        // State 235
        -366,
        // State 236
        -375,
        // State 237
        -376,
        // State 238
        -168,
        // State 239
        -169,
        // State 240
        -175,
        // State 241
        -189,
        // State 242
        -216,
        // State 243
        -188,
        // State 244
        -261,
        // State 245
        -260,
        // State 246
        -300,
        // State 247
        0,
        // State 248
        -181,
        // State 249
        -273,
        // State 250
        0,
        // State 251
        -248,
        // State 252
        0,
        // State 253
        0,
        // State 254
        0,
        // State 255
        -255,
        // State 256
        -256,
        // State 257
        -270,
        // State 258
        -269,
        // State 259
        -213,
        // State 260
        -214,
        // State 261
        -211,
        // State 262
        -210,
        // State 263
        -271,
        // State 264
        -239,
        // State 265
        -205,
        // State 266
        0,
        // State 267
        0,
        // State 268
        -226,
        // State 269
        0,
        // State 270
        0,
        // State 271
        0,
        // State 272
        0,
        // State 273
        -94,
        // State 274
        -93,
        // State 275
        0,
        // State 276
        0,
        // State 277
        0,
        // State 278
        0,
        // State 279
        0,
        // State 280
        0,
        // State 281
        0,
        // State 282
        -222,
        // State 283
        0,
        // State 284
        -246,
        // State 285
        0,
        // State 286
        0,
        // State 287
        -363,
        // State 288
        -259,
        // State 289
        -99,
        // State 290
        0,
        // State 291
        0,
        // State 292
        -258,
        // State 293
        0,
        // State 294
        -141,
        // State 295
        -147,
        // State 296
        -153,
        // State 297
        -154,
        // State 298
        -155,
        // State 299
        -156,
        // State 300
        -165,
        // State 301
        -166,
        // State 302
        -173,
        // State 303
        -186,
        // State 304
        -202,
        // State 305
        -185,
        // State 306
        -254,
        // State 307
        -253,
        // State 308
        0,
        // State 309
        -179,
        // State 310
        -267,
        // State 311
        0,
        // State 312
        -212,
        // State 313
        0,
        // State 314
        0,
        // State 315
        -208,
        // State 316
        -77,
        // State 317
        -218,
        // State 318
        -91,
        // State 319
        0,
        // State 320
        0,
        // State 321
        0,
        // State 322
        0,
        // State 323
        0,
        // State 324
        -92,
        // State 325
        0,
        // State 326
        0,
        // State 327
        -345,
        // State 328
        0,
        // State 329
        0,
        // State 330
        0,
        // State 331
        0,
        // State 332
        0,
        // State 333
        -105,
        // State 334
        0,
        // State 335
        -98,
        // State 336
        -103,
        // State 337
        0,
        // State 338
        -252,
        // State 339
        -251,
        // State 340
        -204,
        // State 341
        0,
        // State 342
        0,
        // State 343
        -217,
        // State 344
        0,
        // State 345
        0,
        // State 346
        0,
        // State 347
        0,
        // State 348
        0,
        // State 349
        -221,
        // State 350
        0,
        // State 351
        0,
        // State 352
        -102,
        // State 353
        -97,
        // State 354
        0,
        // State 355
        -203,
        // State 356
        -207,
        // State 357
        0,
        // State 358
        0,
        // State 359
        -96,
        // State 360
        -101,
        // State 361
        -223,
        // State 362
        0,
        // State 363
        -100,
        // State 364
        -209,
    ];
    fn __goto(state: i16, nt: usize) -> i16 {
        match nt {
            7 => 97,
            10 => 1,
            13 => 66,
            16 => 70,
            18 => 39,
            21 => 109,
            23 => 95,
            38 => 176,
            39 => match state {
                10 => 198,
                48 => 261,
                57 => 268,
                69 => 289,
                88 => 312,
                102 => 335,
                115 => 353,
                119 => 359,
                _ => 177,
            },
            41 => match state {
                109 => 347,
                _ => 330,
            },
            42 => match state {
                105 => 341,
                _ => 331,
            },
            43 => match state {
                1 => 162,
                64 | 97 => 275,
                98 => 328,
                99 => 329,
                108 => 346,
                _ => 125,
            },
            44 => match state {
                97 => 325,
                _ => 276,
            },
            47 => match state {
                0..=1 | 56 | 64 | 97..=99 | 108 => 126,
                8..=9 | 12 | 46..=47 | 50 | 53 | 59 | 65 | 90..=91 | 107 | 117..=118 | 121 | 124 => 178,
                _ => 167,
            },
            49 => match state {
                0..=1 | 56 | 64 | 97..=99 | 108 => 127,
                8..=9 | 12 | 46..=47 | 50 | 53 | 59 | 65 | 90..=91 | 107 | 117..=118 | 121 | 124 => 179,
                _ => 168,
            },
            53 => match state {
                56 => 267,
                _ => 128,
            },
            54 => 277,
            55 => 129,
            56 => 214,
            57 => match state {
                87 => 311,
                _ => 253,
            },
            58 => 332,
            59 => 169,
            60 => 271,
            61 => match state {
                53 => 265,
                _ => 180,
            },
            62 => match state {
                17 => 211,
                32 => 242,
                35 => 247,
                39 => 250,
                81 => 304,
                84 => 308,
                92 => 318,
                101 => 333,
                104 => 336,
                106 => 342,
                112 => 351,
                114 => 352,
                116 => 354,
                120 => 360,
                122 => 362,
                123 => 363,
                _ => 170,
            },
            63 => 181,
            64 => 130,
            67 => match state {
                71 => 294,
                _ => 182,
            },
            68 => match state {
                22 => 217,
                _ => 131,
            },
            71 => match state {
                72 => 295,
                80 => 303,
                82 => 305,
                _ => 183,
            },
            72 => match state {
                23 => 218,
                31 => 241,
                33 => 243,
                _ => 132,
            },
            75 => match state {
                73 => 296,
                74 => 297,
                75 => 298,
                77 => 300,
                78 => 301,
                _ => 184,
            },
            76 => match state {
                24 => 219,
                25 => 220,
                26 => 221,
                28 => 238,
                29 => 239,
                _ => 133,
            },
            79 => match state {
                79 => 302,
                _ => 185,
            },
            80 => match state {
                30 => 240,
                _ => 134,
            },
            83 => match state {
                85 => 309,
                _ => 186,
            },
            84 => match state {
                36 => 248,
                _ => 135,
            },
            87 => 187,
            88 => 136,
            91 => match state {
                66 => 283,
                _ => 215,
            },
            94 => match state {
                9 => 197,
                12 => 199,
                46 => 259,
                47 => 260,
                50 => 262,
                59 => 270,
                65 => 282,
                90 => 314,
                91 => 315,
                107 => 343,
                117 => 355,
                118 => 358,
                121 => 361,
                124 => 364,
                _ => 188,
            },
            96 => 189,
            97 => match state {
                0..=1 | 56 | 64 | 97..=99 | 108 => 137,
                _ => 171,
            },
            98 => 190,
            99 => match state {
                40 | 87 => 254,
                70 => 291,
                _ => 172,
            },
            102 => match state {
                86 => 310,
                _ => 191,
            },
            103 => match state {
                11 => 59,
                20 => 65,
                49 => 90,
                55 => 91,
                2 => 164,
                18 => 212,
                38 => 249,
                41 => 255,
                54 => 266,
                _ => 138,
            },
            106 => 139,
            107 => match state {
                8..=9 | 12 | 42 | 46..=47 | 50..=51 | 53 | 59 | 65 | 71..=75 | 77..=80 | 82 | 85..=86 | 90..=91 | 107 | 117..=118 | 121 | 124 => 192,
                _ => 140,
            },
            109 => 41,
            110 => 2,
            113 => match state {
                42 => 257,
                51 => 263,
                _ => 193,
            },
            114 => match state {
                3 => 166,
                6 => 174,
                15 => 209,
                44 => 258,
                _ => 141,
            },
            121 => match state {
                4 => 38,
                14 => 62,
                37 => 68,
                43 => 86,
                60 => 94,
                8..=9 | 12 | 42 | 46..=47 | 50..=51 | 53 | 59 | 65 | 71..=75 | 77..=80 | 82 | 85..=86 | 90..=91 | 107 | 117..=118 | 121 | 124 => 194,
                13 | 19 | 58 | 61 | 68 | 89 | 94..=95 | 110 => 200,
                34 => 244,
                67 => 286,
                83 => 306,
                _ => 142,
            },
            124 => match state {
                13 | 19 | 37 | 58 | 61 | 68 | 89 | 94..=95 | 110 => 201,
                _ => 143,
            },
            125 => match state {
                83 => 307,
                _ => 245,
            },
            168 => 144,
            169 => match state {
                62 => 273,
                63 => 274,
                96 => 324,
                _ => 208,
            },
            170 => match state {
                19 => 213,
                58 => 269,
                89 => 313,
                _ => 202,
            },
            171 => match state {
                61 => 272,
                95 => 321,
                _ => 203,
            },
            174 => match state {
                110 => 118,
                94 => 320,
                _ => 204,
            },
            176 => match state {
                37 => 69,
                68 => 102,
                _ => 205,
            },
            178 => 206,
            180 => 222,
            181 => 145,
            182 => 146,
            184 => match state {
                99 => 108,
                _ => 98,
            },
            186 => match state {
                16 => 210,
                52 => 264,
                _ => 147,
            },
            188 => match state {
                113 => 119,
                27 => 223,
                76 => 299,
                93 => 319,
                111 => 350,
                _ => 115,
            },
            190 => match state {
                8..=9 | 12 | 42 | 46..=47 | 50..=51 | 53 | 59 | 65 | 71..=75 | 77..=80 | 82 | 85 | 90..=91 | 107 | 117..=118 | 121 | 124 => 42,
                _ => 3,
            },
            191 => match state {
                7 => 40,
                45 => 87,
                _ => 67,
            },
            192 => 99,
            _ => 0,
        }
    }
    fn __expected_tokens(__state: i16) -> alloc::vec::Vec<alloc::string::String> {
        const __TERMINAL: &[&str] = &[
            r###""!""###,
            r###""!=""###,
            r###""#""###,
            r###""%""###,
            r###""&""###,
            r###""(""###,
            r###"")""###,
            r###""*""###,
            r###""*%""###,
            r###""**""###,
            r###""**%""###,
            r###""+""###,
            r###""+%""###,
            r###"",""###,
            r###""-""###,
            r###""-%""###,
            r###"".""###,
            r###""/""###,
            r###"":""###,
            r###"":=""###,
            r###"";""###,
            r###""<<""###,
            r###""<<>""###,
            r###""<>>""###,
            r###""=""###,
            r###""==""###,
            r###""?""###,
            r###""Bool""###,
            r###""Int""###,
            r###""Int16""###,
            r###""Int32""###,
            r###""Int64""###,
            r###""Int8""###,
            r###""Nat""###,
            r###""Nat16""###,
            r###""Nat32""###,
            r###""Nat64""###,
            r###""Nat8""###,
            r###""Principal""###,
            r###""Text""###,
            r###""[""###,
            r###""\\no_else""###,
            r###""]""###,
            r###""^""###,
            r###""_""###,
            r###""and""###,
            r###""assert""###,
            r###""case""###,
            r###""debug""###,
            r###""do""###,
            r###""else""###,
            r###""false""###,
            r###""flexible""###,
            r###""for""###,
            r###""func""###,
            r###""if""###,
            r###""ignore""###,
            r###""in""###,
            r###""let""###,
            r###""module""###,
            r###""not""###,
            r###""null""###,
            r###""or""###,
            r###""prim""###,
            r###""private""###,
            r###""public""###,
            r###""return""###,
            r###""stable""###,
            r###""switch""###,
            r###""true""###,
            r###""var""###,
            r###""while""###,
            r###""{""###,
            r###""|""###,
            r###""}""###,
            r###"r#"\"(?:[^\\\\\"\\n]|\\\\.)*\""#"###,
            r###"r#"'(?:[^\\\\'\\s]|\\\\.)*'|' '"#"###,
            r###"r#"0x[0-9a-fA-F]+"#"###,
            r###"r#"[+-]?[0-9]([0-9_]*[0-9])?[Ee][0-9]([0-9_]*[0-9])?"#"###,
            r###"r#"[+-]?[0-9]([0-9_]*[0-9])?\\.([0-9]([0-9_]*[0-9])?)?([Ee][0-9]([0-9_]*[0-9])?)?"#"###,
            r###"r#"[0-9]([0-9_]*[0-9])?"#"###,
            r###"r#"[a-zA-Z_][a-zA-Z_0-9]*"#"###,
            r###"r#"\\\\\\\\BIG.FART."#"###,
        ];
        __TERMINAL.iter().enumerate().filter_map(|(index, terminal)| {
            let next_state = __action(__state, index);
            if next_state == 0 {
                None
            } else {
                Some(alloc::string::ToString::to_string(terminal))
            }
        }).collect()
    }
    pub(crate) struct __StateMachine<'input, '__1>
    where 'input: '__1
    {
        lookup: &'__1 LineColLookup<'input>,
        input: &'input str,
        __phantom: core::marker::PhantomData<(&'input ())>,
    }
    impl<'input, '__1> __state_machine::ParserDefinition for __StateMachine<'input, '__1>
    where 'input: '__1
    {
        type Location = usize;
        type Error = &'static str;
        type Token = Token<'input>;
        type TokenIndex = usize;
        type Symbol = __Symbol<'input>;
        type Success = Decs;
        type StateIndex = i16;
        type Action = i16;
        type ReduceIndex = i16;
        type NonterminalIndex = usize;

        #[inline]
        fn start_location(&self) -> Self::Location {
              Default::default()
        }

        #[inline]
        fn start_state(&self) -> Self::StateIndex {
              0
        }

        #[inline]
        fn token_to_index(&self, token: &Self::Token) -> Option<usize> {
            __token_to_integer(token, core::marker::PhantomData::<(&())>)
        }

        #[inline]
        fn action(&self, state: i16, integer: usize) -> i16 {
            __action(state, integer)
        }

        #[inline]
        fn error_action(&self, state: i16) -> i16 {
            __action(state, 83 - 1)
        }

        #[inline]
        fn eof_action(&self, state: i16) -> i16 {
            __EOF_ACTION[state as usize]
        }

        #[inline]
        fn goto(&self, state: i16, nt: usize) -> i16 {
            __goto(state, nt)
        }

        fn token_to_symbol(&self, token_index: usize, token: Self::Token) -> Self::Symbol {
            __token_to_symbol(token_index, token, core::marker::PhantomData::<(&())>)
        }

        fn expected_tokens(&self, state: i16) -> alloc::vec::Vec<alloc::string::String> {
            __expected_tokens(state)
        }

        #[inline]
        fn uses_error_recovery(&self) -> bool {
            false
        }

        #[inline]
        fn error_recovery_symbol(
            &self,
            recovery: __state_machine::ErrorRecovery<Self>,
        ) -> Self::Symbol {
            panic!("error recovery not enabled for this grammar")
        }

        fn reduce(
            &mut self,
            action: i16,
            start_location: Option<&Self::Location>,
            states: &mut alloc::vec::Vec<i16>,
            symbols: &mut alloc::vec::Vec<__state_machine::SymbolTriple<Self>>,
        ) -> Option<__state_machine::ParseResult<Self>> {
            __reduce(
                self.lookup,
                self.input,
                action,
                start_location,
                states,
                symbols,
                core::marker::PhantomData::<(&())>,
            )
        }

        fn simulate_reduce(&self, action: i16) -> __state_machine::SimulatedReduce<Self> {
            panic!("error recovery not enabled for this grammar")
        }
    }
    fn __token_to_integer<
        'input,
    >(
        __token: &Token<'input>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> Option<usize>
    {
        match *__token {
            Token(8, _) if true => Some(0),
            Token(9, _) if true => Some(1),
            Token(10, _) if true => Some(2),
            Token(11, _) if true => Some(3),
            Token(12, _) if true => Some(4),
            Token(13, _) if true => Some(5),
            Token(14, _) if true => Some(6),
            Token(15, _) if true => Some(7),
            Token(16, _) if true => Some(8),
            Token(17, _) if true => Some(9),
            Token(18, _) if true => Some(10),
            Token(19, _) if true => Some(11),
            Token(20, _) if true => Some(12),
            Token(21, _) if true => Some(13),
            Token(22, _) if true => Some(14),
            Token(23, _) if true => Some(15),
            Token(24, _) if true => Some(16),
            Token(25, _) if true => Some(17),
            Token(26, _) if true => Some(18),
            Token(27, _) if true => Some(19),
            Token(28, _) if true => Some(20),
            Token(29, _) if true => Some(21),
            Token(30, _) if true => Some(22),
            Token(31, _) if true => Some(23),
            Token(32, _) if true => Some(24),
            Token(33, _) if true => Some(25),
            Token(34, _) if true => Some(26),
            Token(35, _) if true => Some(27),
            Token(36, _) if true => Some(28),
            Token(37, _) if true => Some(29),
            Token(38, _) if true => Some(30),
            Token(39, _) if true => Some(31),
            Token(40, _) if true => Some(32),
            Token(41, _) if true => Some(33),
            Token(42, _) if true => Some(34),
            Token(43, _) if true => Some(35),
            Token(44, _) if true => Some(36),
            Token(45, _) if true => Some(37),
            Token(46, _) if true => Some(38),
            Token(47, _) if true => Some(39),
            Token(48, _) if true => Some(40),
            Token(49, _) if true => Some(41),
            Token(50, _) if true => Some(42),
            Token(51, _) if true => Some(43),
            Token(52, _) if true => Some(44),
            Token(53, _) if true => Some(45),
            Token(54, _) if true => Some(46),
            Token(55, _) if true => Some(47),
            Token(56, _) if true => Some(48),
            Token(57, _) if true => Some(49),
            Token(58, _) if true => Some(50),
            Token(59, _) if true => Some(51),
            Token(60, _) if true => Some(52),
            Token(61, _) if true => Some(53),
            Token(62, _) if true => Some(54),
            Token(63, _) if true => Some(55),
            Token(64, _) if true => Some(56),
            Token(65, _) if true => Some(57),
            Token(66, _) if true => Some(58),
            Token(67, _) if true => Some(59),
            Token(68, _) if true => Some(60),
            Token(69, _) if true => Some(61),
            Token(70, _) if true => Some(62),
            Token(71, _) if true => Some(63),
            Token(72, _) if true => Some(64),
            Token(73, _) if true => Some(65),
            Token(74, _) if true => Some(66),
            Token(75, _) if true => Some(67),
            Token(76, _) if true => Some(68),
            Token(77, _) if true => Some(69),
            Token(78, _) if true => Some(70),
            Token(79, _) if true => Some(71),
            Token(80, _) if true => Some(72),
            Token(81, _) if true => Some(73),
            Token(82, _) if true => Some(74),
            Token(0, _) if true => Some(75),
            Token(1, _) if true => Some(76),
            Token(2, _) if true => Some(77),
            Token(3, _) if true => Some(78),
            Token(4, _) if true => Some(79),
            Token(5, _) if true => Some(80),
            Token(6, _) if true => Some(81),
            Token(7, _) if true => Some(82),
            _ => None,
        }
    }
    fn __token_to_symbol<
        'input,
    >(
        __token_index: usize,
        __token: Token<'input>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> __Symbol<'input>
    {
        match __token_index {
            0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 | 42 | 43 | 44 | 45 | 46 | 47 | 48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 | 58 | 59 | 60 | 61 | 62 | 63 | 64 | 65 | 66 | 67 | 68 | 69 | 70 | 71 | 72 | 73 | 74 | 75 | 76 | 77 | 78 | 79 | 80 | 81 | 82 => match __token {
                Token(8, __tok0) | Token(9, __tok0) | Token(10, __tok0) | Token(11, __tok0) | Token(12, __tok0) | Token(13, __tok0) | Token(14, __tok0) | Token(15, __tok0) | Token(16, __tok0) | Token(17, __tok0) | Token(18, __tok0) | Token(19, __tok0) | Token(20, __tok0) | Token(21, __tok0) | Token(22, __tok0) | Token(23, __tok0) | Token(24, __tok0) | Token(25, __tok0) | Token(26, __tok0) | Token(27, __tok0) | Token(28, __tok0) | Token(29, __tok0) | Token(30, __tok0) | Token(31, __tok0) | Token(32, __tok0) | Token(33, __tok0) | Token(34, __tok0) | Token(35, __tok0) | Token(36, __tok0) | Token(37, __tok0) | Token(38, __tok0) | Token(39, __tok0) | Token(40, __tok0) | Token(41, __tok0) | Token(42, __tok0) | Token(43, __tok0) | Token(44, __tok0) | Token(45, __tok0) | Token(46, __tok0) | Token(47, __tok0) | Token(48, __tok0) | Token(49, __tok0) | Token(50, __tok0) | Token(51, __tok0) | Token(52, __tok0) | Token(53, __tok0) | Token(54, __tok0) | Token(55, __tok0) | Token(56, __tok0) | Token(57, __tok0) | Token(58, __tok0) | Token(59, __tok0) | Token(60, __tok0) | Token(61, __tok0) | Token(62, __tok0) | Token(63, __tok0) | Token(64, __tok0) | Token(65, __tok0) | Token(66, __tok0) | Token(67, __tok0) | Token(68, __tok0) | Token(69, __tok0) | Token(70, __tok0) | Token(71, __tok0) | Token(72, __tok0) | Token(73, __tok0) | Token(74, __tok0) | Token(75, __tok0) | Token(76, __tok0) | Token(77, __tok0) | Token(78, __tok0) | Token(79, __tok0) | Token(80, __tok0) | Token(81, __tok0) | Token(82, __tok0) | Token(0, __tok0) | Token(1, __tok0) | Token(2, __tok0) | Token(3, __tok0) | Token(4, __tok0) | Token(5, __tok0) | Token(6, __tok0) | Token(7, __tok0) if true => __Symbol::Variant0(__tok0),
                _ => unreachable!(),
            },
            _ => unreachable!(),
        }
    }
    pub struct ProgParser {
        builder: __lalrpop_util::lexer::MatcherBuilder,
        _priv: (),
    }

    impl ProgParser {
        pub fn new() -> ProgParser {
            let __builder = super::__intern_token::new_builder();
            ProgParser {
                builder: __builder,
                _priv: (),
            }
        }

        #[allow(dead_code)]
        pub fn parse<
            'input,
        >(
            &self,
            lookup: &LineColLookup<'input>,
            input: &'input str,
        ) -> Result<Decs, __lalrpop_util::ParseError<usize, Token<'input>, &'static str>>
        {
            let mut __tokens = self.builder.matcher(input);
            __state_machine::Parser::drive(
                __StateMachine {
                    lookup,
                    input,
                    __phantom: core::marker::PhantomData::<(&())>,
                },
                __tokens,
            )
        }
    }
    pub(crate) fn __reduce<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut alloc::vec::Vec<i16>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> Option<Result<Decs,__lalrpop_util::ParseError<usize, Token<'input>, &'static str>>>
    {
        let (__pop_states, __nonterminal) = match __action {
            0 => {
                __reduce0(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1 => {
                __reduce1(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            2 => {
                __reduce2(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            3 => {
                __reduce3(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            4 => {
                __reduce4(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            5 => {
                __reduce5(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            6 => {
                __reduce6(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            7 => {
                __reduce7(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            8 => {
                __reduce8(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            9 => {
                __reduce9(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            10 => {
                __reduce10(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            11 => {
                __reduce11(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            12 => {
                __reduce12(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            13 => {
                __reduce13(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            14 => {
                __reduce14(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            15 => {
                __reduce15(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            16 => {
                __reduce16(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            17 => {
                __reduce17(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            18 => {
                __reduce18(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            19 => {
                __reduce19(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            20 => {
                __reduce20(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            21 => {
                __reduce21(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            22 => {
                __reduce22(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            23 => {
                __reduce23(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            24 => {
                __reduce24(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            25 => {
                __reduce25(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            26 => {
                __reduce26(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            27 => {
                __reduce27(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            28 => {
                __reduce28(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            29 => {
                __reduce29(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            30 => {
                __reduce30(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            31 => {
                __reduce31(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            32 => {
                __reduce32(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            33 => {
                __reduce33(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            34 => {
                __reduce34(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            35 => {
                __reduce35(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            36 => {
                __reduce36(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            37 => {
                __reduce37(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            38 => {
                __reduce38(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            39 => {
                __reduce39(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            40 => {
                __reduce40(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            41 => {
                __reduce41(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            42 => {
                __reduce42(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            43 => {
                __reduce43(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            44 => {
                __reduce44(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            45 => {
                __reduce45(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            46 => {
                __reduce46(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            47 => {
                __reduce47(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            48 => {
                __reduce48(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            49 => {
                __reduce49(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            50 => {
                __reduce50(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            51 => {
                __reduce51(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            52 => {
                __reduce52(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            53 => {
                __reduce53(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            54 => {
                __reduce54(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            55 => {
                __reduce55(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            56 => {
                __reduce56(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            57 => {
                __reduce57(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            58 => {
                __reduce58(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            59 => {
                __reduce59(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            60 => {
                __reduce60(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            61 => {
                __reduce61(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            62 => {
                __reduce62(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            63 => {
                __reduce63(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            64 => {
                __reduce64(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            65 => {
                __reduce65(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            66 => {
                __reduce66(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            67 => {
                __reduce67(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            68 => {
                __reduce68(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            69 => {
                __reduce69(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            70 => {
                __reduce70(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            71 => {
                __reduce71(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            72 => {
                __reduce72(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            73 => {
                __reduce73(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            74 => {
                __reduce74(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            75 => {
                __reduce75(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            76 => {
                __reduce76(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            77 => {
                __reduce77(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            78 => {
                __reduce78(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            79 => {
                __reduce79(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            80 => {
                __reduce80(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            81 => {
                __reduce81(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            82 => {
                __reduce82(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            83 => {
                __reduce83(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            84 => {
                __reduce84(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            85 => {
                __reduce85(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            86 => {
                __reduce86(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            87 => {
                __reduce87(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            88 => {
                __reduce88(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            89 => {
                __reduce89(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            90 => {
                __reduce90(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            91 => {
                __reduce91(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            92 => {
                __reduce92(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            93 => {
                __reduce93(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            94 => {
                __reduce94(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            95 => {
                __reduce95(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            96 => {
                __reduce96(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            97 => {
                __reduce97(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            98 => {
                __reduce98(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            99 => {
                __reduce99(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            100 => {
                __reduce100(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            101 => {
                __reduce101(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            102 => {
                __reduce102(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            103 => {
                __reduce103(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            104 => {
                __reduce104(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            105 => {
                __reduce105(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            106 => {
                __reduce106(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            107 => {
                __reduce107(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            108 => {
                __reduce108(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            109 => {
                __reduce109(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            110 => {
                __reduce110(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            111 => {
                __reduce111(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            112 => {
                __reduce112(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            113 => {
                __reduce113(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            114 => {
                __reduce114(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            115 => {
                __reduce115(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            116 => {
                __reduce116(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            117 => {
                __reduce117(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            118 => {
                __reduce118(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            119 => {
                __reduce119(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            120 => {
                __reduce120(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            121 => {
                __reduce121(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            122 => {
                __reduce122(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            123 => {
                __reduce123(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            124 => {
                __reduce124(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            125 => {
                __reduce125(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            126 => {
                __reduce126(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            127 => {
                __reduce127(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            128 => {
                __reduce128(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            129 => {
                __reduce129(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            130 => {
                __reduce130(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            131 => {
                __reduce131(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            132 => {
                __reduce132(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            133 => {
                __reduce133(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            134 => {
                __reduce134(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            135 => {
                __reduce135(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            136 => {
                __reduce136(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            137 => {
                __reduce137(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            138 => {
                __reduce138(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            139 => {
                __reduce139(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            140 => {
                __reduce140(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            141 => {
                __reduce141(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            142 => {
                __reduce142(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            143 => {
                __reduce143(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            144 => {
                __reduce144(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            145 => {
                __reduce145(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            146 => {
                __reduce146(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            147 => {
                __reduce147(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            148 => {
                __reduce148(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            149 => {
                __reduce149(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            150 => {
                __reduce150(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            151 => {
                __reduce151(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            152 => {
                __reduce152(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            153 => {
                __reduce153(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            154 => {
                __reduce154(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            155 => {
                __reduce155(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            156 => {
                __reduce156(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            157 => {
                __reduce157(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            158 => {
                __reduce158(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            159 => {
                __reduce159(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            160 => {
                __reduce160(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            161 => {
                __reduce161(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            162 => {
                __reduce162(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            163 => {
                __reduce163(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            164 => {
                __reduce164(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            165 => {
                __reduce165(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            166 => {
                __reduce166(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            167 => {
                __reduce167(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            168 => {
                __reduce168(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            169 => {
                __reduce169(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            170 => {
                __reduce170(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            171 => {
                __reduce171(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            172 => {
                __reduce172(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            173 => {
                __reduce173(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            174 => {
                __reduce174(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            175 => {
                __reduce175(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            176 => {
                __reduce176(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            177 => {
                __reduce177(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            178 => {
                __reduce178(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            179 => {
                __reduce179(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            180 => {
                __reduce180(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            181 => {
                __reduce181(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            182 => {
                __reduce182(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            183 => {
                __reduce183(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            184 => {
                __reduce184(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            185 => {
                __reduce185(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            186 => {
                __reduce186(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            187 => {
                __reduce187(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            188 => {
                __reduce188(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            189 => {
                __reduce189(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            190 => {
                __reduce190(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            191 => {
                __reduce191(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            192 => {
                __reduce192(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            193 => {
                __reduce193(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            194 => {
                __reduce194(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            195 => {
                __reduce195(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            196 => {
                __reduce196(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            197 => {
                __reduce197(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            198 => {
                __reduce198(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            199 => {
                __reduce199(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            200 => {
                __reduce200(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            201 => {
                __reduce201(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            202 => {
                __reduce202(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            203 => {
                __reduce203(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            204 => {
                __reduce204(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            205 => {
                __reduce205(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            206 => {
                __reduce206(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            207 => {
                __reduce207(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            208 => {
                __reduce208(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            209 => {
                __reduce209(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            210 => {
                __reduce210(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            211 => {
                __reduce211(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            212 => {
                __reduce212(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            213 => {
                __reduce213(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            214 => {
                __reduce214(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            215 => {
                __reduce215(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            216 => {
                __reduce216(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            217 => {
                __reduce217(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            218 => {
                __reduce218(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            219 => {
                __reduce219(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            220 => {
                __reduce220(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            221 => {
                __reduce221(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            222 => {
                __reduce222(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            223 => {
                __reduce223(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            224 => {
                __reduce224(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            225 => {
                __reduce225(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            226 => {
                __reduce226(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            227 => {
                __reduce227(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            228 => {
                __reduce228(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            229 => {
                __reduce229(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            230 => {
                __reduce230(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            231 => {
                __reduce231(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            232 => {
                __reduce232(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            233 => {
                __reduce233(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            234 => {
                __reduce234(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            235 => {
                __reduce235(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            236 => {
                __reduce236(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            237 => {
                __reduce237(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            238 => {
                __reduce238(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            239 => {
                __reduce239(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            240 => {
                __reduce240(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            241 => {
                __reduce241(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            242 => {
                __reduce242(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            243 => {
                __reduce243(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            244 => {
                __reduce244(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            245 => {
                __reduce245(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            246 => {
                __reduce246(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            247 => {
                __reduce247(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            248 => {
                __reduce248(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            249 => {
                __reduce249(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            250 => {
                __reduce250(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            251 => {
                __reduce251(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            252 => {
                __reduce252(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            253 => {
                __reduce253(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            254 => {
                __reduce254(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            255 => {
                __reduce255(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            256 => {
                __reduce256(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            257 => {
                __reduce257(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            258 => {
                __reduce258(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            259 => {
                __reduce259(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            260 => {
                __reduce260(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            261 => {
                __reduce261(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            262 => {
                __reduce262(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            263 => {
                __reduce263(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            264 => {
                __reduce264(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            265 => {
                __reduce265(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            266 => {
                __reduce266(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            267 => {
                __reduce267(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            268 => {
                __reduce268(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            269 => {
                __reduce269(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            270 => {
                __reduce270(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            271 => {
                __reduce271(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            272 => {
                __reduce272(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            273 => {
                __reduce273(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            274 => {
                __reduce274(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            275 => {
                __reduce275(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            276 => {
                __reduce276(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            277 => {
                __reduce277(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            278 => {
                __reduce278(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            279 => {
                __reduce279(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            280 => {
                __reduce280(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            281 => {
                __reduce281(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            282 => {
                __reduce282(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            283 => {
                __reduce283(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            284 => {
                __reduce284(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            285 => {
                __reduce285(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            286 => {
                __reduce286(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            287 => {
                __reduce287(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            288 => {
                __reduce288(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            289 => {
                __reduce289(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            290 => {
                __reduce290(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            291 => {
                __reduce291(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            292 => {
                __reduce292(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            293 => {
                __reduce293(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            294 => {
                __reduce294(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            295 => {
                __reduce295(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            296 => {
                __reduce296(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            297 => {
                __reduce297(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            298 => {
                __reduce298(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            299 => {
                __reduce299(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            300 => {
                __reduce300(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            301 => {
                __reduce301(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            302 => {
                __reduce302(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            303 => {
                __reduce303(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            304 => {
                __reduce304(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            305 => {
                __reduce305(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            306 => {
                __reduce306(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            307 => {
                __reduce307(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            308 => {
                __reduce308(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            309 => {
                __reduce309(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            310 => {
                __reduce310(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            311 => {
                __reduce311(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            312 => {
                __reduce312(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            313 => {
                __reduce313(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            314 => {
                __reduce314(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            315 => {
                __reduce315(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            316 => {
                __reduce316(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            317 => {
                __reduce317(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            318 => {
                __reduce318(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            319 => {
                __reduce319(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            320 => {
                __reduce320(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            321 => {
                __reduce321(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            322 => {
                __reduce322(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            323 => {
                __reduce323(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            324 => {
                __reduce324(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            325 => {
                __reduce325(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            326 => {
                __reduce326(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            327 => {
                __reduce327(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            328 => {
                __reduce328(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            329 => {
                __reduce329(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            330 => {
                __reduce330(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            331 => {
                __reduce331(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            332 => {
                __reduce332(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            333 => {
                __reduce333(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            334 => {
                __reduce334(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            335 => {
                __reduce335(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            336 => {
                __reduce336(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            337 => {
                __reduce337(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            338 => {
                __reduce338(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            339 => {
                __reduce339(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            340 => {
                __reduce340(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            341 => {
                __reduce341(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            342 => {
                __reduce342(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            343 => {
                __reduce343(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            344 => {
                __reduce344(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            345 => {
                __reduce345(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            346 => {
                __reduce346(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            347 => {
                __reduce347(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            348 => {
                __reduce348(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            349 => {
                __reduce349(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            350 => {
                __reduce350(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            351 => {
                __reduce351(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            352 => {
                __reduce352(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            353 => {
                __reduce353(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            354 => {
                __reduce354(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            355 => {
                __reduce355(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            356 => {
                __reduce356(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            357 => {
                __reduce357(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            358 => {
                __reduce358(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            359 => {
                __reduce359(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            360 => {
                __reduce360(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            361 => {
                __reduce361(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            362 => {
                __reduce362(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            363 => {
                __reduce363(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            364 => {
                __reduce364(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            365 => {
                __reduce365(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            366 => {
                __reduce366(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            367 => {
                __reduce367(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            368 => {
                __reduce368(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            369 => {
                __reduce369(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            370 => {
                __reduce370(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            371 => {
                __reduce371(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            372 => {
                __reduce372(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            373 => {
                __reduce373(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            374 => {
                __reduce374(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            375 => {
                __reduce375(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            376 => {
                __reduce376(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            377 => {
                __reduce377(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            378 => {
                __reduce378(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            379 => {
                __reduce379(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            380 => {
                __reduce380(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            381 => {
                __reduce381(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            382 => {
                __reduce382(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            383 => {
                __reduce383(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            384 => {
                __reduce384(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            385 => {
                __reduce385(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            386 => {
                __reduce386(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            387 => {
                __reduce387(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            388 => {
                __reduce388(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            389 => {
                __reduce389(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            390 => {
                __reduce390(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            391 => {
                __reduce391(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            392 => {
                __reduce392(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            393 => {
                __reduce393(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            394 => {
                __reduce394(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            395 => {
                __reduce395(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            396 => {
                __reduce396(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            397 => {
                // __Prog = Prog => ActionFn(4);
                let __sym0 = __pop_Variant34(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action4::<>(lookup, input, __sym0);
                return Some(Ok(__nt));
            }
            398 => {
                __reduce398(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            _ => panic!("invalid action code {}", __action)
        };
        let __states_len = __states.len();
        __states.truncate(__states_len - __pop_states);
        let __state = *__states.last().unwrap();
        let __next_state = __goto(__state, __nonterminal);
        __states.push(__next_state);
        None
    }
    #[inline(never)]
    fn __symbol_type_mismatch() -> ! {
        panic!("symbol type mismatch")
    }
    fn __pop_Variant4<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, (&'input str, Type_), usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant4(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant26<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, BinOp, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant26(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant28<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Case, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant28(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant29<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Cases, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant29(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant30<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Dec, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant30(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant31<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, DecField, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant31(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant6<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, DecField_, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant6(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant55<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, DecFields, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant55(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant8<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Dec_, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant8(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant34<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Decs, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant34(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant35<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Delim<DecField_>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant35(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant36<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Delim<Dec_>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant36(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant38<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Delim<Exp_>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant38(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant39<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Delim<Node<Case>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant39(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant37<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Delim<Node<ExpField>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant37(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant40<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Delim<Pat_>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant40(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant27<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Exp, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant27(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant41<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, ExpField, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant41(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant12<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Exp_, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant12(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant43<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Id, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant43(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant19<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Id_, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant19(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant44<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Literal, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant44(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant65<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Mut, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant65(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant14<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Node<Case>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant14(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant47<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Node<Dec>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant47(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant48<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Node<DecField>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant48(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant45<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Node<Exp>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant45(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant10<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Node<ExpField>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant10(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant49<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Node<Id>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant49(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant50<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Node<Pat>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant50(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant51<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Node<SortPat>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant51(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant52<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Node<Stab>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant52(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant53<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Node<Type>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant53(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant54<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Node<Vis>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant54(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant56<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Pat, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant56(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant16<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Pat_, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant16(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant58<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, PrimType, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant58(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant59<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, SortPat, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant59(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant60<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, SortPat_, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant60(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant61<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Stab, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant61(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant21<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Stab_, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant21(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant62<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, String, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant62(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant63<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Type, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant63(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant2<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Type_, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant2(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant64<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, UnOp, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant64(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant66<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Vis, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant66(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant23<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Vis_, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant23(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant7<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, alloc::vec::Vec<DecField_>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant7(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant9<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, alloc::vec::Vec<Dec_>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant9(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant13<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, alloc::vec::Vec<Exp_>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant13(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant15<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, alloc::vec::Vec<Node<Case>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant15(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant11<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, alloc::vec::Vec<Node<ExpField>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant11(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant17<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, alloc::vec::Vec<Pat_>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant17(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant5<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, core::option::Option<(&'input str, Type_)>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant5(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant32<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, core::option::Option<DecField_>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant32(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant33<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, core::option::Option<Dec_>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant33(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant18<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, core::option::Option<Exp_>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant18(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant20<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, core::option::Option<Id_>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant20(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant46<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, core::option::Option<Node<Case>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant46(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant42<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, core::option::Option<Node<ExpField>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant42(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant57<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, core::option::Option<Pat_>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant57(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant22<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, core::option::Option<Stab_>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant22(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant3<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, core::option::Option<Type_>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant3(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant24<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, core::option::Option<Vis_>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant24(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant1<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, core::option::Option<&'input str>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant1(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant25<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, usize, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant25(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant0<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, &'input str, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant0(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    pub(crate) fn __reduce0<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // "="? = "=" => ActionFn(130);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action130::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 0)
    }
    pub(crate) fn __reduce1<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // "="? =  => ActionFn(131);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action131::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (0, 0)
    }
    pub(crate) fn __reduce2<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (":" <Type_>) = ":", Type => ActionFn(449);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant63(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action449::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (2, 1)
    }
    pub(crate) fn __reduce3<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (":" <Type_>)? = ":", Type => ActionFn(454);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant63(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action454::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (2, 2)
    }
    pub(crate) fn __reduce4<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (":" <Type_>)? =  => ActionFn(152);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action152::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (0, 2)
    }
    pub(crate) fn __reduce5<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (":" Type_) = ":", Type => ActionFn(450);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant63(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action450::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (2, 3)
    }
    pub(crate) fn __reduce6<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (":" Type_)? = ":", Type => ActionFn(457);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant63(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action457::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (2, 4)
    }
    pub(crate) fn __reduce7<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (":" Type_)? =  => ActionFn(128);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action128::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (0, 4)
    }
    pub(crate) fn __reduce8<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<DecField_> ";") = DecField, ";" => ActionFn(463);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant31(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action463::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 5)
    }
    pub(crate) fn __reduce9<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<DecField_> ";")* =  => ActionFn(211);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action211::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (0, 6)
    }
    pub(crate) fn __reduce10<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<DecField_> ";")* = (<DecField_> ";")+ => ActionFn(212);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action212::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 6)
    }
    pub(crate) fn __reduce11<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<DecField_> ";")+ = DecField, ";" => ActionFn(465);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant31(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action465::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (2, 7)
    }
    pub(crate) fn __reduce12<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<DecField_> ";")+ = (<DecField_> ";")+, DecField, ";" => ActionFn(466);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant31(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action466::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (3, 7)
    }
    pub(crate) fn __reduce13<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<Dec_> ";") = Dec, ";" => ActionFn(470);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action470::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (2, 8)
    }
    pub(crate) fn __reduce14<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<Dec_> ";")* =  => ActionFn(199);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action199::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (0, 9)
    }
    pub(crate) fn __reduce15<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<Dec_> ";")* = (<Dec_> ";")+ => ActionFn(200);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action200::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce16<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<Dec_> ";")+ = Dec, ";" => ActionFn(473);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action473::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (2, 10)
    }
    pub(crate) fn __reduce17<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<Dec_> ";")+ = (<Dec_> ";")+, Dec, ";" => ActionFn(474);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant30(__symbols);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action474::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (3, 10)
    }
    pub(crate) fn __reduce18<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<ExpField_> ";") = ExpField, ";" => ActionFn(478);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant41(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action478::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (2, 11)
    }
    pub(crate) fn __reduce19<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<ExpField_> ";")* =  => ActionFn(189);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action189::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (0, 12)
    }
    pub(crate) fn __reduce20<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<ExpField_> ";")* = (<ExpField_> ";")+ => ActionFn(190);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action190::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 12)
    }
    pub(crate) fn __reduce21<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<ExpField_> ";")+ = ExpField, ";" => ActionFn(480);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant41(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action480::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (2, 13)
    }
    pub(crate) fn __reduce22<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<ExpField_> ";")+ = (<ExpField_> ";")+, ExpField, ";" => ActionFn(481);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant41(__symbols);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action481::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (3, 13)
    }
    pub(crate) fn __reduce23<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<ExpNonVar_<Ob>> ",") = ExpNonVar<Ob>, "," => ActionFn(485);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action485::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (2, 14)
    }
    pub(crate) fn __reduce24<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<ExpNonVar_<Ob>> ",")* =  => ActionFn(339);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action339::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (0, 15)
    }
    pub(crate) fn __reduce25<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<ExpNonVar_<Ob>> ",")* = (<ExpNonVar_<Ob>> ",")+ => ActionFn(340);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action340::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (1, 15)
    }
    pub(crate) fn __reduce26<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<ExpNonVar_<Ob>> ",")+ = ExpNonVar<Ob>, "," => ActionFn(487);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action487::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (2, 16)
    }
    pub(crate) fn __reduce27<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<ExpNonVar_<Ob>> ",")+ = (<ExpNonVar_<Ob>> ",")+, ExpNonVar<Ob>, "," => ActionFn(488);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action488::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (3, 16)
    }
    pub(crate) fn __reduce28<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<Exp_<Ob>> ",") = Exp<Ob>, "," => ActionFn(492);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action492::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (2, 17)
    }
    pub(crate) fn __reduce29<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<Exp_<Ob>> ",")+ = Exp<Ob>, "," => ActionFn(507);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action507::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (2, 18)
    }
    pub(crate) fn __reduce30<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<Exp_<Ob>> ",")+ = (<Exp_<Ob>> ",")+, Exp<Ob>, "," => ActionFn(508);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action508::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (3, 18)
    }
    pub(crate) fn __reduce31<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<Node<Case>> ";") = Case, ";" => ActionFn(509);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant28(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action509::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (2, 19)
    }
    pub(crate) fn __reduce32<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<Node<Case>> ";")* =  => ActionFn(194);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action194::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (0, 20)
    }
    pub(crate) fn __reduce33<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<Node<Case>> ";")* = (<Node<Case>> ";")+ => ActionFn(195);
        let __sym0 = __pop_Variant15(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action195::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 20)
    }
    pub(crate) fn __reduce34<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<Node<Case>> ";")+ = Case, ";" => ActionFn(511);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant28(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action511::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (2, 21)
    }
    pub(crate) fn __reduce35<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<Node<Case>> ";")+ = (<Node<Case>> ";")+, Case, ";" => ActionFn(512);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant28(__symbols);
        let __sym0 = __pop_Variant15(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action512::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (3, 21)
    }
    pub(crate) fn __reduce36<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<PatBin_> ",") = PatBin, "," => ActionFn(516);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant56(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action516::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (2, 22)
    }
    pub(crate) fn __reduce37<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<PatBin_> ",")+ = PatBin, "," => ActionFn(520);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant56(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action520::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (2, 23)
    }
    pub(crate) fn __reduce38<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<PatBin_> ",")+ = (<PatBin_> ",")+, PatBin, "," => ActionFn(521);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant56(__symbols);
        let __sym0 = __pop_Variant17(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action521::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (3, 23)
    }
    pub(crate) fn __reduce39<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (ExpNullary_<Bl>) = ExpNullary<Bl> => ActionFn(523);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action523::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 24)
    }
    pub(crate) fn __reduce40<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (ExpNullary_<Bl>)? = ExpNullary<Bl> => ActionFn(524);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action524::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (1, 25)
    }
    pub(crate) fn __reduce41<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (ExpNullary_<Bl>)? =  => ActionFn(345);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action345::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (0, 25)
    }
    pub(crate) fn __reduce42<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (ExpNullary_<Ob>) = ExpNullary<Ob> => ActionFn(528);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action528::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 26)
    }
    pub(crate) fn __reduce43<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (ExpNullary_<Ob>)? = ExpNullary<Ob> => ActionFn(539);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action539::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (1, 27)
    }
    pub(crate) fn __reduce44<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (ExpNullary_<Ob>)? =  => ActionFn(313);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action313::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (0, 27)
    }
    pub(crate) fn __reduce45<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (Id_) = Id => ActionFn(543);
        let __sym0 = __pop_Variant43(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action543::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (1, 28)
    }
    pub(crate) fn __reduce46<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (Id_)? = Id => ActionFn(556);
        let __sym0 = __pop_Variant43(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action556::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 29)
    }
    pub(crate) fn __reduce47<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (Id_)? =  => ActionFn(133);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action133::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (0, 29)
    }
    pub(crate) fn __reduce48<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (Id_?) = Id => ActionFn(565);
        let __sym0 = __pop_Variant43(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action565::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 30)
    }
    pub(crate) fn __reduce49<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (Id_?) =  => ActionFn(566);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action566::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (0, 30)
    }
    pub(crate) fn __reduce50<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (Stab_) = Stab => ActionFn(572);
        let __sym0 = __pop_Variant61(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action572::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (1, 31)
    }
    pub(crate) fn __reduce51<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (Stab_)? = Stab => ActionFn(573);
        let __sym0 = __pop_Variant61(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action573::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (1, 32)
    }
    pub(crate) fn __reduce52<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (Stab_)? =  => ActionFn(113);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action113::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (0, 32)
    }
    pub(crate) fn __reduce53<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (Vis_) = Vis => ActionFn(577);
        let __sym0 = __pop_Variant66(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action577::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (1, 33)
    }
    pub(crate) fn __reduce54<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (Vis_)? = Vis => ActionFn(578);
        let __sym0 = __pop_Variant66(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action578::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (1, 34)
    }
    pub(crate) fn __reduce55<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (Vis_)? =  => ActionFn(116);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action116::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (0, 34)
    }
    pub(crate) fn __reduce56<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // @L =  => ActionFn(215);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action215::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (0, 35)
    }
    pub(crate) fn __reduce57<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // @R =  => ActionFn(214);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action214::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (0, 36)
    }
    pub(crate) fn __reduce58<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BinOp = "+" => ActionFn(86);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action86::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce59<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BinOp = "-" => ActionFn(87);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action87::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce60<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BinOp = "*" => ActionFn(88);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action88::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce61<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BinOp = "/" => ActionFn(89);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action89::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce62<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BinOp = "%" => ActionFn(90);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action90::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce63<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BinOp = "**" => ActionFn(91);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action91::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce64<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BinOp = "+%" => ActionFn(92);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action92::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce65<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BinOp = "-%" => ActionFn(93);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action93::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce66<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BinOp = "*%" => ActionFn(94);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action94::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce67<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BinOp = "**%" => ActionFn(95);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action95::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce68<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BinOp = "&" => ActionFn(96);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action96::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce69<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BinOp = "|" => ActionFn(97);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action97::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce70<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BinOp = "^" => ActionFn(98);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action98::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce71<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BinOp = "<<" => ActionFn(99);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action99::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce72<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BinOp = "<<>" => ActionFn(100);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action100::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce73<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BinOp = "<>>" => ActionFn(101);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action101::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce74<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BinOp = "#" => ActionFn(102);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action102::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce75<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Bl = r#"\\\\\\\\BIG.FART."# => ActionFn(5);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action5::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 38)
    }
    pub(crate) fn __reduce76<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Block = "{", Decs, "}" => ActionFn(61);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant34(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action61::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 39)
    }
    pub(crate) fn __reduce77<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Block_ = Block => ActionFn(583);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action583::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 40)
    }
    pub(crate) fn __reduce78<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Case = "case", PatNullary, ExpNest => ActionFn(731);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant56(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action731::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant28(__nt), __end));
        (3, 41)
    }
    pub(crate) fn __reduce79<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Cases = Delim0<Node<Case>, ";"> => ActionFn(65);
        let __sym0 = __pop_Variant39(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action65::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 42)
    }
    pub(crate) fn __reduce80<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Dec = DecVar => ActionFn(71);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action71::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 43)
    }
    pub(crate) fn __reduce81<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Dec = DecNonVar => ActionFn(72);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action72::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 43)
    }
    pub(crate) fn __reduce82<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Dec = ExpNonDec<Ob> => ActionFn(73);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action73::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 43)
    }
    pub(crate) fn __reduce83<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecField = Vis, Stab, Dec => ActionFn(579);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant30(__symbols);
        let __sym1 = __pop_Variant61(__symbols);
        let __sym0 = __pop_Variant66(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action579::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant31(__nt), __end));
        (3, 44)
    }
    pub(crate) fn __reduce84<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecField = Stab, Dec => ActionFn(580);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant30(__symbols);
        let __sym0 = __pop_Variant61(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action580::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant31(__nt), __end));
        (2, 44)
    }
    pub(crate) fn __reduce85<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecField = Vis, Dec => ActionFn(581);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant30(__symbols);
        let __sym0 = __pop_Variant66(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action581::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant31(__nt), __end));
        (2, 44)
    }
    pub(crate) fn __reduce86<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecField = Dec => ActionFn(582);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action582::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant31(__nt), __end));
        (1, 44)
    }
    pub(crate) fn __reduce87<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecField_ = DecField => ActionFn(462);
        let __sym0 = __pop_Variant31(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action462::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 45)
    }
    pub(crate) fn __reduce88<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecField_? = DecField => ActionFn(464);
        let __sym0 = __pop_Variant31(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action464::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant32(__nt), __end));
        (1, 46)
    }
    pub(crate) fn __reduce89<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecField_? =  => ActionFn(210);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action210::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant32(__nt), __end));
        (0, 46)
    }
    pub(crate) fn __reduce90<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecNonVar = "let", Pat, "=", Exp<Ob> => ActionFn(741);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant27(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant56(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action741::<>(lookup, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (4, 47)
    }
    pub(crate) fn __reduce91<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecNonVar = "module", Id, "=", ObjBody => ActionFn(557);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant55(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant43(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action557::<>(lookup, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (4, 47)
    }
    pub(crate) fn __reduce92<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecNonVar = "module", "=", ObjBody => ActionFn(558);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant55(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action558::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (3, 47)
    }
    pub(crate) fn __reduce93<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecNonVar = "module", Id, ObjBody => ActionFn(559);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant55(__symbols);
        let __sym1 = __pop_Variant43(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action559::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (3, 47)
    }
    pub(crate) fn __reduce94<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecNonVar = "module", ObjBody => ActionFn(560);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant55(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action560::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (2, 47)
    }
    pub(crate) fn __reduce95<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecNonVar = SortPat, "func", Id, PatPlain, ":", Type, Block => ActionFn(745);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant27(__symbols);
        let __sym5 = __pop_Variant63(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant56(__symbols);
        let __sym2 = __pop_Variant43(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant59(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym6.2.clone();
        let __nt = super::__action745::<>(lookup, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (7, 47)
    }
    pub(crate) fn __reduce96<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecNonVar = SortPat, "func", PatPlain, ":", Type, Block => ActionFn(746);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant27(__symbols);
        let __sym4 = __pop_Variant63(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant56(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant59(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action746::<>(lookup, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (6, 47)
    }
    pub(crate) fn __reduce97<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecNonVar = SortPat, "func", Id, PatPlain, Block => ActionFn(747);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant27(__symbols);
        let __sym3 = __pop_Variant56(__symbols);
        let __sym2 = __pop_Variant43(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant59(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action747::<>(lookup, input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (5, 47)
    }
    pub(crate) fn __reduce98<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecNonVar = SortPat, "func", PatPlain, Block => ActionFn(748);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant27(__symbols);
        let __sym2 = __pop_Variant56(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant59(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action748::<>(lookup, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (4, 47)
    }
    pub(crate) fn __reduce99<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecNonVar = SortPat, "func", Id, PatPlain, ":", Type, "=", Exp<Ob> => ActionFn(749);
        assert!(__symbols.len() >= 8);
        let __sym7 = __pop_Variant27(__symbols);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant63(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant56(__symbols);
        let __sym2 = __pop_Variant43(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant59(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym7.2.clone();
        let __nt = super::__action749::<>(lookup, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (8, 47)
    }
    pub(crate) fn __reduce100<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecNonVar = SortPat, "func", PatPlain, ":", Type, "=", Exp<Ob> => ActionFn(750);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant27(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant63(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant56(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant59(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym6.2.clone();
        let __nt = super::__action750::<>(lookup, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (7, 47)
    }
    pub(crate) fn __reduce101<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecNonVar = SortPat, "func", Id, PatPlain, "=", Exp<Ob> => ActionFn(751);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant27(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant56(__symbols);
        let __sym2 = __pop_Variant43(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant59(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action751::<>(lookup, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (6, 47)
    }
    pub(crate) fn __reduce102<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecNonVar = SortPat, "func", PatPlain, "=", Exp<Ob> => ActionFn(752);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant27(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant56(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant59(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action752::<>(lookup, input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (5, 47)
    }
    pub(crate) fn __reduce103<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecNonVar_ = DecNonVar => ActionFn(596);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action596::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 48)
    }
    pub(crate) fn __reduce104<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecVar = "var", Pat, "=", Exp<Ob> => ActionFn(742);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant27(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant56(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action742::<>(lookup, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (4, 49)
    }
    pub(crate) fn __reduce105<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecVar_ = DecVar => ActionFn(599);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action599::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 50)
    }
    pub(crate) fn __reduce106<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Dec_ = Dec => ActionFn(469);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action469::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 51)
    }
    pub(crate) fn __reduce107<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Dec_? = Dec => ActionFn(472);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action472::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant33(__nt), __end));
        (1, 52)
    }
    pub(crate) fn __reduce108<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Dec_? =  => ActionFn(198);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action198::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant33(__nt), __end));
        (0, 52)
    }
    pub(crate) fn __reduce109<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Decs = Delim0<Dec_, ";"> => ActionFn(69);
        let __sym0 = __pop_Variant36(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action69::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant34(__nt), __end));
        (1, 53)
    }
    pub(crate) fn __reduce110<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim0<DecField_, ";"> = DecField => ActionFn(592);
        let __sym0 = __pop_Variant31(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action592::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant35(__nt), __end));
        (1, 54)
    }
    pub(crate) fn __reduce111<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim0<DecField_, ";"> =  => ActionFn(593);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action593::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant35(__nt), __end));
        (0, 54)
    }
    pub(crate) fn __reduce112<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim0<DecField_, ";"> = (<DecField_> ";")+, DecField => ActionFn(594);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant31(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action594::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant35(__nt), __end));
        (2, 54)
    }
    pub(crate) fn __reduce113<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim0<DecField_, ";"> = (<DecField_> ";")+ => ActionFn(595);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action595::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant35(__nt), __end));
        (1, 54)
    }
    pub(crate) fn __reduce114<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim0<Dec_, ";"> = Dec => ActionFn(602);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action602::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 55)
    }
    pub(crate) fn __reduce115<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim0<Dec_, ";"> =  => ActionFn(603);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action603::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (0, 55)
    }
    pub(crate) fn __reduce116<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim0<Dec_, ";"> = (<Dec_> ";")+, Dec => ActionFn(604);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant30(__symbols);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action604::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (2, 55)
    }
    pub(crate) fn __reduce117<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim0<Dec_, ";"> = (<Dec_> ";")+ => ActionFn(605);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action605::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 55)
    }
    pub(crate) fn __reduce118<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim0<ExpField_, ";"> = ExpField => ActionFn(666);
        let __sym0 = __pop_Variant41(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action666::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant37(__nt), __end));
        (1, 56)
    }
    pub(crate) fn __reduce119<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim0<ExpField_, ";"> =  => ActionFn(667);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action667::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant37(__nt), __end));
        (0, 56)
    }
    pub(crate) fn __reduce120<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim0<ExpField_, ";"> = (<ExpField_> ";")+, ExpField => ActionFn(668);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant41(__symbols);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action668::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant37(__nt), __end));
        (2, 56)
    }
    pub(crate) fn __reduce121<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim0<ExpField_, ";"> = (<ExpField_> ";")+ => ActionFn(669);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action669::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant37(__nt), __end));
        (1, 56)
    }
    pub(crate) fn __reduce122<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim0<ExpNonVar_<Ob>, ","> = ExpNonVar<Ob> => ActionFn(686);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action686::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant38(__nt), __end));
        (1, 57)
    }
    pub(crate) fn __reduce123<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim0<ExpNonVar_<Ob>, ","> =  => ActionFn(687);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action687::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant38(__nt), __end));
        (0, 57)
    }
    pub(crate) fn __reduce124<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim0<ExpNonVar_<Ob>, ","> = (<ExpNonVar_<Ob>> ",")+, ExpNonVar<Ob> => ActionFn(688);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action688::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant38(__nt), __end));
        (2, 57)
    }
    pub(crate) fn __reduce125<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim0<ExpNonVar_<Ob>, ","> = (<ExpNonVar_<Ob>> ",")+ => ActionFn(689);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action689::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant38(__nt), __end));
        (1, 57)
    }
    pub(crate) fn __reduce126<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim0<Node<Case>, ";"> = Case => ActionFn(721);
        let __sym0 = __pop_Variant28(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action721::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant39(__nt), __end));
        (1, 58)
    }
    pub(crate) fn __reduce127<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim0<Node<Case>, ";"> =  => ActionFn(722);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action722::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant39(__nt), __end));
        (0, 58)
    }
    pub(crate) fn __reduce128<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim0<Node<Case>, ";"> = (<Node<Case>> ";")+, Case => ActionFn(723);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant28(__symbols);
        let __sym0 = __pop_Variant15(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action723::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant39(__nt), __end));
        (2, 58)
    }
    pub(crate) fn __reduce129<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim0<Node<Case>, ";"> = (<Node<Case>> ";")+ => ActionFn(724);
        let __sym0 = __pop_Variant15(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action724::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant39(__nt), __end));
        (1, 58)
    }
    pub(crate) fn __reduce130<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim1<Exp_<Ob>, ","> = Exp<Ob> => ActionFn(497);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action497::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant38(__nt), __end));
        (1, 59)
    }
    pub(crate) fn __reduce131<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim1<Exp_<Ob>, ","> = (<Exp_<Ob>> ",")+, Exp<Ob> => ActionFn(717);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action717::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant38(__nt), __end));
        (2, 59)
    }
    pub(crate) fn __reduce132<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim1<Exp_<Ob>, ","> = (<Exp_<Ob>> ",")+ => ActionFn(718);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action718::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant38(__nt), __end));
        (1, 59)
    }
    pub(crate) fn __reduce133<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim1<PatBin_, ","> = PatBin => ActionFn(517);
        let __sym0 = __pop_Variant56(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action517::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant40(__nt), __end));
        (1, 60)
    }
    pub(crate) fn __reduce134<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim1<PatBin_, ","> = (<PatBin_> ",")+, PatBin => ActionFn(729);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant56(__symbols);
        let __sym0 = __pop_Variant17(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action729::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant40(__nt), __end));
        (2, 60)
    }
    pub(crate) fn __reduce135<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim1<PatBin_, ","> = (<PatBin_> ",")+ => ActionFn(730);
        let __sym0 = __pop_Variant17(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action730::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant40(__nt), __end));
        (1, 60)
    }
    pub(crate) fn __reduce136<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Exp<Bl> = ExpNonVar<Bl> => ActionFn(159);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action159::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 61)
    }
    pub(crate) fn __reduce137<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Exp<Bl> = DecVar => ActionFn(600);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action600::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 61)
    }
    pub(crate) fn __reduce138<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Exp<Ob> = ExpNonVar<Ob> => ActionFn(180);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action180::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 62)
    }
    pub(crate) fn __reduce139<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Exp<Ob> = DecVar => ActionFn(601);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action601::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 62)
    }
    pub(crate) fn __reduce140<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin000<Bl> = ExpBin000<Bl>, "or", ExpBin00<Bl> => ActionFn(611);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action611::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 63)
    }
    pub(crate) fn __reduce141<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin000<Bl> = ExpBin00<Bl> => ActionFn(272);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action272::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 63)
    }
    pub(crate) fn __reduce142<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin000<Ob> = ExpBin000<Ob>, "or", ExpBin00<Ob> => ActionFn(614);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action614::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 64)
    }
    pub(crate) fn __reduce143<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin000<Ob> = ExpBin00<Ob> => ActionFn(219);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action219::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 64)
    }
    pub(crate) fn __reduce144<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin000_<Bl> = ExpBin000<Bl> => ActionFn(606);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action606::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 65)
    }
    pub(crate) fn __reduce145<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin000_<Ob> = ExpBin000<Ob> => ActionFn(608);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action608::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 66)
    }
    pub(crate) fn __reduce146<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin00<Bl> = ExpBin00<Bl>, "and", ExpBin0<Bl> => ActionFn(617);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action617::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 67)
    }
    pub(crate) fn __reduce147<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin00<Bl> = ExpBin0<Bl> => ActionFn(283);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action283::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 67)
    }
    pub(crate) fn __reduce148<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin00<Ob> = ExpBin00<Ob>, "and", ExpBin0<Ob> => ActionFn(625);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action625::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 68)
    }
    pub(crate) fn __reduce149<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin00<Ob> = ExpBin0<Ob> => ActionFn(262);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action262::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 68)
    }
    pub(crate) fn __reduce150<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin00_<Bl> = ExpBin00<Bl> => ActionFn(610);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action610::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 69)
    }
    pub(crate) fn __reduce151<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin00_<Ob> = ExpBin00<Ob> => ActionFn(613);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action613::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 70)
    }
    pub(crate) fn __reduce152<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin0<Bl> = ExpBin0<Bl>, "+", ExpBin1<Bl> => ActionFn(633);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action633::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 71)
    }
    pub(crate) fn __reduce153<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin0<Bl> = ExpBin0<Bl>, "+%", ExpBin1<Bl> => ActionFn(634);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action634::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 71)
    }
    pub(crate) fn __reduce154<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin0<Bl> = ExpBin0<Bl>, "-", ExpBin1<Bl> => ActionFn(635);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action635::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 71)
    }
    pub(crate) fn __reduce155<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin0<Bl> = ExpBin0<Bl>, ":", Type => ActionFn(621);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant63(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action621::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 71)
    }
    pub(crate) fn __reduce156<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin0<Bl> = ExpBin1<Bl> => ActionFn(281);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action281::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 71)
    }
    pub(crate) fn __reduce157<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin0<Ob> = ExpBin0<Ob>, "+", ExpBin1<Ob> => ActionFn(639);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action639::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 72)
    }
    pub(crate) fn __reduce158<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin0<Ob> = ExpBin0<Ob>, "+%", ExpBin1<Ob> => ActionFn(640);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action640::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 72)
    }
    pub(crate) fn __reduce159<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin0<Ob> = ExpBin0<Ob>, "-", ExpBin1<Ob> => ActionFn(641);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action641::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 72)
    }
    pub(crate) fn __reduce160<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin0<Ob> = ExpBin0<Ob>, ":", Type => ActionFn(629);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant63(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action629::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 72)
    }
    pub(crate) fn __reduce161<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin0<Ob> = ExpBin1<Ob> => ActionFn(260);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action260::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 72)
    }
    pub(crate) fn __reduce162<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin0_<Bl> = ExpBin0<Bl> => ActionFn(616);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action616::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 73)
    }
    pub(crate) fn __reduce163<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin0_<Ob> = ExpBin0<Ob> => ActionFn(624);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action624::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 74)
    }
    pub(crate) fn __reduce164<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin1<Bl> = ExpBin2<Bl>, "*", ExpBin1<Bl> => ActionFn(645);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action645::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 75)
    }
    pub(crate) fn __reduce165<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin1<Bl> = ExpBin2<Bl>, "/", ExpBin1<Bl> => ActionFn(646);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action646::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 75)
    }
    pub(crate) fn __reduce166<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin1<Bl> = ExpBin2<Bl> => ActionFn(298);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action298::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 75)
    }
    pub(crate) fn __reduce167<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin1<Ob> = ExpBin2<Ob>, "*", ExpBin1<Ob> => ActionFn(649);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action649::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 76)
    }
    pub(crate) fn __reduce168<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin1<Ob> = ExpBin2<Ob>, "/", ExpBin1<Ob> => ActionFn(650);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action650::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 76)
    }
    pub(crate) fn __reduce169<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin1<Ob> = ExpBin2<Ob> => ActionFn(269);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action269::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 76)
    }
    pub(crate) fn __reduce170<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin1_<Bl> = ExpBin1<Bl> => ActionFn(632);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action632::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 77)
    }
    pub(crate) fn __reduce171<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin1_<Ob> = ExpBin1<Ob> => ActionFn(638);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action638::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 78)
    }
    pub(crate) fn __reduce172<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin2<Bl> = ExpBin3<Bl>, "|", ExpBin2<Bl> => ActionFn(653);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action653::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 79)
    }
    pub(crate) fn __reduce173<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin2<Bl> = ExpBin3<Bl> => ActionFn(302);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action302::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 79)
    }
    pub(crate) fn __reduce174<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin2<Ob> = ExpBin3<Ob>, "|", ExpBin2<Ob> => ActionFn(656);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action656::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 80)
    }
    pub(crate) fn __reduce175<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin2<Ob> = ExpBin3<Ob> => ActionFn(288);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action288::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 80)
    }
    pub(crate) fn __reduce176<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin2_<Bl> = ExpBin2<Bl> => ActionFn(644);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action644::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 81)
    }
    pub(crate) fn __reduce177<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin2_<Ob> = ExpBin2<Ob> => ActionFn(648);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action648::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 82)
    }
    pub(crate) fn __reduce178<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin3<Bl> = ExpUn<Bl>, "&", ExpBin3<Bl> => ActionFn(704);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action704::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 83)
    }
    pub(crate) fn __reduce179<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin3<Bl> = ExpUn<Bl> => ActionFn(324);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action324::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 83)
    }
    pub(crate) fn __reduce180<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin3<Ob> = ExpUn<Ob>, "&", ExpBin3<Ob> => ActionFn(708);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action708::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 84)
    }
    pub(crate) fn __reduce181<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin3<Ob> = ExpUn<Ob> => ActionFn(292);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action292::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 84)
    }
    pub(crate) fn __reduce182<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin3_<Bl> = ExpBin3<Bl> => ActionFn(652);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action652::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 85)
    }
    pub(crate) fn __reduce183<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin3_<Ob> = ExpBin3<Ob> => ActionFn(655);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action655::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 86)
    }
    pub(crate) fn __reduce184<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin<Bl> = ExpBin<Bl>, "==", ExpBin0<Bl> => ActionFn(659);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action659::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 87)
    }
    pub(crate) fn __reduce185<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin<Bl> = ExpBin<Bl>, "!=", ExpBin0<Bl> => ActionFn(660);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action660::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 87)
    }
    pub(crate) fn __reduce186<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin<Bl> = ExpBin000<Bl> => ActionFn(254);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action254::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 87)
    }
    pub(crate) fn __reduce187<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin<Ob> = ExpBin<Ob>, "==", ExpBin0<Ob> => ActionFn(663);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action663::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 88)
    }
    pub(crate) fn __reduce188<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin<Ob> = ExpBin<Ob>, "!=", ExpBin0<Ob> => ActionFn(664);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action664::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 88)
    }
    pub(crate) fn __reduce189<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin<Ob> = ExpBin000<Ob> => ActionFn(208);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action208::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 88)
    }
    pub(crate) fn __reduce190<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin_<Bl> = ExpBin<Bl> => ActionFn(658);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action658::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 89)
    }
    pub(crate) fn __reduce191<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin_<Ob> = ExpBin<Ob> => ActionFn(662);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action662::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 90)
    }
    pub(crate) fn __reduce192<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpField = VarOpt, Id, ":", Type, "=", Exp<Ob> => ActionFn(544);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant27(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant63(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant43(__symbols);
        let __sym0 = __pop_Variant65(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action544::<>(lookup, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant41(__nt), __end));
        (6, 91)
    }
    pub(crate) fn __reduce193<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpField = VarOpt, Id, "=", Exp<Ob> => ActionFn(545);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant27(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant43(__symbols);
        let __sym0 = __pop_Variant65(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action545::<>(lookup, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant41(__nt), __end));
        (4, 91)
    }
    pub(crate) fn __reduce194<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpField_ = ExpField => ActionFn(477);
        let __sym0 = __pop_Variant41(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action477::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (1, 92)
    }
    pub(crate) fn __reduce195<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpField_? = ExpField => ActionFn(479);
        let __sym0 = __pop_Variant41(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action479::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant42(__nt), __end));
        (1, 93)
    }
    pub(crate) fn __reduce196<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpField_? =  => ActionFn(188);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action188::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant42(__nt), __end));
        (0, 93)
    }
    pub(crate) fn __reduce197<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNest = Block => ActionFn(59);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action59::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 94)
    }
    pub(crate) fn __reduce198<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNest = Exp<Bl> => ActionFn(60);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action60::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 94)
    }
    pub(crate) fn __reduce199<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNest_ = ExpNest => ActionFn(670);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action670::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 95)
    }
    pub(crate) fn __reduce200<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Bl> = ExpBin<Bl> => ActionFn(233);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action233::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 96)
    }
    pub(crate) fn __reduce201<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Bl> = ExpBin<Bl>, ":=", Exp<Ob> => ActionFn(661);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action661::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 96)
    }
    pub(crate) fn __reduce202<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Bl> = "if", ExpNullary<Ob>, ExpNest, "else", ExpNest => ActionFn(672);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant27(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action672::<>(lookup, input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (5, 96)
    }
    pub(crate) fn __reduce203<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Bl> = "if", ExpNullary<Ob>, ExpNest, "\\no_else" => ActionFn(673);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action673::<>(lookup, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (4, 96)
    }
    pub(crate) fn __reduce204<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Bl> = "return", Exp<Bl> => ActionFn(715);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action715::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 96)
    }
    pub(crate) fn __reduce205<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Bl> = "return" => ActionFn(716);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action716::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 96)
    }
    pub(crate) fn __reduce206<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Bl> = "switch", ExpNullary<Ob>, "{", Cases, "}" => ActionFn(531);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant29(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action531::<>(lookup, input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (5, 96)
    }
    pub(crate) fn __reduce207<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Bl> = "while", ExpNullary<Ob>, ExpNest => ActionFn(674);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action674::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 96)
    }
    pub(crate) fn __reduce208<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Bl> = "for", "(", Pat, "in", Exp<Ob>, ")", ExpNest => ActionFn(743);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant27(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant27(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant56(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym6.2.clone();
        let __nt = super::__action743::<>(lookup, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (7, 96)
    }
    pub(crate) fn __reduce209<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Bl> = "ignore", ExpNest => ActionFn(676);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action676::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 96)
    }
    pub(crate) fn __reduce210<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Bl> = "do", Block => ActionFn(588);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action588::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 96)
    }
    pub(crate) fn __reduce211<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Bl> = "do", "?", Block => ActionFn(589);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action589::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 96)
    }
    pub(crate) fn __reduce212<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Bl> = "assert", ExpNest => ActionFn(677);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action677::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 96)
    }
    pub(crate) fn __reduce213<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Bl> = "debug", ExpNest => ActionFn(678);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action678::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 96)
    }
    pub(crate) fn __reduce214<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Ob> = ExpBin<Ob> => ActionFn(136);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action136::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 97)
    }
    pub(crate) fn __reduce215<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Ob> = ExpBin<Ob>, ":=", Exp<Ob> => ActionFn(665);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action665::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 97)
    }
    pub(crate) fn __reduce216<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Ob> = "if", ExpNullary<Ob>, ExpNest, "else", ExpNest => ActionFn(679);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant27(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action679::<>(lookup, input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (5, 97)
    }
    pub(crate) fn __reduce217<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Ob> = "if", ExpNullary<Ob>, ExpNest, "\\no_else" => ActionFn(680);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action680::<>(lookup, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (4, 97)
    }
    pub(crate) fn __reduce218<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Ob> = "return", Exp<Ob> => ActionFn(719);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action719::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 97)
    }
    pub(crate) fn __reduce219<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Ob> = "return" => ActionFn(720);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action720::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 97)
    }
    pub(crate) fn __reduce220<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Ob> = "switch", ExpNullary<Ob>, "{", Cases, "}" => ActionFn(535);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant29(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action535::<>(lookup, input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (5, 97)
    }
    pub(crate) fn __reduce221<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Ob> = "while", ExpNullary<Ob>, ExpNest => ActionFn(681);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action681::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 97)
    }
    pub(crate) fn __reduce222<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Ob> = "for", "(", Pat, "in", Exp<Ob>, ")", ExpNest => ActionFn(744);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant27(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant27(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant56(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym6.2.clone();
        let __nt = super::__action744::<>(lookup, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (7, 97)
    }
    pub(crate) fn __reduce223<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Ob> = "ignore", ExpNest => ActionFn(683);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action683::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 97)
    }
    pub(crate) fn __reduce224<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Ob> = "do", Block => ActionFn(590);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action590::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 97)
    }
    pub(crate) fn __reduce225<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Ob> = "do", "?", Block => ActionFn(591);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action591::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 97)
    }
    pub(crate) fn __reduce226<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Ob> = "assert", ExpNest => ActionFn(684);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action684::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 97)
    }
    pub(crate) fn __reduce227<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Ob> = "debug", ExpNest => ActionFn(685);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action685::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 97)
    }
    pub(crate) fn __reduce228<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonVar<Bl> = ExpNonDec<Bl> => ActionFn(185);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action185::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 98)
    }
    pub(crate) fn __reduce229<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonVar<Bl> = DecNonVar => ActionFn(597);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action597::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 98)
    }
    pub(crate) fn __reduce230<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonVar<Ob> = ExpNonDec<Ob> => ActionFn(246);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action246::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 99)
    }
    pub(crate) fn __reduce231<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonVar<Ob> = DecNonVar => ActionFn(598);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action598::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 99)
    }
    pub(crate) fn __reduce232<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonVar_<Ob> = ExpNonVar<Ob> => ActionFn(484);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action484::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 100)
    }
    pub(crate) fn __reduce233<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonVar_<Ob>? = ExpNonVar<Ob> => ActionFn(486);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action486::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (1, 101)
    }
    pub(crate) fn __reduce234<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonVar_<Ob>? =  => ActionFn(338);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action338::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (0, 101)
    }
    pub(crate) fn __reduce235<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNullary<Bl> = Bl => ActionFn(357);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action357::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 102)
    }
    pub(crate) fn __reduce236<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNullary<Bl> = ExpPlain => ActionFn(358);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action358::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 102)
    }
    pub(crate) fn __reduce237<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNullary<Bl> = Id => ActionFn(359);
        let __sym0 = __pop_Variant43(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action359::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 102)
    }
    pub(crate) fn __reduce238<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNullary<Bl> = "prim", StringLiteral => ActionFn(360);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant62(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action360::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 102)
    }
    pub(crate) fn __reduce239<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNullary<Ob> = Ob => ActionFn(223);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action223::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 103)
    }
    pub(crate) fn __reduce240<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNullary<Ob> = ExpPlain => ActionFn(224);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action224::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 103)
    }
    pub(crate) fn __reduce241<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNullary<Ob> = Id => ActionFn(225);
        let __sym0 = __pop_Variant43(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action225::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 103)
    }
    pub(crate) fn __reduce242<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNullary<Ob> = "prim", StringLiteral => ActionFn(226);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant62(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action226::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 103)
    }
    pub(crate) fn __reduce243<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNullary_<Bl> = ExpNullary<Bl> => ActionFn(522);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action522::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 104)
    }
    pub(crate) fn __reduce244<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNullary_<Ob> = ExpNullary<Ob> => ActionFn(527);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action527::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 105)
    }
    pub(crate) fn __reduce245<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpObj = "{", Delim0<ExpField_, ";">, "}" => ActionFn(63);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant37(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action63::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 106)
    }
    pub(crate) fn __reduce246<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpPlain = Literal => ActionFn(54);
        let __sym0 = __pop_Variant44(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action54::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 107)
    }
    pub(crate) fn __reduce247<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpPlain = "(", Delim1<Exp_<Ob>, ",">, ")" => ActionFn(55);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant38(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action55::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 107)
    }
    pub(crate) fn __reduce248<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpPlain_ = ExpPlain => ActionFn(690);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action690::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 108)
    }
    pub(crate) fn __reduce249<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpPost<Bl> = ExpNullary<Bl> => ActionFn(348);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action348::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 109)
    }
    pub(crate) fn __reduce250<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpPost<Bl> = "[", VarOpt, Delim0<ExpNonVar_<Ob>, ",">, "]" => ActionFn(349);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant38(__symbols);
        let __sym1 = __pop_Variant65(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action349::<>(lookup, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (4, 109)
    }
    pub(crate) fn __reduce251<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpPost<Bl> = ExpPost<Bl>, "[", Exp<Ob>, "]" => ActionFn(692);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action692::<>(lookup, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (4, 109)
    }
    pub(crate) fn __reduce252<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpPost<Bl> = ExpPost<Bl>, ".", NatIndex => ActionFn(693);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant25(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action693::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 109)
    }
    pub(crate) fn __reduce253<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpPost<Bl> = ExpPost<Bl>, ".", Id => ActionFn(694);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant43(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action694::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 109)
    }
    pub(crate) fn __reduce254<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpPost<Bl> = ExpPost<Bl>, ExpNullary<Ob> => ActionFn(695);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action695::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 109)
    }
    pub(crate) fn __reduce255<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpPost<Bl> = ExpPost<Bl>, "!" => ActionFn(696);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action696::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 109)
    }
    pub(crate) fn __reduce256<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpPost<Ob> = ExpNullary<Ob> => ActionFn(315);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action315::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 110)
    }
    pub(crate) fn __reduce257<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpPost<Ob> = "[", VarOpt, Delim0<ExpNonVar_<Ob>, ",">, "]" => ActionFn(316);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant38(__symbols);
        let __sym1 = __pop_Variant65(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action316::<>(lookup, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (4, 110)
    }
    pub(crate) fn __reduce258<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpPost<Ob> = ExpPost<Ob>, "[", Exp<Ob>, "]" => ActionFn(698);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action698::<>(lookup, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (4, 110)
    }
    pub(crate) fn __reduce259<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpPost<Ob> = ExpPost<Ob>, ".", NatIndex => ActionFn(699);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant25(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action699::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 110)
    }
    pub(crate) fn __reduce260<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpPost<Ob> = ExpPost<Ob>, ".", Id => ActionFn(700);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant43(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action700::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 110)
    }
    pub(crate) fn __reduce261<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpPost<Ob> = ExpPost<Ob>, ExpNullary<Ob> => ActionFn(701);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action701::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 110)
    }
    pub(crate) fn __reduce262<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpPost<Ob> = ExpPost<Ob>, "!" => ActionFn(702);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action702::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 110)
    }
    pub(crate) fn __reduce263<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpPost_<Bl> = ExpPost<Bl> => ActionFn(691);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action691::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 111)
    }
    pub(crate) fn __reduce264<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpPost_<Ob> = ExpPost<Ob> => ActionFn(697);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action697::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 112)
    }
    pub(crate) fn __reduce265<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpUn<Bl> = ExpPost<Bl> => ActionFn(327);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action327::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 113)
    }
    pub(crate) fn __reduce266<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpUn<Bl> = "#", Id, ExpNullary<Bl> => ActionFn(548);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant43(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action548::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 113)
    }
    pub(crate) fn __reduce267<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpUn<Bl> = "#", Id => ActionFn(549);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant43(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action549::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 113)
    }
    pub(crate) fn __reduce268<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpUn<Bl> = "?", ExpUn<Ob> => ActionFn(709);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action709::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 113)
    }
    pub(crate) fn __reduce269<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpUn<Bl> = UnOp, ExpUn<Bl> => ActionFn(705);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant64(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action705::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 113)
    }
    pub(crate) fn __reduce270<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpUn<Bl> = "not", ExpUn<Bl> => ActionFn(706);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action706::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 113)
    }
    pub(crate) fn __reduce271<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpUn<Ob> = ExpPost<Ob> => ActionFn(305);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action305::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 114)
    }
    pub(crate) fn __reduce272<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpUn<Ob> = "#", Id, ExpNullary<Ob> => ActionFn(550);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant43(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action550::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 114)
    }
    pub(crate) fn __reduce273<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpUn<Ob> = "#", Id => ActionFn(551);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant43(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action551::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 114)
    }
    pub(crate) fn __reduce274<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpUn<Ob> = "?", ExpUn<Ob> => ActionFn(710);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action710::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 114)
    }
    pub(crate) fn __reduce275<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpUn<Ob> = UnOp, ExpUn<Ob> => ActionFn(711);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant64(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action711::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 114)
    }
    pub(crate) fn __reduce276<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpUn<Ob> = "not", ExpUn<Ob> => ActionFn(712);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action712::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 114)
    }
    pub(crate) fn __reduce277<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpUn_<Bl> = ExpUn<Bl> => ActionFn(703);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action703::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 115)
    }
    pub(crate) fn __reduce278<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpUn_<Ob> = ExpUn<Ob> => ActionFn(707);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action707::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 116)
    }
    pub(crate) fn __reduce279<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Exp_<Bl> = Exp<Bl> => ActionFn(713);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action713::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 117)
    }
    pub(crate) fn __reduce280<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Exp_<Bl>? = Exp<Bl> => ActionFn(714);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action714::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (1, 118)
    }
    pub(crate) fn __reduce281<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Exp_<Bl>? =  => ActionFn(249);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action249::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (0, 118)
    }
    pub(crate) fn __reduce282<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Exp_<Ob> = Exp<Ob> => ActionFn(491);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action491::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 119)
    }
    pub(crate) fn __reduce283<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Exp_<Ob>? = Exp<Ob> => ActionFn(506);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action506::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (1, 120)
    }
    pub(crate) fn __reduce284<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Exp_<Ob>? =  => ActionFn(203);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action203::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (0, 120)
    }
    pub(crate) fn __reduce285<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Id = r#"[a-zA-Z_][a-zA-Z_0-9]*"# => ActionFn(8);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action8::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant43(__nt), __end));
        (1, 121)
    }
    pub(crate) fn __reduce286<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Id_ = Id => ActionFn(542);
        let __sym0 = __pop_Variant43(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action542::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (1, 122)
    }
    pub(crate) fn __reduce287<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Id_? = Id => ActionFn(552);
        let __sym0 = __pop_Variant43(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action552::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 123)
    }
    pub(crate) fn __reduce288<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Id_? =  => ActionFn(126);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action126::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (0, 123)
    }
    pub(crate) fn __reduce289<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Literal = "null" => ActionFn(10);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action10::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant44(__nt), __end));
        (1, 124)
    }
    pub(crate) fn __reduce290<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Literal = "true" => ActionFn(11);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action11::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant44(__nt), __end));
        (1, 124)
    }
    pub(crate) fn __reduce291<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Literal = "false" => ActionFn(12);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action12::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant44(__nt), __end));
        (1, 124)
    }
    pub(crate) fn __reduce292<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Literal = "(", ")" => ActionFn(13);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action13::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant44(__nt), __end));
        (2, 124)
    }
    pub(crate) fn __reduce293<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Literal = r#"[+-]?[0-9]([0-9_]*[0-9])?[Ee][0-9]([0-9_]*[0-9])?"# => ActionFn(14);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action14::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant44(__nt), __end));
        (1, 124)
    }
    pub(crate) fn __reduce294<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Literal = r#"[+-]?[0-9]([0-9_]*[0-9])?\\.([0-9]([0-9_]*[0-9])?)?([Ee][0-9]([0-9_]*[0-9])?)?"# => ActionFn(15);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action15::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant44(__nt), __end));
        (1, 124)
    }
    pub(crate) fn __reduce295<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Literal = r#"0x[0-9a-fA-F]+"# => ActionFn(16);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action16::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant44(__nt), __end));
        (1, 124)
    }
    pub(crate) fn __reduce296<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Literal = r#"[0-9]([0-9_]*[0-9])?"# => ActionFn(17);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action17::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant44(__nt), __end));
        (1, 124)
    }
    pub(crate) fn __reduce297<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Literal = r#"'(?:[^\\\\'\\s]|\\\\.)*'|' '"# => ActionFn(18);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action18::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant44(__nt), __end));
        (1, 124)
    }
    pub(crate) fn __reduce298<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Literal = StringLiteral => ActionFn(19);
        let __sym0 = __pop_Variant62(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action19::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant44(__nt), __end));
        (1, 124)
    }
    pub(crate) fn __reduce299<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // NatIndex = r#"[0-9]([0-9_]*[0-9])?"# => ActionFn(7);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action7::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (1, 125)
    }
    pub(crate) fn __reduce300<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<Block> = Block => ActionFn(407);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action407::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 126)
    }
    pub(crate) fn __reduce301<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<Case> = Case => ActionFn(408);
        let __sym0 = __pop_Variant28(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action408::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (1, 127)
    }
    pub(crate) fn __reduce302<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<Case>? = Case => ActionFn(510);
        let __sym0 = __pop_Variant28(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action510::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant46(__nt), __end));
        (1, 128)
    }
    pub(crate) fn __reduce303<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<Case>? =  => ActionFn(193);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action193::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant46(__nt), __end));
        (0, 128)
    }
    pub(crate) fn __reduce304<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<Dec> = Dec => ActionFn(409);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action409::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant47(__nt), __end));
        (1, 129)
    }
    pub(crate) fn __reduce305<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<DecField> = DecField => ActionFn(410);
        let __sym0 = __pop_Variant31(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action410::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant48(__nt), __end));
        (1, 130)
    }
    pub(crate) fn __reduce306<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<DecNonVar> = DecNonVar => ActionFn(411);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action411::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant47(__nt), __end));
        (1, 131)
    }
    pub(crate) fn __reduce307<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<DecVar> = DecVar => ActionFn(412);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action412::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant47(__nt), __end));
        (1, 132)
    }
    pub(crate) fn __reduce308<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<Exp<Bl>> = Exp<Bl> => ActionFn(413);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action413::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 133)
    }
    pub(crate) fn __reduce309<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<Exp<Ob>> = Exp<Ob> => ActionFn(414);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action414::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 134)
    }
    pub(crate) fn __reduce310<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpBin000<Bl>> = ExpBin000<Bl> => ActionFn(415);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action415::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 135)
    }
    pub(crate) fn __reduce311<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpBin000<Ob>> = ExpBin000<Ob> => ActionFn(416);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action416::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 136)
    }
    pub(crate) fn __reduce312<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpBin00<Bl>> = ExpBin00<Bl> => ActionFn(417);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action417::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 137)
    }
    pub(crate) fn __reduce313<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpBin00<Ob>> = ExpBin00<Ob> => ActionFn(418);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action418::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 138)
    }
    pub(crate) fn __reduce314<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpBin0<Bl>> = ExpBin0<Bl> => ActionFn(419);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action419::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 139)
    }
    pub(crate) fn __reduce315<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpBin0<Ob>> = ExpBin0<Ob> => ActionFn(420);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action420::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 140)
    }
    pub(crate) fn __reduce316<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpBin1<Bl>> = ExpBin1<Bl> => ActionFn(421);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action421::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 141)
    }
    pub(crate) fn __reduce317<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpBin1<Ob>> = ExpBin1<Ob> => ActionFn(422);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action422::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 142)
    }
    pub(crate) fn __reduce318<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpBin2<Bl>> = ExpBin2<Bl> => ActionFn(423);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action423::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 143)
    }
    pub(crate) fn __reduce319<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpBin2<Ob>> = ExpBin2<Ob> => ActionFn(424);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action424::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 144)
    }
    pub(crate) fn __reduce320<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpBin3<Bl>> = ExpBin3<Bl> => ActionFn(425);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action425::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 145)
    }
    pub(crate) fn __reduce321<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpBin3<Ob>> = ExpBin3<Ob> => ActionFn(426);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action426::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 146)
    }
    pub(crate) fn __reduce322<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpBin<Bl>> = ExpBin<Bl> => ActionFn(427);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action427::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 147)
    }
    pub(crate) fn __reduce323<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpBin<Ob>> = ExpBin<Ob> => ActionFn(428);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action428::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 148)
    }
    pub(crate) fn __reduce324<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpField> = ExpField => ActionFn(429);
        let __sym0 = __pop_Variant41(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action429::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (1, 149)
    }
    pub(crate) fn __reduce325<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpNest> = ExpNest => ActionFn(430);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action430::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 150)
    }
    pub(crate) fn __reduce326<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpNonVar<Ob>> = ExpNonVar<Ob> => ActionFn(431);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action431::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 151)
    }
    pub(crate) fn __reduce327<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpNullary<Bl>> = ExpNullary<Bl> => ActionFn(432);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action432::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 152)
    }
    pub(crate) fn __reduce328<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpNullary<Ob>> = ExpNullary<Ob> => ActionFn(433);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action433::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 153)
    }
    pub(crate) fn __reduce329<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpPlain> = ExpPlain => ActionFn(434);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action434::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 154)
    }
    pub(crate) fn __reduce330<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpPost<Bl>> = ExpPost<Bl> => ActionFn(435);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action435::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 155)
    }
    pub(crate) fn __reduce331<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpPost<Ob>> = ExpPost<Ob> => ActionFn(436);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action436::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 156)
    }
    pub(crate) fn __reduce332<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpUn<Bl>> = ExpUn<Bl> => ActionFn(437);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action437::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 157)
    }
    pub(crate) fn __reduce333<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpUn<Ob>> = ExpUn<Ob> => ActionFn(438);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action438::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 158)
    }
    pub(crate) fn __reduce334<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<Id> = Id => ActionFn(439);
        let __sym0 = __pop_Variant43(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action439::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant49(__nt), __end));
        (1, 159)
    }
    pub(crate) fn __reduce335<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<Pat> = Pat => ActionFn(440);
        let __sym0 = __pop_Variant56(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action440::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant50(__nt), __end));
        (1, 160)
    }
    pub(crate) fn __reduce336<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<PatBin> = PatBin => ActionFn(441);
        let __sym0 = __pop_Variant56(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action441::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant50(__nt), __end));
        (1, 161)
    }
    pub(crate) fn __reduce337<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<PatNullary> = PatNullary => ActionFn(442);
        let __sym0 = __pop_Variant56(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action442::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant50(__nt), __end));
        (1, 162)
    }
    pub(crate) fn __reduce338<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<PatPlain> = PatPlain => ActionFn(443);
        let __sym0 = __pop_Variant56(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action443::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant50(__nt), __end));
        (1, 163)
    }
    pub(crate) fn __reduce339<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<SortPat> = SortPat => ActionFn(444);
        let __sym0 = __pop_Variant59(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action444::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant51(__nt), __end));
        (1, 164)
    }
    pub(crate) fn __reduce340<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<Stab> = Stab => ActionFn(445);
        let __sym0 = __pop_Variant61(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action445::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant52(__nt), __end));
        (1, 165)
    }
    pub(crate) fn __reduce341<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<Type> = Type => ActionFn(446);
        let __sym0 = __pop_Variant63(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action446::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant53(__nt), __end));
        (1, 166)
    }
    pub(crate) fn __reduce342<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<Vis> = Vis => ActionFn(447);
        let __sym0 = __pop_Variant66(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action447::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant54(__nt), __end));
        (1, 167)
    }
    pub(crate) fn __reduce343<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Ob = ExpObj => ActionFn(6);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action6::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 168)
    }
    pub(crate) fn __reduce344<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ObjBody = "{", Delim0<DecField_, ";">, "}" => ActionFn(103);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant35(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action103::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant55(__nt), __end));
        (3, 169)
    }
    pub(crate) fn __reduce345<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Pat = PatBin => ActionFn(35);
        let __sym0 = __pop_Variant56(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action35::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant56(__nt), __end));
        (1, 170)
    }
    pub(crate) fn __reduce346<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PatBin = PatBin, ":", Type => ActionFn(518);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant63(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant56(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action518::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant56(__nt), __end));
        (3, 171)
    }
    pub(crate) fn __reduce347<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PatBin = PatUn => ActionFn(30);
        let __sym0 = __pop_Variant56(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action30::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant56(__nt), __end));
        (1, 171)
    }
    pub(crate) fn __reduce348<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PatBin_ = PatBin => ActionFn(515);
        let __sym0 = __pop_Variant56(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action515::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (1, 172)
    }
    pub(crate) fn __reduce349<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PatBin_? = PatBin => ActionFn(519);
        let __sym0 = __pop_Variant56(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action519::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 173)
    }
    pub(crate) fn __reduce350<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PatBin_? =  => ActionFn(175);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action175::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (0, 173)
    }
    pub(crate) fn __reduce351<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PatNullary = PatPlain => ActionFn(27);
        let __sym0 = __pop_Variant56(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action27::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant56(__nt), __end));
        (1, 174)
    }
    pub(crate) fn __reduce352<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PatNullary_ = PatNullary => ActionFn(726);
        let __sym0 = __pop_Variant56(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action726::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (1, 175)
    }
    pub(crate) fn __reduce353<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PatPlain = "_" => ActionFn(22);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action22::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant56(__nt), __end));
        (1, 176)
    }
    pub(crate) fn __reduce354<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PatPlain = Id => ActionFn(553);
        let __sym0 = __pop_Variant43(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action553::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant56(__nt), __end));
        (1, 176)
    }
    pub(crate) fn __reduce355<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PatPlain = Literal => ActionFn(24);
        let __sym0 = __pop_Variant44(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action24::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant56(__nt), __end));
        (1, 176)
    }
    pub(crate) fn __reduce356<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PatPlain = "(", Delim1<PatBin_, ",">, ")" => ActionFn(25);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant40(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action25::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant56(__nt), __end));
        (3, 176)
    }
    pub(crate) fn __reduce357<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PatPlain_ = PatPlain => ActionFn(727);
        let __sym0 = __pop_Variant56(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action727::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (1, 177)
    }
    pub(crate) fn __reduce358<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PatUn = PatNullary => ActionFn(31);
        let __sym0 = __pop_Variant56(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action31::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant56(__nt), __end));
        (1, 178)
    }
    pub(crate) fn __reduce359<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PatUn = "#", Id => ActionFn(554);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant43(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action554::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant56(__nt), __end));
        (2, 178)
    }
    pub(crate) fn __reduce360<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PatUn = "#", Id, PatNullary => ActionFn(732);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant56(__symbols);
        let __sym1 = __pop_Variant43(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action732::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant56(__nt), __end));
        (3, 178)
    }
    pub(crate) fn __reduce361<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Pat_ = Pat => ActionFn(725);
        let __sym0 = __pop_Variant56(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action725::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (1, 179)
    }
    pub(crate) fn __reduce362<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PrimType = "(", ")" => ActionFn(36);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action36::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant58(__nt), __end));
        (2, 180)
    }
    pub(crate) fn __reduce363<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PrimType = "Bool" => ActionFn(37);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action37::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant58(__nt), __end));
        (1, 180)
    }
    pub(crate) fn __reduce364<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PrimType = "Nat" => ActionFn(38);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action38::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant58(__nt), __end));
        (1, 180)
    }
    pub(crate) fn __reduce365<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PrimType = "Nat8" => ActionFn(39);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action39::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant58(__nt), __end));
        (1, 180)
    }
    pub(crate) fn __reduce366<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PrimType = "Nat16" => ActionFn(40);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action40::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant58(__nt), __end));
        (1, 180)
    }
    pub(crate) fn __reduce367<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PrimType = "Nat32" => ActionFn(41);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action41::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant58(__nt), __end));
        (1, 180)
    }
    pub(crate) fn __reduce368<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PrimType = "Nat64" => ActionFn(42);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action42::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant58(__nt), __end));
        (1, 180)
    }
    pub(crate) fn __reduce369<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PrimType = "Int" => ActionFn(43);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action43::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant58(__nt), __end));
        (1, 180)
    }
    pub(crate) fn __reduce370<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PrimType = "Int8" => ActionFn(44);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action44::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant58(__nt), __end));
        (1, 180)
    }
    pub(crate) fn __reduce371<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PrimType = "Int16" => ActionFn(45);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action45::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant58(__nt), __end));
        (1, 180)
    }
    pub(crate) fn __reduce372<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PrimType = "Int32" => ActionFn(46);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action46::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant58(__nt), __end));
        (1, 180)
    }
    pub(crate) fn __reduce373<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PrimType = "Int64" => ActionFn(47);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action47::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant58(__nt), __end));
        (1, 180)
    }
    pub(crate) fn __reduce374<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PrimType = "Principal" => ActionFn(48);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action48::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant58(__nt), __end));
        (1, 180)
    }
    pub(crate) fn __reduce375<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PrimType = "Text" => ActionFn(49);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action49::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant58(__nt), __end));
        (1, 180)
    }
    pub(crate) fn __reduce376<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Prog = Decs => ActionFn(52);
        let __sym0 = __pop_Variant34(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action52::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant34(__nt), __end));
        (1, 181)
    }
    pub(crate) fn __reduce377<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // SortPat =  => ActionFn(80);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action80::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant59(__nt), __end));
        (0, 182)
    }
    pub(crate) fn __reduce378<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // SortPat_ = SortPat => ActionFn(728);
        let __sym0 = __pop_Variant59(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action728::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant60(__nt), __end));
        (1, 183)
    }
    pub(crate) fn __reduce379<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Stab = "stable" => ActionFn(108);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action108::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant61(__nt), __end));
        (1, 184)
    }
    pub(crate) fn __reduce380<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Stab = "flexible" => ActionFn(109);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action109::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant61(__nt), __end));
        (1, 184)
    }
    pub(crate) fn __reduce381<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Stab_ = Stab => ActionFn(571);
        let __sym0 = __pop_Variant61(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action571::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (1, 185)
    }
    pub(crate) fn __reduce382<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // StringLiteral = r#"\"(?:[^\\\\\"\\n]|\\\\.)*\""# => ActionFn(20);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action20::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant62(__nt), __end));
        (1, 186)
    }
    pub(crate) fn __reduce383<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // TextId = Id => ActionFn(64);
        let __sym0 = __pop_Variant43(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action64::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant62(__nt), __end));
        (1, 187)
    }
    pub(crate) fn __reduce384<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Type = PrimType => ActionFn(51);
        let __sym0 = __pop_Variant58(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action51::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant63(__nt), __end));
        (1, 188)
    }
    pub(crate) fn __reduce385<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Type_ = Type => ActionFn(448);
        let __sym0 = __pop_Variant63(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action448::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 189)
    }
    pub(crate) fn __reduce386<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // UnOp = "+" => ActionFn(83);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action83::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant64(__nt), __end));
        (1, 190)
    }
    pub(crate) fn __reduce387<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // UnOp = "-" => ActionFn(84);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action84::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant64(__nt), __end));
        (1, 190)
    }
    pub(crate) fn __reduce388<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // UnOp = "^" => ActionFn(85);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action85::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant64(__nt), __end));
        (1, 190)
    }
    pub(crate) fn __reduce389<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // VarOpt = "var" => ActionFn(56);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action56::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant65(__nt), __end));
        (1, 191)
    }
    pub(crate) fn __reduce390<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // VarOpt =  => ActionFn(57);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action57::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant65(__nt), __end));
        (0, 191)
    }
    pub(crate) fn __reduce391<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Vis = "public" => ActionFn(105);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action105::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant66(__nt), __end));
        (1, 192)
    }
    pub(crate) fn __reduce392<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Vis = "private" => ActionFn(106);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action106::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant66(__nt), __end));
        (1, 192)
    }
    pub(crate) fn __reduce393<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Vis_ = Vis => ActionFn(576);
        let __sym0 = __pop_Variant66(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action576::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (1, 193)
    }
    pub(crate) fn __reduce394<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // __Literal = Literal => ActionFn(0);
        let __sym0 = __pop_Variant44(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action0::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant44(__nt), __end));
        (1, 194)
    }
    pub(crate) fn __reduce395<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // __Pat = Pat => ActionFn(1);
        let __sym0 = __pop_Variant56(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action1::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant56(__nt), __end));
        (1, 195)
    }
    pub(crate) fn __reduce396<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // __PrimType = PrimType => ActionFn(2);
        let __sym0 = __pop_Variant58(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action2::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant58(__nt), __end));
        (1, 196)
    }
    pub(crate) fn __reduce398<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // __Type = Type => ActionFn(3);
        let __sym0 = __pop_Variant63(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action3::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant63(__nt), __end));
        (1, 198)
    }
}
pub use self::__parse__Prog::ProgParser;

#[cfg_attr(rustfmt, rustfmt_skip)]
mod __parse__Type {
    #![allow(non_snake_case, non_camel_case_types, unused_mut, unused_variables, unused_imports, unused_parens, clippy::all)]

    use crate::parser_utils::{dec_node_into_exp, get_one, node};
    use crate::ast::{Node, Source, Id, Id_, Pat, Pat_, Exp, Exp_, ExpField, Type, Type_, PrimType, Literal, Case, Cases, Decs, Dec, Dec_, UnOp, BinOp, RelOp, Delim, Mut, SortPat, SortPat_, Sugar, Vis, Vis_, Stab, Stab_, DecField, DecField_, DecFields};
    use line_col::LineColLookup;
    #[allow(unused_extern_crates)]
    extern crate lalrpop_util as __lalrpop_util;
    #[allow(unused_imports)]
    use self::__lalrpop_util::state_machine as __state_machine;
    extern crate core;
    extern crate alloc;
    use self::__lalrpop_util::lexer::Token;
    #[allow(dead_code)]
    pub(crate) enum __Symbol<'input>
     {
        Variant0(&'input str),
        Variant1(core::option::Option<&'input str>),
        Variant2(Type_),
        Variant3(core::option::Option<Type_>),
        Variant4((&'input str, Type_)),
        Variant5(core::option::Option<(&'input str, Type_)>),
        Variant6(DecField_),
        Variant7(alloc::vec::Vec<DecField_>),
        Variant8(Dec_),
        Variant9(alloc::vec::Vec<Dec_>),
        Variant10(Node<ExpField>),
        Variant11(alloc::vec::Vec<Node<ExpField>>),
        Variant12(Exp_),
        Variant13(alloc::vec::Vec<Exp_>),
        Variant14(Node<Case>),
        Variant15(alloc::vec::Vec<Node<Case>>),
        Variant16(Pat_),
        Variant17(alloc::vec::Vec<Pat_>),
        Variant18(core::option::Option<Exp_>),
        Variant19(Id_),
        Variant20(core::option::Option<Id_>),
        Variant21(Stab_),
        Variant22(core::option::Option<Stab_>),
        Variant23(Vis_),
        Variant24(core::option::Option<Vis_>),
        Variant25(usize),
        Variant26(BinOp),
        Variant27(Exp),
        Variant28(Case),
        Variant29(Cases),
        Variant30(Dec),
        Variant31(DecField),
        Variant32(core::option::Option<DecField_>),
        Variant33(core::option::Option<Dec_>),
        Variant34(Decs),
        Variant35(Delim<DecField_>),
        Variant36(Delim<Dec_>),
        Variant37(Delim<Node<ExpField>>),
        Variant38(Delim<Exp_>),
        Variant39(Delim<Node<Case>>),
        Variant40(Delim<Pat_>),
        Variant41(ExpField),
        Variant42(core::option::Option<Node<ExpField>>),
        Variant43(Id),
        Variant44(Literal),
        Variant45(Node<Exp>),
        Variant46(core::option::Option<Node<Case>>),
        Variant47(Node<Dec>),
        Variant48(Node<DecField>),
        Variant49(Node<Id>),
        Variant50(Node<Pat>),
        Variant51(Node<SortPat>),
        Variant52(Node<Stab>),
        Variant53(Node<Type>),
        Variant54(Node<Vis>),
        Variant55(DecFields),
        Variant56(Pat),
        Variant57(core::option::Option<Pat_>),
        Variant58(PrimType),
        Variant59(SortPat),
        Variant60(SortPat_),
        Variant61(Stab),
        Variant62(String),
        Variant63(Type),
        Variant64(UnOp),
        Variant65(Mut),
        Variant66(Vis),
    }
    const __ACTION: &[i16] = &[
        // State 0
        0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 1
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 2
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 3
        0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 4
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 5
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 6
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 7
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 8
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 9
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 10
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 11
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 12
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 13
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 14
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 15
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 16
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 17
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    ];
    fn __action(state: i16, integer: usize) -> i16 {
        __ACTION[(state as usize) * 83 + integer]
    }
    const __EOF_ACTION: &[i16] = &[
        // State 0
        0,
        // State 1
        -385,
        // State 2
        -399,
        // State 3
        0,
        // State 4
        -364,
        // State 5
        -370,
        // State 6
        -372,
        // State 7
        -373,
        // State 8
        -374,
        // State 9
        -371,
        // State 10
        -365,
        // State 11
        -367,
        // State 12
        -368,
        // State 13
        -369,
        // State 14
        -366,
        // State 15
        -375,
        // State 16
        -376,
        // State 17
        -363,
    ];
    fn __goto(state: i16, nt: usize) -> i16 {
        match nt {
            180 => 1,
            188 => 2,
            _ => 0,
        }
    }
    fn __expected_tokens(__state: i16) -> alloc::vec::Vec<alloc::string::String> {
        const __TERMINAL: &[&str] = &[
            r###""!""###,
            r###""!=""###,
            r###""#""###,
            r###""%""###,
            r###""&""###,
            r###""(""###,
            r###"")""###,
            r###""*""###,
            r###""*%""###,
            r###""**""###,
            r###""**%""###,
            r###""+""###,
            r###""+%""###,
            r###"",""###,
            r###""-""###,
            r###""-%""###,
            r###"".""###,
            r###""/""###,
            r###"":""###,
            r###"":=""###,
            r###"";""###,
            r###""<<""###,
            r###""<<>""###,
            r###""<>>""###,
            r###""=""###,
            r###""==""###,
            r###""?""###,
            r###""Bool""###,
            r###""Int""###,
            r###""Int16""###,
            r###""Int32""###,
            r###""Int64""###,
            r###""Int8""###,
            r###""Nat""###,
            r###""Nat16""###,
            r###""Nat32""###,
            r###""Nat64""###,
            r###""Nat8""###,
            r###""Principal""###,
            r###""Text""###,
            r###""[""###,
            r###""\\no_else""###,
            r###""]""###,
            r###""^""###,
            r###""_""###,
            r###""and""###,
            r###""assert""###,
            r###""case""###,
            r###""debug""###,
            r###""do""###,
            r###""else""###,
            r###""false""###,
            r###""flexible""###,
            r###""for""###,
            r###""func""###,
            r###""if""###,
            r###""ignore""###,
            r###""in""###,
            r###""let""###,
            r###""module""###,
            r###""not""###,
            r###""null""###,
            r###""or""###,
            r###""prim""###,
            r###""private""###,
            r###""public""###,
            r###""return""###,
            r###""stable""###,
            r###""switch""###,
            r###""true""###,
            r###""var""###,
            r###""while""###,
            r###""{""###,
            r###""|""###,
            r###""}""###,
            r###"r#"\"(?:[^\\\\\"\\n]|\\\\.)*\""#"###,
            r###"r#"'(?:[^\\\\'\\s]|\\\\.)*'|' '"#"###,
            r###"r#"0x[0-9a-fA-F]+"#"###,
            r###"r#"[+-]?[0-9]([0-9_]*[0-9])?[Ee][0-9]([0-9_]*[0-9])?"#"###,
            r###"r#"[+-]?[0-9]([0-9_]*[0-9])?\\.([0-9]([0-9_]*[0-9])?)?([Ee][0-9]([0-9_]*[0-9])?)?"#"###,
            r###"r#"[0-9]([0-9_]*[0-9])?"#"###,
            r###"r#"[a-zA-Z_][a-zA-Z_0-9]*"#"###,
            r###"r#"\\\\\\\\BIG.FART."#"###,
        ];
        __TERMINAL.iter().enumerate().filter_map(|(index, terminal)| {
            let next_state = __action(__state, index);
            if next_state == 0 {
                None
            } else {
                Some(alloc::string::ToString::to_string(terminal))
            }
        }).collect()
    }
    pub(crate) struct __StateMachine<'input, '__1>
    where 'input: '__1
    {
        lookup: &'__1 LineColLookup<'input>,
        input: &'input str,
        __phantom: core::marker::PhantomData<(&'input ())>,
    }
    impl<'input, '__1> __state_machine::ParserDefinition for __StateMachine<'input, '__1>
    where 'input: '__1
    {
        type Location = usize;
        type Error = &'static str;
        type Token = Token<'input>;
        type TokenIndex = usize;
        type Symbol = __Symbol<'input>;
        type Success = Type;
        type StateIndex = i16;
        type Action = i16;
        type ReduceIndex = i16;
        type NonterminalIndex = usize;

        #[inline]
        fn start_location(&self) -> Self::Location {
              Default::default()
        }

        #[inline]
        fn start_state(&self) -> Self::StateIndex {
              0
        }

        #[inline]
        fn token_to_index(&self, token: &Self::Token) -> Option<usize> {
            __token_to_integer(token, core::marker::PhantomData::<(&())>)
        }

        #[inline]
        fn action(&self, state: i16, integer: usize) -> i16 {
            __action(state, integer)
        }

        #[inline]
        fn error_action(&self, state: i16) -> i16 {
            __action(state, 83 - 1)
        }

        #[inline]
        fn eof_action(&self, state: i16) -> i16 {
            __EOF_ACTION[state as usize]
        }

        #[inline]
        fn goto(&self, state: i16, nt: usize) -> i16 {
            __goto(state, nt)
        }

        fn token_to_symbol(&self, token_index: usize, token: Self::Token) -> Self::Symbol {
            __token_to_symbol(token_index, token, core::marker::PhantomData::<(&())>)
        }

        fn expected_tokens(&self, state: i16) -> alloc::vec::Vec<alloc::string::String> {
            __expected_tokens(state)
        }

        #[inline]
        fn uses_error_recovery(&self) -> bool {
            false
        }

        #[inline]
        fn error_recovery_symbol(
            &self,
            recovery: __state_machine::ErrorRecovery<Self>,
        ) -> Self::Symbol {
            panic!("error recovery not enabled for this grammar")
        }

        fn reduce(
            &mut self,
            action: i16,
            start_location: Option<&Self::Location>,
            states: &mut alloc::vec::Vec<i16>,
            symbols: &mut alloc::vec::Vec<__state_machine::SymbolTriple<Self>>,
        ) -> Option<__state_machine::ParseResult<Self>> {
            __reduce(
                self.lookup,
                self.input,
                action,
                start_location,
                states,
                symbols,
                core::marker::PhantomData::<(&())>,
            )
        }

        fn simulate_reduce(&self, action: i16) -> __state_machine::SimulatedReduce<Self> {
            panic!("error recovery not enabled for this grammar")
        }
    }
    fn __token_to_integer<
        'input,
    >(
        __token: &Token<'input>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> Option<usize>
    {
        match *__token {
            Token(8, _) if true => Some(0),
            Token(9, _) if true => Some(1),
            Token(10, _) if true => Some(2),
            Token(11, _) if true => Some(3),
            Token(12, _) if true => Some(4),
            Token(13, _) if true => Some(5),
            Token(14, _) if true => Some(6),
            Token(15, _) if true => Some(7),
            Token(16, _) if true => Some(8),
            Token(17, _) if true => Some(9),
            Token(18, _) if true => Some(10),
            Token(19, _) if true => Some(11),
            Token(20, _) if true => Some(12),
            Token(21, _) if true => Some(13),
            Token(22, _) if true => Some(14),
            Token(23, _) if true => Some(15),
            Token(24, _) if true => Some(16),
            Token(25, _) if true => Some(17),
            Token(26, _) if true => Some(18),
            Token(27, _) if true => Some(19),
            Token(28, _) if true => Some(20),
            Token(29, _) if true => Some(21),
            Token(30, _) if true => Some(22),
            Token(31, _) if true => Some(23),
            Token(32, _) if true => Some(24),
            Token(33, _) if true => Some(25),
            Token(34, _) if true => Some(26),
            Token(35, _) if true => Some(27),
            Token(36, _) if true => Some(28),
            Token(37, _) if true => Some(29),
            Token(38, _) if true => Some(30),
            Token(39, _) if true => Some(31),
            Token(40, _) if true => Some(32),
            Token(41, _) if true => Some(33),
            Token(42, _) if true => Some(34),
            Token(43, _) if true => Some(35),
            Token(44, _) if true => Some(36),
            Token(45, _) if true => Some(37),
            Token(46, _) if true => Some(38),
            Token(47, _) if true => Some(39),
            Token(48, _) if true => Some(40),
            Token(49, _) if true => Some(41),
            Token(50, _) if true => Some(42),
            Token(51, _) if true => Some(43),
            Token(52, _) if true => Some(44),
            Token(53, _) if true => Some(45),
            Token(54, _) if true => Some(46),
            Token(55, _) if true => Some(47),
            Token(56, _) if true => Some(48),
            Token(57, _) if true => Some(49),
            Token(58, _) if true => Some(50),
            Token(59, _) if true => Some(51),
            Token(60, _) if true => Some(52),
            Token(61, _) if true => Some(53),
            Token(62, _) if true => Some(54),
            Token(63, _) if true => Some(55),
            Token(64, _) if true => Some(56),
            Token(65, _) if true => Some(57),
            Token(66, _) if true => Some(58),
            Token(67, _) if true => Some(59),
            Token(68, _) if true => Some(60),
            Token(69, _) if true => Some(61),
            Token(70, _) if true => Some(62),
            Token(71, _) if true => Some(63),
            Token(72, _) if true => Some(64),
            Token(73, _) if true => Some(65),
            Token(74, _) if true => Some(66),
            Token(75, _) if true => Some(67),
            Token(76, _) if true => Some(68),
            Token(77, _) if true => Some(69),
            Token(78, _) if true => Some(70),
            Token(79, _) if true => Some(71),
            Token(80, _) if true => Some(72),
            Token(81, _) if true => Some(73),
            Token(82, _) if true => Some(74),
            Token(0, _) if true => Some(75),
            Token(1, _) if true => Some(76),
            Token(2, _) if true => Some(77),
            Token(3, _) if true => Some(78),
            Token(4, _) if true => Some(79),
            Token(5, _) if true => Some(80),
            Token(6, _) if true => Some(81),
            Token(7, _) if true => Some(82),
            _ => None,
        }
    }
    fn __token_to_symbol<
        'input,
    >(
        __token_index: usize,
        __token: Token<'input>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> __Symbol<'input>
    {
        match __token_index {
            0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 | 42 | 43 | 44 | 45 | 46 | 47 | 48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 | 58 | 59 | 60 | 61 | 62 | 63 | 64 | 65 | 66 | 67 | 68 | 69 | 70 | 71 | 72 | 73 | 74 | 75 | 76 | 77 | 78 | 79 | 80 | 81 | 82 => match __token {
                Token(8, __tok0) | Token(9, __tok0) | Token(10, __tok0) | Token(11, __tok0) | Token(12, __tok0) | Token(13, __tok0) | Token(14, __tok0) | Token(15, __tok0) | Token(16, __tok0) | Token(17, __tok0) | Token(18, __tok0) | Token(19, __tok0) | Token(20, __tok0) | Token(21, __tok0) | Token(22, __tok0) | Token(23, __tok0) | Token(24, __tok0) | Token(25, __tok0) | Token(26, __tok0) | Token(27, __tok0) | Token(28, __tok0) | Token(29, __tok0) | Token(30, __tok0) | Token(31, __tok0) | Token(32, __tok0) | Token(33, __tok0) | Token(34, __tok0) | Token(35, __tok0) | Token(36, __tok0) | Token(37, __tok0) | Token(38, __tok0) | Token(39, __tok0) | Token(40, __tok0) | Token(41, __tok0) | Token(42, __tok0) | Token(43, __tok0) | Token(44, __tok0) | Token(45, __tok0) | Token(46, __tok0) | Token(47, __tok0) | Token(48, __tok0) | Token(49, __tok0) | Token(50, __tok0) | Token(51, __tok0) | Token(52, __tok0) | Token(53, __tok0) | Token(54, __tok0) | Token(55, __tok0) | Token(56, __tok0) | Token(57, __tok0) | Token(58, __tok0) | Token(59, __tok0) | Token(60, __tok0) | Token(61, __tok0) | Token(62, __tok0) | Token(63, __tok0) | Token(64, __tok0) | Token(65, __tok0) | Token(66, __tok0) | Token(67, __tok0) | Token(68, __tok0) | Token(69, __tok0) | Token(70, __tok0) | Token(71, __tok0) | Token(72, __tok0) | Token(73, __tok0) | Token(74, __tok0) | Token(75, __tok0) | Token(76, __tok0) | Token(77, __tok0) | Token(78, __tok0) | Token(79, __tok0) | Token(80, __tok0) | Token(81, __tok0) | Token(82, __tok0) | Token(0, __tok0) | Token(1, __tok0) | Token(2, __tok0) | Token(3, __tok0) | Token(4, __tok0) | Token(5, __tok0) | Token(6, __tok0) | Token(7, __tok0) if true => __Symbol::Variant0(__tok0),
                _ => unreachable!(),
            },
            _ => unreachable!(),
        }
    }
    pub struct TypeParser {
        builder: __lalrpop_util::lexer::MatcherBuilder,
        _priv: (),
    }

    impl TypeParser {
        pub fn new() -> TypeParser {
            let __builder = super::__intern_token::new_builder();
            TypeParser {
                builder: __builder,
                _priv: (),
            }
        }

        #[allow(dead_code)]
        pub fn parse<
            'input,
        >(
            &self,
            lookup: &LineColLookup<'input>,
            input: &'input str,
        ) -> Result<Type, __lalrpop_util::ParseError<usize, Token<'input>, &'static str>>
        {
            let mut __tokens = self.builder.matcher(input);
            __state_machine::Parser::drive(
                __StateMachine {
                    lookup,
                    input,
                    __phantom: core::marker::PhantomData::<(&())>,
                },
                __tokens,
            )
        }
    }
    pub(crate) fn __reduce<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut alloc::vec::Vec<i16>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> Option<Result<Type,__lalrpop_util::ParseError<usize, Token<'input>, &'static str>>>
    {
        let (__pop_states, __nonterminal) = match __action {
            0 => {
                __reduce0(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1 => {
                __reduce1(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            2 => {
                __reduce2(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            3 => {
                __reduce3(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            4 => {
                __reduce4(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            5 => {
                __reduce5(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            6 => {
                __reduce6(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            7 => {
                __reduce7(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            8 => {
                __reduce8(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            9 => {
                __reduce9(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            10 => {
                __reduce10(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            11 => {
                __reduce11(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            12 => {
                __reduce12(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            13 => {
                __reduce13(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            14 => {
                __reduce14(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            15 => {
                __reduce15(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            16 => {
                __reduce16(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            17 => {
                __reduce17(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            18 => {
                __reduce18(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            19 => {
                __reduce19(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            20 => {
                __reduce20(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            21 => {
                __reduce21(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            22 => {
                __reduce22(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            23 => {
                __reduce23(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            24 => {
                __reduce24(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            25 => {
                __reduce25(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            26 => {
                __reduce26(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            27 => {
                __reduce27(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            28 => {
                __reduce28(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            29 => {
                __reduce29(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            30 => {
                __reduce30(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            31 => {
                __reduce31(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            32 => {
                __reduce32(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            33 => {
                __reduce33(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            34 => {
                __reduce34(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            35 => {
                __reduce35(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            36 => {
                __reduce36(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            37 => {
                __reduce37(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            38 => {
                __reduce38(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            39 => {
                __reduce39(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            40 => {
                __reduce40(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            41 => {
                __reduce41(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            42 => {
                __reduce42(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            43 => {
                __reduce43(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            44 => {
                __reduce44(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            45 => {
                __reduce45(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            46 => {
                __reduce46(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            47 => {
                __reduce47(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            48 => {
                __reduce48(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            49 => {
                __reduce49(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            50 => {
                __reduce50(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            51 => {
                __reduce51(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            52 => {
                __reduce52(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            53 => {
                __reduce53(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            54 => {
                __reduce54(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            55 => {
                __reduce55(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            56 => {
                __reduce56(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            57 => {
                __reduce57(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            58 => {
                __reduce58(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            59 => {
                __reduce59(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            60 => {
                __reduce60(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            61 => {
                __reduce61(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            62 => {
                __reduce62(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            63 => {
                __reduce63(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            64 => {
                __reduce64(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            65 => {
                __reduce65(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            66 => {
                __reduce66(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            67 => {
                __reduce67(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            68 => {
                __reduce68(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            69 => {
                __reduce69(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            70 => {
                __reduce70(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            71 => {
                __reduce71(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            72 => {
                __reduce72(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            73 => {
                __reduce73(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            74 => {
                __reduce74(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            75 => {
                __reduce75(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            76 => {
                __reduce76(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            77 => {
                __reduce77(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            78 => {
                __reduce78(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            79 => {
                __reduce79(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            80 => {
                __reduce80(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            81 => {
                __reduce81(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            82 => {
                __reduce82(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            83 => {
                __reduce83(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            84 => {
                __reduce84(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            85 => {
                __reduce85(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            86 => {
                __reduce86(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            87 => {
                __reduce87(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            88 => {
                __reduce88(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            89 => {
                __reduce89(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            90 => {
                __reduce90(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            91 => {
                __reduce91(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            92 => {
                __reduce92(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            93 => {
                __reduce93(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            94 => {
                __reduce94(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            95 => {
                __reduce95(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            96 => {
                __reduce96(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            97 => {
                __reduce97(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            98 => {
                __reduce98(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            99 => {
                __reduce99(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            100 => {
                __reduce100(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            101 => {
                __reduce101(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            102 => {
                __reduce102(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            103 => {
                __reduce103(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            104 => {
                __reduce104(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            105 => {
                __reduce105(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            106 => {
                __reduce106(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            107 => {
                __reduce107(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            108 => {
                __reduce108(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            109 => {
                __reduce109(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            110 => {
                __reduce110(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            111 => {
                __reduce111(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            112 => {
                __reduce112(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            113 => {
                __reduce113(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            114 => {
                __reduce114(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            115 => {
                __reduce115(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            116 => {
                __reduce116(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            117 => {
                __reduce117(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            118 => {
                __reduce118(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            119 => {
                __reduce119(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            120 => {
                __reduce120(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            121 => {
                __reduce121(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            122 => {
                __reduce122(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            123 => {
                __reduce123(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            124 => {
                __reduce124(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            125 => {
                __reduce125(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            126 => {
                __reduce126(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            127 => {
                __reduce127(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            128 => {
                __reduce128(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            129 => {
                __reduce129(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            130 => {
                __reduce130(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            131 => {
                __reduce131(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            132 => {
                __reduce132(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            133 => {
                __reduce133(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            134 => {
                __reduce134(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            135 => {
                __reduce135(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            136 => {
                __reduce136(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            137 => {
                __reduce137(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            138 => {
                __reduce138(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            139 => {
                __reduce139(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            140 => {
                __reduce140(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            141 => {
                __reduce141(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            142 => {
                __reduce142(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            143 => {
                __reduce143(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            144 => {
                __reduce144(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            145 => {
                __reduce145(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            146 => {
                __reduce146(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            147 => {
                __reduce147(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            148 => {
                __reduce148(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            149 => {
                __reduce149(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            150 => {
                __reduce150(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            151 => {
                __reduce151(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            152 => {
                __reduce152(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            153 => {
                __reduce153(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            154 => {
                __reduce154(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            155 => {
                __reduce155(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            156 => {
                __reduce156(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            157 => {
                __reduce157(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            158 => {
                __reduce158(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            159 => {
                __reduce159(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            160 => {
                __reduce160(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            161 => {
                __reduce161(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            162 => {
                __reduce162(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            163 => {
                __reduce163(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            164 => {
                __reduce164(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            165 => {
                __reduce165(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            166 => {
                __reduce166(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            167 => {
                __reduce167(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            168 => {
                __reduce168(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            169 => {
                __reduce169(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            170 => {
                __reduce170(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            171 => {
                __reduce171(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            172 => {
                __reduce172(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            173 => {
                __reduce173(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            174 => {
                __reduce174(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            175 => {
                __reduce175(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            176 => {
                __reduce176(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            177 => {
                __reduce177(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            178 => {
                __reduce178(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            179 => {
                __reduce179(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            180 => {
                __reduce180(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            181 => {
                __reduce181(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            182 => {
                __reduce182(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            183 => {
                __reduce183(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            184 => {
                __reduce184(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            185 => {
                __reduce185(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            186 => {
                __reduce186(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            187 => {
                __reduce187(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            188 => {
                __reduce188(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            189 => {
                __reduce189(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            190 => {
                __reduce190(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            191 => {
                __reduce191(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            192 => {
                __reduce192(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            193 => {
                __reduce193(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            194 => {
                __reduce194(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            195 => {
                __reduce195(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            196 => {
                __reduce196(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            197 => {
                __reduce197(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            198 => {
                __reduce198(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            199 => {
                __reduce199(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            200 => {
                __reduce200(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            201 => {
                __reduce201(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            202 => {
                __reduce202(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            203 => {
                __reduce203(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            204 => {
                __reduce204(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            205 => {
                __reduce205(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            206 => {
                __reduce206(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            207 => {
                __reduce207(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            208 => {
                __reduce208(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            209 => {
                __reduce209(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            210 => {
                __reduce210(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            211 => {
                __reduce211(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            212 => {
                __reduce212(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            213 => {
                __reduce213(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            214 => {
                __reduce214(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            215 => {
                __reduce215(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            216 => {
                __reduce216(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            217 => {
                __reduce217(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            218 => {
                __reduce218(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            219 => {
                __reduce219(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            220 => {
                __reduce220(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            221 => {
                __reduce221(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            222 => {
                __reduce222(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            223 => {
                __reduce223(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            224 => {
                __reduce224(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            225 => {
                __reduce225(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            226 => {
                __reduce226(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            227 => {
                __reduce227(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            228 => {
                __reduce228(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            229 => {
                __reduce229(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            230 => {
                __reduce230(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            231 => {
                __reduce231(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            232 => {
                __reduce232(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            233 => {
                __reduce233(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            234 => {
                __reduce234(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            235 => {
                __reduce235(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            236 => {
                __reduce236(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            237 => {
                __reduce237(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            238 => {
                __reduce238(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            239 => {
                __reduce239(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            240 => {
                __reduce240(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            241 => {
                __reduce241(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            242 => {
                __reduce242(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            243 => {
                __reduce243(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            244 => {
                __reduce244(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            245 => {
                __reduce245(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            246 => {
                __reduce246(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            247 => {
                __reduce247(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            248 => {
                __reduce248(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            249 => {
                __reduce249(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            250 => {
                __reduce250(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            251 => {
                __reduce251(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            252 => {
                __reduce252(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            253 => {
                __reduce253(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            254 => {
                __reduce254(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            255 => {
                __reduce255(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            256 => {
                __reduce256(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            257 => {
                __reduce257(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            258 => {
                __reduce258(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            259 => {
                __reduce259(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            260 => {
                __reduce260(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            261 => {
                __reduce261(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            262 => {
                __reduce262(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            263 => {
                __reduce263(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            264 => {
                __reduce264(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            265 => {
                __reduce265(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            266 => {
                __reduce266(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            267 => {
                __reduce267(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            268 => {
                __reduce268(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            269 => {
                __reduce269(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            270 => {
                __reduce270(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            271 => {
                __reduce271(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            272 => {
                __reduce272(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            273 => {
                __reduce273(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            274 => {
                __reduce274(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            275 => {
                __reduce275(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            276 => {
                __reduce276(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            277 => {
                __reduce277(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            278 => {
                __reduce278(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            279 => {
                __reduce279(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            280 => {
                __reduce280(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            281 => {
                __reduce281(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            282 => {
                __reduce282(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            283 => {
                __reduce283(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            284 => {
                __reduce284(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            285 => {
                __reduce285(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            286 => {
                __reduce286(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            287 => {
                __reduce287(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            288 => {
                __reduce288(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            289 => {
                __reduce289(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            290 => {
                __reduce290(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            291 => {
                __reduce291(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            292 => {
                __reduce292(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            293 => {
                __reduce293(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            294 => {
                __reduce294(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            295 => {
                __reduce295(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            296 => {
                __reduce296(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            297 => {
                __reduce297(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            298 => {
                __reduce298(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            299 => {
                __reduce299(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            300 => {
                __reduce300(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            301 => {
                __reduce301(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            302 => {
                __reduce302(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            303 => {
                __reduce303(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            304 => {
                __reduce304(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            305 => {
                __reduce305(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            306 => {
                __reduce306(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            307 => {
                __reduce307(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            308 => {
                __reduce308(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            309 => {
                __reduce309(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            310 => {
                __reduce310(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            311 => {
                __reduce311(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            312 => {
                __reduce312(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            313 => {
                __reduce313(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            314 => {
                __reduce314(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            315 => {
                __reduce315(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            316 => {
                __reduce316(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            317 => {
                __reduce317(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            318 => {
                __reduce318(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            319 => {
                __reduce319(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            320 => {
                __reduce320(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            321 => {
                __reduce321(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            322 => {
                __reduce322(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            323 => {
                __reduce323(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            324 => {
                __reduce324(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            325 => {
                __reduce325(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            326 => {
                __reduce326(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            327 => {
                __reduce327(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            328 => {
                __reduce328(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            329 => {
                __reduce329(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            330 => {
                __reduce330(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            331 => {
                __reduce331(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            332 => {
                __reduce332(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            333 => {
                __reduce333(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            334 => {
                __reduce334(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            335 => {
                __reduce335(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            336 => {
                __reduce336(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            337 => {
                __reduce337(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            338 => {
                __reduce338(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            339 => {
                __reduce339(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            340 => {
                __reduce340(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            341 => {
                __reduce341(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            342 => {
                __reduce342(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            343 => {
                __reduce343(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            344 => {
                __reduce344(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            345 => {
                __reduce345(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            346 => {
                __reduce346(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            347 => {
                __reduce347(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            348 => {
                __reduce348(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            349 => {
                __reduce349(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            350 => {
                __reduce350(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            351 => {
                __reduce351(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            352 => {
                __reduce352(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            353 => {
                __reduce353(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            354 => {
                __reduce354(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            355 => {
                __reduce355(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            356 => {
                __reduce356(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            357 => {
                __reduce357(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            358 => {
                __reduce358(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            359 => {
                __reduce359(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            360 => {
                __reduce360(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            361 => {
                __reduce361(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            362 => {
                __reduce362(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            363 => {
                __reduce363(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            364 => {
                __reduce364(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            365 => {
                __reduce365(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            366 => {
                __reduce366(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            367 => {
                __reduce367(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            368 => {
                __reduce368(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            369 => {
                __reduce369(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            370 => {
                __reduce370(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            371 => {
                __reduce371(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            372 => {
                __reduce372(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            373 => {
                __reduce373(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            374 => {
                __reduce374(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            375 => {
                __reduce375(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            376 => {
                __reduce376(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            377 => {
                __reduce377(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            378 => {
                __reduce378(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            379 => {
                __reduce379(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            380 => {
                __reduce380(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            381 => {
                __reduce381(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            382 => {
                __reduce382(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            383 => {
                __reduce383(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            384 => {
                __reduce384(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            385 => {
                __reduce385(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            386 => {
                __reduce386(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            387 => {
                __reduce387(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            388 => {
                __reduce388(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            389 => {
                __reduce389(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            390 => {
                __reduce390(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            391 => {
                __reduce391(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            392 => {
                __reduce392(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            393 => {
                __reduce393(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            394 => {
                __reduce394(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            395 => {
                __reduce395(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            396 => {
                __reduce396(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            397 => {
                __reduce397(lookup, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            398 => {
                // __Type = Type => ActionFn(3);
                let __sym0 = __pop_Variant63(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action3::<>(lookup, input, __sym0);
                return Some(Ok(__nt));
            }
            _ => panic!("invalid action code {}", __action)
        };
        let __states_len = __states.len();
        __states.truncate(__states_len - __pop_states);
        let __state = *__states.last().unwrap();
        let __next_state = __goto(__state, __nonterminal);
        __states.push(__next_state);
        None
    }
    #[inline(never)]
    fn __symbol_type_mismatch() -> ! {
        panic!("symbol type mismatch")
    }
    fn __pop_Variant4<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, (&'input str, Type_), usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant4(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant26<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, BinOp, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant26(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant28<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Case, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant28(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant29<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Cases, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant29(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant30<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Dec, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant30(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant31<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, DecField, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant31(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant6<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, DecField_, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant6(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant55<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, DecFields, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant55(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant8<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Dec_, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant8(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant34<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Decs, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant34(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant35<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Delim<DecField_>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant35(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant36<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Delim<Dec_>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant36(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant38<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Delim<Exp_>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant38(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant39<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Delim<Node<Case>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant39(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant37<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Delim<Node<ExpField>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant37(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant40<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Delim<Pat_>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant40(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant27<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Exp, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant27(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant41<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, ExpField, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant41(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant12<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Exp_, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant12(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant43<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Id, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant43(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant19<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Id_, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant19(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant44<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Literal, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant44(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant65<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Mut, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant65(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant14<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Node<Case>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant14(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant47<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Node<Dec>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant47(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant48<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Node<DecField>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant48(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant45<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Node<Exp>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant45(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant10<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Node<ExpField>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant10(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant49<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Node<Id>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant49(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant50<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Node<Pat>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant50(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant51<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Node<SortPat>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant51(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant52<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Node<Stab>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant52(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant53<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Node<Type>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant53(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant54<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Node<Vis>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant54(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant56<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Pat, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant56(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant16<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Pat_, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant16(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant58<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, PrimType, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant58(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant59<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, SortPat, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant59(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant60<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, SortPat_, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant60(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant61<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Stab, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant61(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant21<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Stab_, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant21(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant62<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, String, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant62(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant63<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Type, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant63(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant2<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Type_, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant2(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant64<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, UnOp, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant64(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant66<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Vis, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant66(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant23<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Vis_, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant23(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant7<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, alloc::vec::Vec<DecField_>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant7(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant9<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, alloc::vec::Vec<Dec_>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant9(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant13<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, alloc::vec::Vec<Exp_>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant13(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant15<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, alloc::vec::Vec<Node<Case>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant15(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant11<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, alloc::vec::Vec<Node<ExpField>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant11(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant17<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, alloc::vec::Vec<Pat_>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant17(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant5<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, core::option::Option<(&'input str, Type_)>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant5(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant32<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, core::option::Option<DecField_>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant32(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant33<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, core::option::Option<Dec_>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant33(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant18<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, core::option::Option<Exp_>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant18(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant20<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, core::option::Option<Id_>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant20(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant46<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, core::option::Option<Node<Case>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant46(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant42<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, core::option::Option<Node<ExpField>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant42(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant57<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, core::option::Option<Pat_>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant57(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant22<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, core::option::Option<Stab_>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant22(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant3<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, core::option::Option<Type_>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant3(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant24<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, core::option::Option<Vis_>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant24(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant1<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, core::option::Option<&'input str>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant1(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant25<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, usize, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant25(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant0<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, &'input str, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant0(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    pub(crate) fn __reduce0<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // "="? = "=" => ActionFn(130);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action130::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 0)
    }
    pub(crate) fn __reduce1<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // "="? =  => ActionFn(131);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action131::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (0, 0)
    }
    pub(crate) fn __reduce2<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (":" <Type_>) = ":", Type => ActionFn(449);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant63(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action449::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (2, 1)
    }
    pub(crate) fn __reduce3<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (":" <Type_>)? = ":", Type => ActionFn(454);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant63(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action454::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (2, 2)
    }
    pub(crate) fn __reduce4<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (":" <Type_>)? =  => ActionFn(152);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action152::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (0, 2)
    }
    pub(crate) fn __reduce5<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (":" Type_) = ":", Type => ActionFn(450);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant63(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action450::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (2, 3)
    }
    pub(crate) fn __reduce6<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (":" Type_)? = ":", Type => ActionFn(457);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant63(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action457::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (2, 4)
    }
    pub(crate) fn __reduce7<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (":" Type_)? =  => ActionFn(128);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action128::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (0, 4)
    }
    pub(crate) fn __reduce8<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<DecField_> ";") = DecField, ";" => ActionFn(463);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant31(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action463::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 5)
    }
    pub(crate) fn __reduce9<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<DecField_> ";")* =  => ActionFn(211);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action211::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (0, 6)
    }
    pub(crate) fn __reduce10<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<DecField_> ";")* = (<DecField_> ";")+ => ActionFn(212);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action212::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 6)
    }
    pub(crate) fn __reduce11<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<DecField_> ";")+ = DecField, ";" => ActionFn(465);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant31(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action465::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (2, 7)
    }
    pub(crate) fn __reduce12<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<DecField_> ";")+ = (<DecField_> ";")+, DecField, ";" => ActionFn(466);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant31(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action466::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (3, 7)
    }
    pub(crate) fn __reduce13<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<Dec_> ";") = Dec, ";" => ActionFn(470);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action470::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (2, 8)
    }
    pub(crate) fn __reduce14<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<Dec_> ";")* =  => ActionFn(199);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action199::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (0, 9)
    }
    pub(crate) fn __reduce15<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<Dec_> ";")* = (<Dec_> ";")+ => ActionFn(200);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action200::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce16<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<Dec_> ";")+ = Dec, ";" => ActionFn(473);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action473::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (2, 10)
    }
    pub(crate) fn __reduce17<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<Dec_> ";")+ = (<Dec_> ";")+, Dec, ";" => ActionFn(474);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant30(__symbols);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action474::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (3, 10)
    }
    pub(crate) fn __reduce18<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<ExpField_> ";") = ExpField, ";" => ActionFn(478);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant41(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action478::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (2, 11)
    }
    pub(crate) fn __reduce19<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<ExpField_> ";")* =  => ActionFn(189);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action189::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (0, 12)
    }
    pub(crate) fn __reduce20<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<ExpField_> ";")* = (<ExpField_> ";")+ => ActionFn(190);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action190::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 12)
    }
    pub(crate) fn __reduce21<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<ExpField_> ";")+ = ExpField, ";" => ActionFn(480);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant41(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action480::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (2, 13)
    }
    pub(crate) fn __reduce22<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<ExpField_> ";")+ = (<ExpField_> ";")+, ExpField, ";" => ActionFn(481);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant41(__symbols);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action481::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (3, 13)
    }
    pub(crate) fn __reduce23<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<ExpNonVar_<Ob>> ",") = ExpNonVar<Ob>, "," => ActionFn(485);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action485::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (2, 14)
    }
    pub(crate) fn __reduce24<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<ExpNonVar_<Ob>> ",")* =  => ActionFn(339);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action339::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (0, 15)
    }
    pub(crate) fn __reduce25<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<ExpNonVar_<Ob>> ",")* = (<ExpNonVar_<Ob>> ",")+ => ActionFn(340);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action340::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (1, 15)
    }
    pub(crate) fn __reduce26<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<ExpNonVar_<Ob>> ",")+ = ExpNonVar<Ob>, "," => ActionFn(487);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action487::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (2, 16)
    }
    pub(crate) fn __reduce27<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<ExpNonVar_<Ob>> ",")+ = (<ExpNonVar_<Ob>> ",")+, ExpNonVar<Ob>, "," => ActionFn(488);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action488::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (3, 16)
    }
    pub(crate) fn __reduce28<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<Exp_<Ob>> ",") = Exp<Ob>, "," => ActionFn(492);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action492::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (2, 17)
    }
    pub(crate) fn __reduce29<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<Exp_<Ob>> ",")+ = Exp<Ob>, "," => ActionFn(507);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action507::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (2, 18)
    }
    pub(crate) fn __reduce30<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<Exp_<Ob>> ",")+ = (<Exp_<Ob>> ",")+, Exp<Ob>, "," => ActionFn(508);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action508::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (3, 18)
    }
    pub(crate) fn __reduce31<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<Node<Case>> ";") = Case, ";" => ActionFn(509);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant28(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action509::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (2, 19)
    }
    pub(crate) fn __reduce32<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<Node<Case>> ";")* =  => ActionFn(194);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action194::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (0, 20)
    }
    pub(crate) fn __reduce33<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<Node<Case>> ";")* = (<Node<Case>> ";")+ => ActionFn(195);
        let __sym0 = __pop_Variant15(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action195::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 20)
    }
    pub(crate) fn __reduce34<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<Node<Case>> ";")+ = Case, ";" => ActionFn(511);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant28(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action511::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (2, 21)
    }
    pub(crate) fn __reduce35<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<Node<Case>> ";")+ = (<Node<Case>> ";")+, Case, ";" => ActionFn(512);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant28(__symbols);
        let __sym0 = __pop_Variant15(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action512::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (3, 21)
    }
    pub(crate) fn __reduce36<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<PatBin_> ",") = PatBin, "," => ActionFn(516);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant56(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action516::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (2, 22)
    }
    pub(crate) fn __reduce37<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<PatBin_> ",")+ = PatBin, "," => ActionFn(520);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant56(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action520::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (2, 23)
    }
    pub(crate) fn __reduce38<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<PatBin_> ",")+ = (<PatBin_> ",")+, PatBin, "," => ActionFn(521);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant56(__symbols);
        let __sym0 = __pop_Variant17(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action521::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (3, 23)
    }
    pub(crate) fn __reduce39<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (ExpNullary_<Bl>) = ExpNullary<Bl> => ActionFn(523);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action523::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 24)
    }
    pub(crate) fn __reduce40<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (ExpNullary_<Bl>)? = ExpNullary<Bl> => ActionFn(524);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action524::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (1, 25)
    }
    pub(crate) fn __reduce41<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (ExpNullary_<Bl>)? =  => ActionFn(345);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action345::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (0, 25)
    }
    pub(crate) fn __reduce42<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (ExpNullary_<Ob>) = ExpNullary<Ob> => ActionFn(528);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action528::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 26)
    }
    pub(crate) fn __reduce43<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (ExpNullary_<Ob>)? = ExpNullary<Ob> => ActionFn(539);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action539::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (1, 27)
    }
    pub(crate) fn __reduce44<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (ExpNullary_<Ob>)? =  => ActionFn(313);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action313::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (0, 27)
    }
    pub(crate) fn __reduce45<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (Id_) = Id => ActionFn(543);
        let __sym0 = __pop_Variant43(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action543::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (1, 28)
    }
    pub(crate) fn __reduce46<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (Id_)? = Id => ActionFn(556);
        let __sym0 = __pop_Variant43(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action556::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 29)
    }
    pub(crate) fn __reduce47<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (Id_)? =  => ActionFn(133);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action133::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (0, 29)
    }
    pub(crate) fn __reduce48<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (Id_?) = Id => ActionFn(565);
        let __sym0 = __pop_Variant43(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action565::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 30)
    }
    pub(crate) fn __reduce49<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (Id_?) =  => ActionFn(566);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action566::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (0, 30)
    }
    pub(crate) fn __reduce50<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (Stab_) = Stab => ActionFn(572);
        let __sym0 = __pop_Variant61(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action572::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (1, 31)
    }
    pub(crate) fn __reduce51<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (Stab_)? = Stab => ActionFn(573);
        let __sym0 = __pop_Variant61(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action573::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (1, 32)
    }
    pub(crate) fn __reduce52<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (Stab_)? =  => ActionFn(113);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action113::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (0, 32)
    }
    pub(crate) fn __reduce53<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (Vis_) = Vis => ActionFn(577);
        let __sym0 = __pop_Variant66(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action577::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (1, 33)
    }
    pub(crate) fn __reduce54<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (Vis_)? = Vis => ActionFn(578);
        let __sym0 = __pop_Variant66(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action578::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (1, 34)
    }
    pub(crate) fn __reduce55<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (Vis_)? =  => ActionFn(116);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action116::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (0, 34)
    }
    pub(crate) fn __reduce56<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // @L =  => ActionFn(215);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action215::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (0, 35)
    }
    pub(crate) fn __reduce57<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // @R =  => ActionFn(214);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action214::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (0, 36)
    }
    pub(crate) fn __reduce58<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BinOp = "+" => ActionFn(86);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action86::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce59<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BinOp = "-" => ActionFn(87);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action87::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce60<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BinOp = "*" => ActionFn(88);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action88::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce61<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BinOp = "/" => ActionFn(89);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action89::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce62<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BinOp = "%" => ActionFn(90);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action90::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce63<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BinOp = "**" => ActionFn(91);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action91::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce64<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BinOp = "+%" => ActionFn(92);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action92::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce65<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BinOp = "-%" => ActionFn(93);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action93::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce66<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BinOp = "*%" => ActionFn(94);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action94::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce67<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BinOp = "**%" => ActionFn(95);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action95::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce68<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BinOp = "&" => ActionFn(96);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action96::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce69<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BinOp = "|" => ActionFn(97);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action97::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce70<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BinOp = "^" => ActionFn(98);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action98::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce71<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BinOp = "<<" => ActionFn(99);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action99::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce72<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BinOp = "<<>" => ActionFn(100);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action100::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce73<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BinOp = "<>>" => ActionFn(101);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action101::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce74<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BinOp = "#" => ActionFn(102);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action102::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce75<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Bl = r#"\\\\\\\\BIG.FART."# => ActionFn(5);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action5::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 38)
    }
    pub(crate) fn __reduce76<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Block = "{", Decs, "}" => ActionFn(61);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant34(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action61::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 39)
    }
    pub(crate) fn __reduce77<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Block_ = Block => ActionFn(583);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action583::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 40)
    }
    pub(crate) fn __reduce78<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Case = "case", PatNullary, ExpNest => ActionFn(731);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant56(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action731::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant28(__nt), __end));
        (3, 41)
    }
    pub(crate) fn __reduce79<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Cases = Delim0<Node<Case>, ";"> => ActionFn(65);
        let __sym0 = __pop_Variant39(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action65::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 42)
    }
    pub(crate) fn __reduce80<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Dec = DecVar => ActionFn(71);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action71::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 43)
    }
    pub(crate) fn __reduce81<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Dec = DecNonVar => ActionFn(72);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action72::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 43)
    }
    pub(crate) fn __reduce82<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Dec = ExpNonDec<Ob> => ActionFn(73);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action73::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 43)
    }
    pub(crate) fn __reduce83<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecField = Vis, Stab, Dec => ActionFn(579);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant30(__symbols);
        let __sym1 = __pop_Variant61(__symbols);
        let __sym0 = __pop_Variant66(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action579::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant31(__nt), __end));
        (3, 44)
    }
    pub(crate) fn __reduce84<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecField = Stab, Dec => ActionFn(580);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant30(__symbols);
        let __sym0 = __pop_Variant61(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action580::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant31(__nt), __end));
        (2, 44)
    }
    pub(crate) fn __reduce85<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecField = Vis, Dec => ActionFn(581);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant30(__symbols);
        let __sym0 = __pop_Variant66(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action581::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant31(__nt), __end));
        (2, 44)
    }
    pub(crate) fn __reduce86<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecField = Dec => ActionFn(582);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action582::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant31(__nt), __end));
        (1, 44)
    }
    pub(crate) fn __reduce87<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecField_ = DecField => ActionFn(462);
        let __sym0 = __pop_Variant31(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action462::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 45)
    }
    pub(crate) fn __reduce88<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecField_? = DecField => ActionFn(464);
        let __sym0 = __pop_Variant31(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action464::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant32(__nt), __end));
        (1, 46)
    }
    pub(crate) fn __reduce89<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecField_? =  => ActionFn(210);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action210::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant32(__nt), __end));
        (0, 46)
    }
    pub(crate) fn __reduce90<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecNonVar = "let", Pat, "=", Exp<Ob> => ActionFn(741);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant27(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant56(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action741::<>(lookup, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (4, 47)
    }
    pub(crate) fn __reduce91<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecNonVar = "module", Id, "=", ObjBody => ActionFn(557);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant55(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant43(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action557::<>(lookup, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (4, 47)
    }
    pub(crate) fn __reduce92<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecNonVar = "module", "=", ObjBody => ActionFn(558);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant55(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action558::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (3, 47)
    }
    pub(crate) fn __reduce93<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecNonVar = "module", Id, ObjBody => ActionFn(559);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant55(__symbols);
        let __sym1 = __pop_Variant43(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action559::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (3, 47)
    }
    pub(crate) fn __reduce94<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecNonVar = "module", ObjBody => ActionFn(560);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant55(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action560::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (2, 47)
    }
    pub(crate) fn __reduce95<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecNonVar = SortPat, "func", Id, PatPlain, ":", Type, Block => ActionFn(745);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant27(__symbols);
        let __sym5 = __pop_Variant63(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant56(__symbols);
        let __sym2 = __pop_Variant43(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant59(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym6.2.clone();
        let __nt = super::__action745::<>(lookup, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (7, 47)
    }
    pub(crate) fn __reduce96<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecNonVar = SortPat, "func", PatPlain, ":", Type, Block => ActionFn(746);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant27(__symbols);
        let __sym4 = __pop_Variant63(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant56(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant59(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action746::<>(lookup, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (6, 47)
    }
    pub(crate) fn __reduce97<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecNonVar = SortPat, "func", Id, PatPlain, Block => ActionFn(747);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant27(__symbols);
        let __sym3 = __pop_Variant56(__symbols);
        let __sym2 = __pop_Variant43(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant59(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action747::<>(lookup, input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (5, 47)
    }
    pub(crate) fn __reduce98<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecNonVar = SortPat, "func", PatPlain, Block => ActionFn(748);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant27(__symbols);
        let __sym2 = __pop_Variant56(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant59(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action748::<>(lookup, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (4, 47)
    }
    pub(crate) fn __reduce99<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecNonVar = SortPat, "func", Id, PatPlain, ":", Type, "=", Exp<Ob> => ActionFn(749);
        assert!(__symbols.len() >= 8);
        let __sym7 = __pop_Variant27(__symbols);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant63(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant56(__symbols);
        let __sym2 = __pop_Variant43(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant59(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym7.2.clone();
        let __nt = super::__action749::<>(lookup, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (8, 47)
    }
    pub(crate) fn __reduce100<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecNonVar = SortPat, "func", PatPlain, ":", Type, "=", Exp<Ob> => ActionFn(750);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant27(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant63(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant56(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant59(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym6.2.clone();
        let __nt = super::__action750::<>(lookup, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (7, 47)
    }
    pub(crate) fn __reduce101<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecNonVar = SortPat, "func", Id, PatPlain, "=", Exp<Ob> => ActionFn(751);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant27(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant56(__symbols);
        let __sym2 = __pop_Variant43(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant59(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action751::<>(lookup, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (6, 47)
    }
    pub(crate) fn __reduce102<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecNonVar = SortPat, "func", PatPlain, "=", Exp<Ob> => ActionFn(752);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant27(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant56(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant59(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action752::<>(lookup, input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (5, 47)
    }
    pub(crate) fn __reduce103<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecNonVar_ = DecNonVar => ActionFn(596);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action596::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 48)
    }
    pub(crate) fn __reduce104<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecVar = "var", Pat, "=", Exp<Ob> => ActionFn(742);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant27(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant56(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action742::<>(lookup, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (4, 49)
    }
    pub(crate) fn __reduce105<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DecVar_ = DecVar => ActionFn(599);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action599::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 50)
    }
    pub(crate) fn __reduce106<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Dec_ = Dec => ActionFn(469);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action469::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 51)
    }
    pub(crate) fn __reduce107<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Dec_? = Dec => ActionFn(472);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action472::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant33(__nt), __end));
        (1, 52)
    }
    pub(crate) fn __reduce108<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Dec_? =  => ActionFn(198);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action198::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant33(__nt), __end));
        (0, 52)
    }
    pub(crate) fn __reduce109<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Decs = Delim0<Dec_, ";"> => ActionFn(69);
        let __sym0 = __pop_Variant36(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action69::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant34(__nt), __end));
        (1, 53)
    }
    pub(crate) fn __reduce110<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim0<DecField_, ";"> = DecField => ActionFn(592);
        let __sym0 = __pop_Variant31(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action592::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant35(__nt), __end));
        (1, 54)
    }
    pub(crate) fn __reduce111<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim0<DecField_, ";"> =  => ActionFn(593);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action593::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant35(__nt), __end));
        (0, 54)
    }
    pub(crate) fn __reduce112<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim0<DecField_, ";"> = (<DecField_> ";")+, DecField => ActionFn(594);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant31(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action594::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant35(__nt), __end));
        (2, 54)
    }
    pub(crate) fn __reduce113<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim0<DecField_, ";"> = (<DecField_> ";")+ => ActionFn(595);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action595::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant35(__nt), __end));
        (1, 54)
    }
    pub(crate) fn __reduce114<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim0<Dec_, ";"> = Dec => ActionFn(602);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action602::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 55)
    }
    pub(crate) fn __reduce115<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim0<Dec_, ";"> =  => ActionFn(603);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action603::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (0, 55)
    }
    pub(crate) fn __reduce116<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim0<Dec_, ";"> = (<Dec_> ";")+, Dec => ActionFn(604);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant30(__symbols);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action604::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (2, 55)
    }
    pub(crate) fn __reduce117<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim0<Dec_, ";"> = (<Dec_> ";")+ => ActionFn(605);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action605::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 55)
    }
    pub(crate) fn __reduce118<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim0<ExpField_, ";"> = ExpField => ActionFn(666);
        let __sym0 = __pop_Variant41(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action666::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant37(__nt), __end));
        (1, 56)
    }
    pub(crate) fn __reduce119<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim0<ExpField_, ";"> =  => ActionFn(667);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action667::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant37(__nt), __end));
        (0, 56)
    }
    pub(crate) fn __reduce120<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim0<ExpField_, ";"> = (<ExpField_> ";")+, ExpField => ActionFn(668);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant41(__symbols);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action668::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant37(__nt), __end));
        (2, 56)
    }
    pub(crate) fn __reduce121<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim0<ExpField_, ";"> = (<ExpField_> ";")+ => ActionFn(669);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action669::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant37(__nt), __end));
        (1, 56)
    }
    pub(crate) fn __reduce122<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim0<ExpNonVar_<Ob>, ","> = ExpNonVar<Ob> => ActionFn(686);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action686::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant38(__nt), __end));
        (1, 57)
    }
    pub(crate) fn __reduce123<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim0<ExpNonVar_<Ob>, ","> =  => ActionFn(687);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action687::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant38(__nt), __end));
        (0, 57)
    }
    pub(crate) fn __reduce124<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim0<ExpNonVar_<Ob>, ","> = (<ExpNonVar_<Ob>> ",")+, ExpNonVar<Ob> => ActionFn(688);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action688::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant38(__nt), __end));
        (2, 57)
    }
    pub(crate) fn __reduce125<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim0<ExpNonVar_<Ob>, ","> = (<ExpNonVar_<Ob>> ",")+ => ActionFn(689);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action689::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant38(__nt), __end));
        (1, 57)
    }
    pub(crate) fn __reduce126<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim0<Node<Case>, ";"> = Case => ActionFn(721);
        let __sym0 = __pop_Variant28(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action721::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant39(__nt), __end));
        (1, 58)
    }
    pub(crate) fn __reduce127<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim0<Node<Case>, ";"> =  => ActionFn(722);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action722::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant39(__nt), __end));
        (0, 58)
    }
    pub(crate) fn __reduce128<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim0<Node<Case>, ";"> = (<Node<Case>> ";")+, Case => ActionFn(723);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant28(__symbols);
        let __sym0 = __pop_Variant15(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action723::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant39(__nt), __end));
        (2, 58)
    }
    pub(crate) fn __reduce129<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim0<Node<Case>, ";"> = (<Node<Case>> ";")+ => ActionFn(724);
        let __sym0 = __pop_Variant15(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action724::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant39(__nt), __end));
        (1, 58)
    }
    pub(crate) fn __reduce130<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim1<Exp_<Ob>, ","> = Exp<Ob> => ActionFn(497);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action497::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant38(__nt), __end));
        (1, 59)
    }
    pub(crate) fn __reduce131<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim1<Exp_<Ob>, ","> = (<Exp_<Ob>> ",")+, Exp<Ob> => ActionFn(717);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action717::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant38(__nt), __end));
        (2, 59)
    }
    pub(crate) fn __reduce132<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim1<Exp_<Ob>, ","> = (<Exp_<Ob>> ",")+ => ActionFn(718);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action718::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant38(__nt), __end));
        (1, 59)
    }
    pub(crate) fn __reduce133<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim1<PatBin_, ","> = PatBin => ActionFn(517);
        let __sym0 = __pop_Variant56(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action517::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant40(__nt), __end));
        (1, 60)
    }
    pub(crate) fn __reduce134<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim1<PatBin_, ","> = (<PatBin_> ",")+, PatBin => ActionFn(729);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant56(__symbols);
        let __sym0 = __pop_Variant17(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action729::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant40(__nt), __end));
        (2, 60)
    }
    pub(crate) fn __reduce135<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Delim1<PatBin_, ","> = (<PatBin_> ",")+ => ActionFn(730);
        let __sym0 = __pop_Variant17(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action730::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant40(__nt), __end));
        (1, 60)
    }
    pub(crate) fn __reduce136<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Exp<Bl> = ExpNonVar<Bl> => ActionFn(159);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action159::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 61)
    }
    pub(crate) fn __reduce137<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Exp<Bl> = DecVar => ActionFn(600);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action600::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 61)
    }
    pub(crate) fn __reduce138<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Exp<Ob> = ExpNonVar<Ob> => ActionFn(180);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action180::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 62)
    }
    pub(crate) fn __reduce139<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Exp<Ob> = DecVar => ActionFn(601);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action601::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 62)
    }
    pub(crate) fn __reduce140<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin000<Bl> = ExpBin000<Bl>, "or", ExpBin00<Bl> => ActionFn(611);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action611::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 63)
    }
    pub(crate) fn __reduce141<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin000<Bl> = ExpBin00<Bl> => ActionFn(272);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action272::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 63)
    }
    pub(crate) fn __reduce142<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin000<Ob> = ExpBin000<Ob>, "or", ExpBin00<Ob> => ActionFn(614);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action614::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 64)
    }
    pub(crate) fn __reduce143<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin000<Ob> = ExpBin00<Ob> => ActionFn(219);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action219::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 64)
    }
    pub(crate) fn __reduce144<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin000_<Bl> = ExpBin000<Bl> => ActionFn(606);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action606::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 65)
    }
    pub(crate) fn __reduce145<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin000_<Ob> = ExpBin000<Ob> => ActionFn(608);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action608::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 66)
    }
    pub(crate) fn __reduce146<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin00<Bl> = ExpBin00<Bl>, "and", ExpBin0<Bl> => ActionFn(617);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action617::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 67)
    }
    pub(crate) fn __reduce147<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin00<Bl> = ExpBin0<Bl> => ActionFn(283);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action283::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 67)
    }
    pub(crate) fn __reduce148<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin00<Ob> = ExpBin00<Ob>, "and", ExpBin0<Ob> => ActionFn(625);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action625::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 68)
    }
    pub(crate) fn __reduce149<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin00<Ob> = ExpBin0<Ob> => ActionFn(262);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action262::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 68)
    }
    pub(crate) fn __reduce150<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin00_<Bl> = ExpBin00<Bl> => ActionFn(610);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action610::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 69)
    }
    pub(crate) fn __reduce151<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin00_<Ob> = ExpBin00<Ob> => ActionFn(613);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action613::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 70)
    }
    pub(crate) fn __reduce152<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin0<Bl> = ExpBin0<Bl>, "+", ExpBin1<Bl> => ActionFn(633);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action633::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 71)
    }
    pub(crate) fn __reduce153<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin0<Bl> = ExpBin0<Bl>, "+%", ExpBin1<Bl> => ActionFn(634);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action634::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 71)
    }
    pub(crate) fn __reduce154<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin0<Bl> = ExpBin0<Bl>, "-", ExpBin1<Bl> => ActionFn(635);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action635::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 71)
    }
    pub(crate) fn __reduce155<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin0<Bl> = ExpBin0<Bl>, ":", Type => ActionFn(621);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant63(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action621::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 71)
    }
    pub(crate) fn __reduce156<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin0<Bl> = ExpBin1<Bl> => ActionFn(281);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action281::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 71)
    }
    pub(crate) fn __reduce157<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin0<Ob> = ExpBin0<Ob>, "+", ExpBin1<Ob> => ActionFn(639);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action639::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 72)
    }
    pub(crate) fn __reduce158<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin0<Ob> = ExpBin0<Ob>, "+%", ExpBin1<Ob> => ActionFn(640);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action640::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 72)
    }
    pub(crate) fn __reduce159<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin0<Ob> = ExpBin0<Ob>, "-", ExpBin1<Ob> => ActionFn(641);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action641::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 72)
    }
    pub(crate) fn __reduce160<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin0<Ob> = ExpBin0<Ob>, ":", Type => ActionFn(629);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant63(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action629::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 72)
    }
    pub(crate) fn __reduce161<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin0<Ob> = ExpBin1<Ob> => ActionFn(260);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action260::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 72)
    }
    pub(crate) fn __reduce162<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin0_<Bl> = ExpBin0<Bl> => ActionFn(616);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action616::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 73)
    }
    pub(crate) fn __reduce163<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin0_<Ob> = ExpBin0<Ob> => ActionFn(624);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action624::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 74)
    }
    pub(crate) fn __reduce164<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin1<Bl> = ExpBin2<Bl>, "*", ExpBin1<Bl> => ActionFn(645);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action645::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 75)
    }
    pub(crate) fn __reduce165<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin1<Bl> = ExpBin2<Bl>, "/", ExpBin1<Bl> => ActionFn(646);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action646::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 75)
    }
    pub(crate) fn __reduce166<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin1<Bl> = ExpBin2<Bl> => ActionFn(298);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action298::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 75)
    }
    pub(crate) fn __reduce167<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin1<Ob> = ExpBin2<Ob>, "*", ExpBin1<Ob> => ActionFn(649);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action649::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 76)
    }
    pub(crate) fn __reduce168<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin1<Ob> = ExpBin2<Ob>, "/", ExpBin1<Ob> => ActionFn(650);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action650::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 76)
    }
    pub(crate) fn __reduce169<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin1<Ob> = ExpBin2<Ob> => ActionFn(269);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action269::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 76)
    }
    pub(crate) fn __reduce170<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin1_<Bl> = ExpBin1<Bl> => ActionFn(632);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action632::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 77)
    }
    pub(crate) fn __reduce171<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin1_<Ob> = ExpBin1<Ob> => ActionFn(638);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action638::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 78)
    }
    pub(crate) fn __reduce172<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin2<Bl> = ExpBin3<Bl>, "|", ExpBin2<Bl> => ActionFn(653);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action653::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 79)
    }
    pub(crate) fn __reduce173<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin2<Bl> = ExpBin3<Bl> => ActionFn(302);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action302::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 79)
    }
    pub(crate) fn __reduce174<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin2<Ob> = ExpBin3<Ob>, "|", ExpBin2<Ob> => ActionFn(656);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action656::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 80)
    }
    pub(crate) fn __reduce175<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin2<Ob> = ExpBin3<Ob> => ActionFn(288);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action288::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 80)
    }
    pub(crate) fn __reduce176<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin2_<Bl> = ExpBin2<Bl> => ActionFn(644);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action644::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 81)
    }
    pub(crate) fn __reduce177<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin2_<Ob> = ExpBin2<Ob> => ActionFn(648);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action648::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 82)
    }
    pub(crate) fn __reduce178<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin3<Bl> = ExpUn<Bl>, "&", ExpBin3<Bl> => ActionFn(704);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action704::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 83)
    }
    pub(crate) fn __reduce179<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin3<Bl> = ExpUn<Bl> => ActionFn(324);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action324::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 83)
    }
    pub(crate) fn __reduce180<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin3<Ob> = ExpUn<Ob>, "&", ExpBin3<Ob> => ActionFn(708);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action708::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 84)
    }
    pub(crate) fn __reduce181<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin3<Ob> = ExpUn<Ob> => ActionFn(292);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action292::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 84)
    }
    pub(crate) fn __reduce182<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin3_<Bl> = ExpBin3<Bl> => ActionFn(652);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action652::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 85)
    }
    pub(crate) fn __reduce183<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin3_<Ob> = ExpBin3<Ob> => ActionFn(655);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action655::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 86)
    }
    pub(crate) fn __reduce184<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin<Bl> = ExpBin<Bl>, "==", ExpBin0<Bl> => ActionFn(659);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action659::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 87)
    }
    pub(crate) fn __reduce185<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin<Bl> = ExpBin<Bl>, "!=", ExpBin0<Bl> => ActionFn(660);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action660::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 87)
    }
    pub(crate) fn __reduce186<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin<Bl> = ExpBin000<Bl> => ActionFn(254);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action254::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 87)
    }
    pub(crate) fn __reduce187<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin<Ob> = ExpBin<Ob>, "==", ExpBin0<Ob> => ActionFn(663);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action663::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 88)
    }
    pub(crate) fn __reduce188<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin<Ob> = ExpBin<Ob>, "!=", ExpBin0<Ob> => ActionFn(664);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action664::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 88)
    }
    pub(crate) fn __reduce189<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin<Ob> = ExpBin000<Ob> => ActionFn(208);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action208::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 88)
    }
    pub(crate) fn __reduce190<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin_<Bl> = ExpBin<Bl> => ActionFn(658);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action658::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 89)
    }
    pub(crate) fn __reduce191<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpBin_<Ob> = ExpBin<Ob> => ActionFn(662);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action662::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 90)
    }
    pub(crate) fn __reduce192<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpField = VarOpt, Id, ":", Type, "=", Exp<Ob> => ActionFn(544);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant27(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant63(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant43(__symbols);
        let __sym0 = __pop_Variant65(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action544::<>(lookup, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant41(__nt), __end));
        (6, 91)
    }
    pub(crate) fn __reduce193<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpField = VarOpt, Id, "=", Exp<Ob> => ActionFn(545);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant27(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant43(__symbols);
        let __sym0 = __pop_Variant65(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action545::<>(lookup, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant41(__nt), __end));
        (4, 91)
    }
    pub(crate) fn __reduce194<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpField_ = ExpField => ActionFn(477);
        let __sym0 = __pop_Variant41(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action477::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (1, 92)
    }
    pub(crate) fn __reduce195<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpField_? = ExpField => ActionFn(479);
        let __sym0 = __pop_Variant41(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action479::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant42(__nt), __end));
        (1, 93)
    }
    pub(crate) fn __reduce196<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpField_? =  => ActionFn(188);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action188::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant42(__nt), __end));
        (0, 93)
    }
    pub(crate) fn __reduce197<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNest = Block => ActionFn(59);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action59::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 94)
    }
    pub(crate) fn __reduce198<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNest = Exp<Bl> => ActionFn(60);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action60::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 94)
    }
    pub(crate) fn __reduce199<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNest_ = ExpNest => ActionFn(670);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action670::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 95)
    }
    pub(crate) fn __reduce200<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Bl> = ExpBin<Bl> => ActionFn(233);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action233::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 96)
    }
    pub(crate) fn __reduce201<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Bl> = ExpBin<Bl>, ":=", Exp<Ob> => ActionFn(661);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action661::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 96)
    }
    pub(crate) fn __reduce202<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Bl> = "if", ExpNullary<Ob>, ExpNest, "else", ExpNest => ActionFn(672);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant27(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action672::<>(lookup, input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (5, 96)
    }
    pub(crate) fn __reduce203<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Bl> = "if", ExpNullary<Ob>, ExpNest, "\\no_else" => ActionFn(673);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action673::<>(lookup, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (4, 96)
    }
    pub(crate) fn __reduce204<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Bl> = "return", Exp<Bl> => ActionFn(715);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action715::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 96)
    }
    pub(crate) fn __reduce205<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Bl> = "return" => ActionFn(716);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action716::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 96)
    }
    pub(crate) fn __reduce206<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Bl> = "switch", ExpNullary<Ob>, "{", Cases, "}" => ActionFn(531);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant29(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action531::<>(lookup, input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (5, 96)
    }
    pub(crate) fn __reduce207<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Bl> = "while", ExpNullary<Ob>, ExpNest => ActionFn(674);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action674::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 96)
    }
    pub(crate) fn __reduce208<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Bl> = "for", "(", Pat, "in", Exp<Ob>, ")", ExpNest => ActionFn(743);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant27(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant27(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant56(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym6.2.clone();
        let __nt = super::__action743::<>(lookup, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (7, 96)
    }
    pub(crate) fn __reduce209<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Bl> = "ignore", ExpNest => ActionFn(676);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action676::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 96)
    }
    pub(crate) fn __reduce210<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Bl> = "do", Block => ActionFn(588);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action588::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 96)
    }
    pub(crate) fn __reduce211<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Bl> = "do", "?", Block => ActionFn(589);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action589::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 96)
    }
    pub(crate) fn __reduce212<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Bl> = "assert", ExpNest => ActionFn(677);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action677::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 96)
    }
    pub(crate) fn __reduce213<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Bl> = "debug", ExpNest => ActionFn(678);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action678::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 96)
    }
    pub(crate) fn __reduce214<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Ob> = ExpBin<Ob> => ActionFn(136);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action136::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 97)
    }
    pub(crate) fn __reduce215<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Ob> = ExpBin<Ob>, ":=", Exp<Ob> => ActionFn(665);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action665::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 97)
    }
    pub(crate) fn __reduce216<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Ob> = "if", ExpNullary<Ob>, ExpNest, "else", ExpNest => ActionFn(679);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant27(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action679::<>(lookup, input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (5, 97)
    }
    pub(crate) fn __reduce217<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Ob> = "if", ExpNullary<Ob>, ExpNest, "\\no_else" => ActionFn(680);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action680::<>(lookup, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (4, 97)
    }
    pub(crate) fn __reduce218<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Ob> = "return", Exp<Ob> => ActionFn(719);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action719::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 97)
    }
    pub(crate) fn __reduce219<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Ob> = "return" => ActionFn(720);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action720::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 97)
    }
    pub(crate) fn __reduce220<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Ob> = "switch", ExpNullary<Ob>, "{", Cases, "}" => ActionFn(535);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant29(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action535::<>(lookup, input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (5, 97)
    }
    pub(crate) fn __reduce221<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Ob> = "while", ExpNullary<Ob>, ExpNest => ActionFn(681);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action681::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 97)
    }
    pub(crate) fn __reduce222<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Ob> = "for", "(", Pat, "in", Exp<Ob>, ")", ExpNest => ActionFn(744);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant27(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant27(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant56(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym6.2.clone();
        let __nt = super::__action744::<>(lookup, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (7, 97)
    }
    pub(crate) fn __reduce223<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Ob> = "ignore", ExpNest => ActionFn(683);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action683::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 97)
    }
    pub(crate) fn __reduce224<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Ob> = "do", Block => ActionFn(590);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action590::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 97)
    }
    pub(crate) fn __reduce225<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Ob> = "do", "?", Block => ActionFn(591);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action591::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 97)
    }
    pub(crate) fn __reduce226<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Ob> = "assert", ExpNest => ActionFn(684);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action684::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 97)
    }
    pub(crate) fn __reduce227<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonDec<Ob> = "debug", ExpNest => ActionFn(685);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action685::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 97)
    }
    pub(crate) fn __reduce228<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonVar<Bl> = ExpNonDec<Bl> => ActionFn(185);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action185::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 98)
    }
    pub(crate) fn __reduce229<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonVar<Bl> = DecNonVar => ActionFn(597);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action597::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 98)
    }
    pub(crate) fn __reduce230<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonVar<Ob> = ExpNonDec<Ob> => ActionFn(246);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action246::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 99)
    }
    pub(crate) fn __reduce231<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonVar<Ob> = DecNonVar => ActionFn(598);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action598::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 99)
    }
    pub(crate) fn __reduce232<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonVar_<Ob> = ExpNonVar<Ob> => ActionFn(484);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action484::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 100)
    }
    pub(crate) fn __reduce233<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonVar_<Ob>? = ExpNonVar<Ob> => ActionFn(486);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action486::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (1, 101)
    }
    pub(crate) fn __reduce234<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNonVar_<Ob>? =  => ActionFn(338);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action338::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (0, 101)
    }
    pub(crate) fn __reduce235<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNullary<Bl> = Bl => ActionFn(357);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action357::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 102)
    }
    pub(crate) fn __reduce236<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNullary<Bl> = ExpPlain => ActionFn(358);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action358::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 102)
    }
    pub(crate) fn __reduce237<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNullary<Bl> = Id => ActionFn(359);
        let __sym0 = __pop_Variant43(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action359::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 102)
    }
    pub(crate) fn __reduce238<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNullary<Bl> = "prim", StringLiteral => ActionFn(360);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant62(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action360::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 102)
    }
    pub(crate) fn __reduce239<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNullary<Ob> = Ob => ActionFn(223);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action223::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 103)
    }
    pub(crate) fn __reduce240<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNullary<Ob> = ExpPlain => ActionFn(224);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action224::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 103)
    }
    pub(crate) fn __reduce241<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNullary<Ob> = Id => ActionFn(225);
        let __sym0 = __pop_Variant43(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action225::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 103)
    }
    pub(crate) fn __reduce242<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNullary<Ob> = "prim", StringLiteral => ActionFn(226);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant62(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action226::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 103)
    }
    pub(crate) fn __reduce243<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNullary_<Bl> = ExpNullary<Bl> => ActionFn(522);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action522::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 104)
    }
    pub(crate) fn __reduce244<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpNullary_<Ob> = ExpNullary<Ob> => ActionFn(527);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action527::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 105)
    }
    pub(crate) fn __reduce245<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpObj = "{", Delim0<ExpField_, ";">, "}" => ActionFn(63);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant37(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action63::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 106)
    }
    pub(crate) fn __reduce246<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpPlain = Literal => ActionFn(54);
        let __sym0 = __pop_Variant44(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action54::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 107)
    }
    pub(crate) fn __reduce247<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpPlain = "(", Delim1<Exp_<Ob>, ",">, ")" => ActionFn(55);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant38(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action55::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 107)
    }
    pub(crate) fn __reduce248<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpPlain_ = ExpPlain => ActionFn(690);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action690::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 108)
    }
    pub(crate) fn __reduce249<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpPost<Bl> = ExpNullary<Bl> => ActionFn(348);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action348::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 109)
    }
    pub(crate) fn __reduce250<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpPost<Bl> = "[", VarOpt, Delim0<ExpNonVar_<Ob>, ",">, "]" => ActionFn(349);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant38(__symbols);
        let __sym1 = __pop_Variant65(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action349::<>(lookup, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (4, 109)
    }
    pub(crate) fn __reduce251<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpPost<Bl> = ExpPost<Bl>, "[", Exp<Ob>, "]" => ActionFn(692);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action692::<>(lookup, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (4, 109)
    }
    pub(crate) fn __reduce252<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpPost<Bl> = ExpPost<Bl>, ".", NatIndex => ActionFn(693);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant25(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action693::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 109)
    }
    pub(crate) fn __reduce253<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpPost<Bl> = ExpPost<Bl>, ".", Id => ActionFn(694);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant43(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action694::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 109)
    }
    pub(crate) fn __reduce254<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpPost<Bl> = ExpPost<Bl>, ExpNullary<Ob> => ActionFn(695);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action695::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 109)
    }
    pub(crate) fn __reduce255<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpPost<Bl> = ExpPost<Bl>, "!" => ActionFn(696);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action696::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 109)
    }
    pub(crate) fn __reduce256<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpPost<Ob> = ExpNullary<Ob> => ActionFn(315);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action315::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 110)
    }
    pub(crate) fn __reduce257<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpPost<Ob> = "[", VarOpt, Delim0<ExpNonVar_<Ob>, ",">, "]" => ActionFn(316);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant38(__symbols);
        let __sym1 = __pop_Variant65(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action316::<>(lookup, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (4, 110)
    }
    pub(crate) fn __reduce258<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpPost<Ob> = ExpPost<Ob>, "[", Exp<Ob>, "]" => ActionFn(698);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action698::<>(lookup, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (4, 110)
    }
    pub(crate) fn __reduce259<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpPost<Ob> = ExpPost<Ob>, ".", NatIndex => ActionFn(699);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant25(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action699::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 110)
    }
    pub(crate) fn __reduce260<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpPost<Ob> = ExpPost<Ob>, ".", Id => ActionFn(700);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant43(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action700::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 110)
    }
    pub(crate) fn __reduce261<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpPost<Ob> = ExpPost<Ob>, ExpNullary<Ob> => ActionFn(701);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action701::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 110)
    }
    pub(crate) fn __reduce262<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpPost<Ob> = ExpPost<Ob>, "!" => ActionFn(702);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action702::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 110)
    }
    pub(crate) fn __reduce263<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpPost_<Bl> = ExpPost<Bl> => ActionFn(691);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action691::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 111)
    }
    pub(crate) fn __reduce264<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpPost_<Ob> = ExpPost<Ob> => ActionFn(697);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action697::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 112)
    }
    pub(crate) fn __reduce265<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpUn<Bl> = ExpPost<Bl> => ActionFn(327);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action327::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 113)
    }
    pub(crate) fn __reduce266<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpUn<Bl> = "#", Id, ExpNullary<Bl> => ActionFn(548);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant43(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action548::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 113)
    }
    pub(crate) fn __reduce267<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpUn<Bl> = "#", Id => ActionFn(549);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant43(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action549::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 113)
    }
    pub(crate) fn __reduce268<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpUn<Bl> = "?", ExpUn<Ob> => ActionFn(709);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action709::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 113)
    }
    pub(crate) fn __reduce269<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpUn<Bl> = UnOp, ExpUn<Bl> => ActionFn(705);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant64(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action705::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 113)
    }
    pub(crate) fn __reduce270<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpUn<Bl> = "not", ExpUn<Bl> => ActionFn(706);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action706::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 113)
    }
    pub(crate) fn __reduce271<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpUn<Ob> = ExpPost<Ob> => ActionFn(305);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action305::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 114)
    }
    pub(crate) fn __reduce272<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpUn<Ob> = "#", Id, ExpNullary<Ob> => ActionFn(550);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant43(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action550::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 114)
    }
    pub(crate) fn __reduce273<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpUn<Ob> = "#", Id => ActionFn(551);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant43(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action551::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 114)
    }
    pub(crate) fn __reduce274<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpUn<Ob> = "?", ExpUn<Ob> => ActionFn(710);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action710::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 114)
    }
    pub(crate) fn __reduce275<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpUn<Ob> = UnOp, ExpUn<Ob> => ActionFn(711);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant64(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action711::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 114)
    }
    pub(crate) fn __reduce276<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpUn<Ob> = "not", ExpUn<Ob> => ActionFn(712);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action712::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 114)
    }
    pub(crate) fn __reduce277<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpUn_<Bl> = ExpUn<Bl> => ActionFn(703);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action703::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 115)
    }
    pub(crate) fn __reduce278<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExpUn_<Ob> = ExpUn<Ob> => ActionFn(707);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action707::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 116)
    }
    pub(crate) fn __reduce279<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Exp_<Bl> = Exp<Bl> => ActionFn(713);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action713::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 117)
    }
    pub(crate) fn __reduce280<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Exp_<Bl>? = Exp<Bl> => ActionFn(714);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action714::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (1, 118)
    }
    pub(crate) fn __reduce281<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Exp_<Bl>? =  => ActionFn(249);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action249::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (0, 118)
    }
    pub(crate) fn __reduce282<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Exp_<Ob> = Exp<Ob> => ActionFn(491);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action491::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 119)
    }
    pub(crate) fn __reduce283<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Exp_<Ob>? = Exp<Ob> => ActionFn(506);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action506::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (1, 120)
    }
    pub(crate) fn __reduce284<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Exp_<Ob>? =  => ActionFn(203);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action203::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (0, 120)
    }
    pub(crate) fn __reduce285<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Id = r#"[a-zA-Z_][a-zA-Z_0-9]*"# => ActionFn(8);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action8::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant43(__nt), __end));
        (1, 121)
    }
    pub(crate) fn __reduce286<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Id_ = Id => ActionFn(542);
        let __sym0 = __pop_Variant43(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action542::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (1, 122)
    }
    pub(crate) fn __reduce287<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Id_? = Id => ActionFn(552);
        let __sym0 = __pop_Variant43(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action552::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 123)
    }
    pub(crate) fn __reduce288<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Id_? =  => ActionFn(126);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action126::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (0, 123)
    }
    pub(crate) fn __reduce289<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Literal = "null" => ActionFn(10);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action10::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant44(__nt), __end));
        (1, 124)
    }
    pub(crate) fn __reduce290<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Literal = "true" => ActionFn(11);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action11::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant44(__nt), __end));
        (1, 124)
    }
    pub(crate) fn __reduce291<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Literal = "false" => ActionFn(12);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action12::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant44(__nt), __end));
        (1, 124)
    }
    pub(crate) fn __reduce292<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Literal = "(", ")" => ActionFn(13);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action13::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant44(__nt), __end));
        (2, 124)
    }
    pub(crate) fn __reduce293<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Literal = r#"[+-]?[0-9]([0-9_]*[0-9])?[Ee][0-9]([0-9_]*[0-9])?"# => ActionFn(14);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action14::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant44(__nt), __end));
        (1, 124)
    }
    pub(crate) fn __reduce294<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Literal = r#"[+-]?[0-9]([0-9_]*[0-9])?\\.([0-9]([0-9_]*[0-9])?)?([Ee][0-9]([0-9_]*[0-9])?)?"# => ActionFn(15);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action15::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant44(__nt), __end));
        (1, 124)
    }
    pub(crate) fn __reduce295<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Literal = r#"0x[0-9a-fA-F]+"# => ActionFn(16);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action16::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant44(__nt), __end));
        (1, 124)
    }
    pub(crate) fn __reduce296<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Literal = r#"[0-9]([0-9_]*[0-9])?"# => ActionFn(17);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action17::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant44(__nt), __end));
        (1, 124)
    }
    pub(crate) fn __reduce297<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Literal = r#"'(?:[^\\\\'\\s]|\\\\.)*'|' '"# => ActionFn(18);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action18::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant44(__nt), __end));
        (1, 124)
    }
    pub(crate) fn __reduce298<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Literal = StringLiteral => ActionFn(19);
        let __sym0 = __pop_Variant62(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action19::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant44(__nt), __end));
        (1, 124)
    }
    pub(crate) fn __reduce299<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // NatIndex = r#"[0-9]([0-9_]*[0-9])?"# => ActionFn(7);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action7::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (1, 125)
    }
    pub(crate) fn __reduce300<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<Block> = Block => ActionFn(407);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action407::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 126)
    }
    pub(crate) fn __reduce301<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<Case> = Case => ActionFn(408);
        let __sym0 = __pop_Variant28(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action408::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (1, 127)
    }
    pub(crate) fn __reduce302<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<Case>? = Case => ActionFn(510);
        let __sym0 = __pop_Variant28(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action510::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant46(__nt), __end));
        (1, 128)
    }
    pub(crate) fn __reduce303<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<Case>? =  => ActionFn(193);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action193::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant46(__nt), __end));
        (0, 128)
    }
    pub(crate) fn __reduce304<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<Dec> = Dec => ActionFn(409);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action409::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant47(__nt), __end));
        (1, 129)
    }
    pub(crate) fn __reduce305<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<DecField> = DecField => ActionFn(410);
        let __sym0 = __pop_Variant31(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action410::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant48(__nt), __end));
        (1, 130)
    }
    pub(crate) fn __reduce306<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<DecNonVar> = DecNonVar => ActionFn(411);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action411::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant47(__nt), __end));
        (1, 131)
    }
    pub(crate) fn __reduce307<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<DecVar> = DecVar => ActionFn(412);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action412::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant47(__nt), __end));
        (1, 132)
    }
    pub(crate) fn __reduce308<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<Exp<Bl>> = Exp<Bl> => ActionFn(413);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action413::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 133)
    }
    pub(crate) fn __reduce309<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<Exp<Ob>> = Exp<Ob> => ActionFn(414);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action414::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 134)
    }
    pub(crate) fn __reduce310<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpBin000<Bl>> = ExpBin000<Bl> => ActionFn(415);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action415::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 135)
    }
    pub(crate) fn __reduce311<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpBin000<Ob>> = ExpBin000<Ob> => ActionFn(416);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action416::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 136)
    }
    pub(crate) fn __reduce312<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpBin00<Bl>> = ExpBin00<Bl> => ActionFn(417);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action417::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 137)
    }
    pub(crate) fn __reduce313<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpBin00<Ob>> = ExpBin00<Ob> => ActionFn(418);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action418::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 138)
    }
    pub(crate) fn __reduce314<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpBin0<Bl>> = ExpBin0<Bl> => ActionFn(419);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action419::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 139)
    }
    pub(crate) fn __reduce315<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpBin0<Ob>> = ExpBin0<Ob> => ActionFn(420);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action420::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 140)
    }
    pub(crate) fn __reduce316<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpBin1<Bl>> = ExpBin1<Bl> => ActionFn(421);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action421::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 141)
    }
    pub(crate) fn __reduce317<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpBin1<Ob>> = ExpBin1<Ob> => ActionFn(422);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action422::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 142)
    }
    pub(crate) fn __reduce318<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpBin2<Bl>> = ExpBin2<Bl> => ActionFn(423);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action423::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 143)
    }
    pub(crate) fn __reduce319<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpBin2<Ob>> = ExpBin2<Ob> => ActionFn(424);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action424::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 144)
    }
    pub(crate) fn __reduce320<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpBin3<Bl>> = ExpBin3<Bl> => ActionFn(425);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action425::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 145)
    }
    pub(crate) fn __reduce321<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpBin3<Ob>> = ExpBin3<Ob> => ActionFn(426);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action426::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 146)
    }
    pub(crate) fn __reduce322<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpBin<Bl>> = ExpBin<Bl> => ActionFn(427);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action427::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 147)
    }
    pub(crate) fn __reduce323<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpBin<Ob>> = ExpBin<Ob> => ActionFn(428);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action428::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 148)
    }
    pub(crate) fn __reduce324<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpField> = ExpField => ActionFn(429);
        let __sym0 = __pop_Variant41(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action429::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (1, 149)
    }
    pub(crate) fn __reduce325<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpNest> = ExpNest => ActionFn(430);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action430::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 150)
    }
    pub(crate) fn __reduce326<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpNonVar<Ob>> = ExpNonVar<Ob> => ActionFn(431);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action431::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 151)
    }
    pub(crate) fn __reduce327<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpNullary<Bl>> = ExpNullary<Bl> => ActionFn(432);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action432::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 152)
    }
    pub(crate) fn __reduce328<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpNullary<Ob>> = ExpNullary<Ob> => ActionFn(433);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action433::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 153)
    }
    pub(crate) fn __reduce329<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpPlain> = ExpPlain => ActionFn(434);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action434::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 154)
    }
    pub(crate) fn __reduce330<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpPost<Bl>> = ExpPost<Bl> => ActionFn(435);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action435::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 155)
    }
    pub(crate) fn __reduce331<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpPost<Ob>> = ExpPost<Ob> => ActionFn(436);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action436::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 156)
    }
    pub(crate) fn __reduce332<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpUn<Bl>> = ExpUn<Bl> => ActionFn(437);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action437::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 157)
    }
    pub(crate) fn __reduce333<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<ExpUn<Ob>> = ExpUn<Ob> => ActionFn(438);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action438::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 158)
    }
    pub(crate) fn __reduce334<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<Id> = Id => ActionFn(439);
        let __sym0 = __pop_Variant43(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action439::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant49(__nt), __end));
        (1, 159)
    }
    pub(crate) fn __reduce335<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<Pat> = Pat => ActionFn(440);
        let __sym0 = __pop_Variant56(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action440::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant50(__nt), __end));
        (1, 160)
    }
    pub(crate) fn __reduce336<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<PatBin> = PatBin => ActionFn(441);
        let __sym0 = __pop_Variant56(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action441::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant50(__nt), __end));
        (1, 161)
    }
    pub(crate) fn __reduce337<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<PatNullary> = PatNullary => ActionFn(442);
        let __sym0 = __pop_Variant56(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action442::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant50(__nt), __end));
        (1, 162)
    }
    pub(crate) fn __reduce338<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<PatPlain> = PatPlain => ActionFn(443);
        let __sym0 = __pop_Variant56(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action443::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant50(__nt), __end));
        (1, 163)
    }
    pub(crate) fn __reduce339<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<SortPat> = SortPat => ActionFn(444);
        let __sym0 = __pop_Variant59(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action444::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant51(__nt), __end));
        (1, 164)
    }
    pub(crate) fn __reduce340<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<Stab> = Stab => ActionFn(445);
        let __sym0 = __pop_Variant61(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action445::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant52(__nt), __end));
        (1, 165)
    }
    pub(crate) fn __reduce341<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<Type> = Type => ActionFn(446);
        let __sym0 = __pop_Variant63(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action446::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant53(__nt), __end));
        (1, 166)
    }
    pub(crate) fn __reduce342<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Node<Vis> = Vis => ActionFn(447);
        let __sym0 = __pop_Variant66(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action447::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant54(__nt), __end));
        (1, 167)
    }
    pub(crate) fn __reduce343<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Ob = ExpObj => ActionFn(6);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action6::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 168)
    }
    pub(crate) fn __reduce344<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ObjBody = "{", Delim0<DecField_, ";">, "}" => ActionFn(103);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant35(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action103::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant55(__nt), __end));
        (3, 169)
    }
    pub(crate) fn __reduce345<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Pat = PatBin => ActionFn(35);
        let __sym0 = __pop_Variant56(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action35::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant56(__nt), __end));
        (1, 170)
    }
    pub(crate) fn __reduce346<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PatBin = PatBin, ":", Type => ActionFn(518);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant63(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant56(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action518::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant56(__nt), __end));
        (3, 171)
    }
    pub(crate) fn __reduce347<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PatBin = PatUn => ActionFn(30);
        let __sym0 = __pop_Variant56(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action30::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant56(__nt), __end));
        (1, 171)
    }
    pub(crate) fn __reduce348<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PatBin_ = PatBin => ActionFn(515);
        let __sym0 = __pop_Variant56(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action515::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (1, 172)
    }
    pub(crate) fn __reduce349<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PatBin_? = PatBin => ActionFn(519);
        let __sym0 = __pop_Variant56(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action519::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 173)
    }
    pub(crate) fn __reduce350<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PatBin_? =  => ActionFn(175);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action175::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (0, 173)
    }
    pub(crate) fn __reduce351<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PatNullary = PatPlain => ActionFn(27);
        let __sym0 = __pop_Variant56(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action27::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant56(__nt), __end));
        (1, 174)
    }
    pub(crate) fn __reduce352<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PatNullary_ = PatNullary => ActionFn(726);
        let __sym0 = __pop_Variant56(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action726::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (1, 175)
    }
    pub(crate) fn __reduce353<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PatPlain = "_" => ActionFn(22);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action22::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant56(__nt), __end));
        (1, 176)
    }
    pub(crate) fn __reduce354<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PatPlain = Id => ActionFn(553);
        let __sym0 = __pop_Variant43(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action553::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant56(__nt), __end));
        (1, 176)
    }
    pub(crate) fn __reduce355<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PatPlain = Literal => ActionFn(24);
        let __sym0 = __pop_Variant44(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action24::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant56(__nt), __end));
        (1, 176)
    }
    pub(crate) fn __reduce356<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PatPlain = "(", Delim1<PatBin_, ",">, ")" => ActionFn(25);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant40(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action25::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant56(__nt), __end));
        (3, 176)
    }
    pub(crate) fn __reduce357<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PatPlain_ = PatPlain => ActionFn(727);
        let __sym0 = __pop_Variant56(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action727::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (1, 177)
    }
    pub(crate) fn __reduce358<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PatUn = PatNullary => ActionFn(31);
        let __sym0 = __pop_Variant56(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action31::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant56(__nt), __end));
        (1, 178)
    }
    pub(crate) fn __reduce359<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PatUn = "#", Id => ActionFn(554);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant43(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action554::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant56(__nt), __end));
        (2, 178)
    }
    pub(crate) fn __reduce360<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PatUn = "#", Id, PatNullary => ActionFn(732);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant56(__symbols);
        let __sym1 = __pop_Variant43(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action732::<>(lookup, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant56(__nt), __end));
        (3, 178)
    }
    pub(crate) fn __reduce361<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Pat_ = Pat => ActionFn(725);
        let __sym0 = __pop_Variant56(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action725::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (1, 179)
    }
    pub(crate) fn __reduce362<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PrimType = "(", ")" => ActionFn(36);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action36::<>(lookup, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant58(__nt), __end));
        (2, 180)
    }
    pub(crate) fn __reduce363<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PrimType = "Bool" => ActionFn(37);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action37::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant58(__nt), __end));
        (1, 180)
    }
    pub(crate) fn __reduce364<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PrimType = "Nat" => ActionFn(38);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action38::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant58(__nt), __end));
        (1, 180)
    }
    pub(crate) fn __reduce365<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PrimType = "Nat8" => ActionFn(39);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action39::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant58(__nt), __end));
        (1, 180)
    }
    pub(crate) fn __reduce366<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PrimType = "Nat16" => ActionFn(40);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action40::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant58(__nt), __end));
        (1, 180)
    }
    pub(crate) fn __reduce367<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PrimType = "Nat32" => ActionFn(41);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action41::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant58(__nt), __end));
        (1, 180)
    }
    pub(crate) fn __reduce368<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PrimType = "Nat64" => ActionFn(42);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action42::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant58(__nt), __end));
        (1, 180)
    }
    pub(crate) fn __reduce369<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PrimType = "Int" => ActionFn(43);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action43::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant58(__nt), __end));
        (1, 180)
    }
    pub(crate) fn __reduce370<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PrimType = "Int8" => ActionFn(44);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action44::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant58(__nt), __end));
        (1, 180)
    }
    pub(crate) fn __reduce371<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PrimType = "Int16" => ActionFn(45);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action45::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant58(__nt), __end));
        (1, 180)
    }
    pub(crate) fn __reduce372<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PrimType = "Int32" => ActionFn(46);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action46::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant58(__nt), __end));
        (1, 180)
    }
    pub(crate) fn __reduce373<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PrimType = "Int64" => ActionFn(47);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action47::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant58(__nt), __end));
        (1, 180)
    }
    pub(crate) fn __reduce374<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PrimType = "Principal" => ActionFn(48);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action48::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant58(__nt), __end));
        (1, 180)
    }
    pub(crate) fn __reduce375<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PrimType = "Text" => ActionFn(49);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action49::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant58(__nt), __end));
        (1, 180)
    }
    pub(crate) fn __reduce376<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Prog = Decs => ActionFn(52);
        let __sym0 = __pop_Variant34(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action52::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant34(__nt), __end));
        (1, 181)
    }
    pub(crate) fn __reduce377<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // SortPat =  => ActionFn(80);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action80::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant59(__nt), __end));
        (0, 182)
    }
    pub(crate) fn __reduce378<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // SortPat_ = SortPat => ActionFn(728);
        let __sym0 = __pop_Variant59(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action728::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant60(__nt), __end));
        (1, 183)
    }
    pub(crate) fn __reduce379<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Stab = "stable" => ActionFn(108);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action108::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant61(__nt), __end));
        (1, 184)
    }
    pub(crate) fn __reduce380<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Stab = "flexible" => ActionFn(109);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action109::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant61(__nt), __end));
        (1, 184)
    }
    pub(crate) fn __reduce381<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Stab_ = Stab => ActionFn(571);
        let __sym0 = __pop_Variant61(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action571::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (1, 185)
    }
    pub(crate) fn __reduce382<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // StringLiteral = r#"\"(?:[^\\\\\"\\n]|\\\\.)*\""# => ActionFn(20);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action20::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant62(__nt), __end));
        (1, 186)
    }
    pub(crate) fn __reduce383<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // TextId = Id => ActionFn(64);
        let __sym0 = __pop_Variant43(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action64::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant62(__nt), __end));
        (1, 187)
    }
    pub(crate) fn __reduce384<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Type = PrimType => ActionFn(51);
        let __sym0 = __pop_Variant58(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action51::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant63(__nt), __end));
        (1, 188)
    }
    pub(crate) fn __reduce385<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Type_ = Type => ActionFn(448);
        let __sym0 = __pop_Variant63(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action448::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 189)
    }
    pub(crate) fn __reduce386<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // UnOp = "+" => ActionFn(83);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action83::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant64(__nt), __end));
        (1, 190)
    }
    pub(crate) fn __reduce387<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // UnOp = "-" => ActionFn(84);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action84::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant64(__nt), __end));
        (1, 190)
    }
    pub(crate) fn __reduce388<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // UnOp = "^" => ActionFn(85);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action85::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant64(__nt), __end));
        (1, 190)
    }
    pub(crate) fn __reduce389<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // VarOpt = "var" => ActionFn(56);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action56::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant65(__nt), __end));
        (1, 191)
    }
    pub(crate) fn __reduce390<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // VarOpt =  => ActionFn(57);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action57::<>(lookup, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant65(__nt), __end));
        (0, 191)
    }
    pub(crate) fn __reduce391<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Vis = "public" => ActionFn(105);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action105::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant66(__nt), __end));
        (1, 192)
    }
    pub(crate) fn __reduce392<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Vis = "private" => ActionFn(106);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action106::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant66(__nt), __end));
        (1, 192)
    }
    pub(crate) fn __reduce393<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Vis_ = Vis => ActionFn(576);
        let __sym0 = __pop_Variant66(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action576::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (1, 193)
    }
    pub(crate) fn __reduce394<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // __Literal = Literal => ActionFn(0);
        let __sym0 = __pop_Variant44(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action0::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant44(__nt), __end));
        (1, 194)
    }
    pub(crate) fn __reduce395<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // __Pat = Pat => ActionFn(1);
        let __sym0 = __pop_Variant56(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action1::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant56(__nt), __end));
        (1, 195)
    }
    pub(crate) fn __reduce396<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // __PrimType = PrimType => ActionFn(2);
        let __sym0 = __pop_Variant58(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action2::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant58(__nt), __end));
        (1, 196)
    }
    pub(crate) fn __reduce397<
        'input,
    >(
        lookup: &LineColLookup<'input>,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // __Prog = Prog => ActionFn(4);
        let __sym0 = __pop_Variant34(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action4::<>(lookup, input, __sym0);
        __symbols.push((__start, __Symbol::Variant34(__nt), __end));
        (1, 197)
    }
}
pub use self::__parse__Type::TypeParser;
#[cfg_attr(rustfmt, rustfmt_skip)]
mod __intern_token {
    #![allow(unused_imports)]
    use crate::parser_utils::{dec_node_into_exp, get_one, node};
    use crate::ast::{Node, Source, Id, Id_, Pat, Pat_, Exp, Exp_, ExpField, Type, Type_, PrimType, Literal, Case, Cases, Decs, Dec, Dec_, UnOp, BinOp, RelOp, Delim, Mut, SortPat, SortPat_, Sugar, Vis, Vis_, Stab, Stab_, DecField, DecField_, DecFields};
    use line_col::LineColLookup;
    #[allow(unused_extern_crates)]
    extern crate lalrpop_util as __lalrpop_util;
    #[allow(unused_imports)]
    use self::__lalrpop_util::state_machine as __state_machine;
    extern crate core;
    extern crate alloc;
    pub fn new_builder() -> __lalrpop_util::lexer::MatcherBuilder {
        let __strs: &[(&str, bool)] = &[
            ("^(\"(?:[\0-\t\u{b}-!\\#-\\[\\]-\u{10ffff}]|\\\\[\0-\t\u{b}-\u{10ffff}])*\")", false),
            ("^('(?:[\0-\u{8}\u{e}-\u{1f}!-\\&\\(-\\[\\]-\u{84}\u{86}-\u{9f}¡-ᙿᚁ-\u{1fff}\u{200b}-‧\u{202a}-\u{202e}‰-⁞\u{2060}-\u{2fff}、-\u{10ffff}]|\\\\[\0-\t\u{b}-\u{10ffff}])*'|' ')", false),
            ("^(0x[0-9A-Fa-f]+)", false),
            ("^([\\+\\-]?[0-9]([0-9_]*[0-9])?[Ee][0-9]([0-9_]*[0-9])?)", false),
            ("^([\\+\\-]?[0-9]([0-9_]*[0-9])?\\.([0-9]([0-9_]*[0-9])?)?([Ee][0-9]([0-9_]*[0-9])?)?)", false),
            ("^([0-9]([0-9_]*[0-9])?)", false),
            ("^([A-Z_a-z][0-9A-Z_a-z]*)", false),
            ("^(\\\\\\\\BIG[\0-\t\u{b}-\u{10ffff}]FART[\0-\t\u{b}-\u{10ffff}])", false),
            ("^(!)", false),
            ("^(!=)", false),
            ("^(\\#)", false),
            ("^(%)", false),
            ("^(\\&)", false),
            ("^(\\()", false),
            ("^(\\))", false),
            ("^(\\*)", false),
            ("^(\\*%)", false),
            ("^(\\*\\*)", false),
            ("^(\\*\\*%)", false),
            ("^(\\+)", false),
            ("^(\\+%)", false),
            ("^(,)", false),
            ("^(\\-)", false),
            ("^(\\-%)", false),
            ("^(\\.)", false),
            ("^(/)", false),
            ("^(:)", false),
            ("^(:=)", false),
            ("^(;)", false),
            ("^(<<)", false),
            ("^(<<>)", false),
            ("^(<>>)", false),
            ("^(=)", false),
            ("^(==)", false),
            ("^(\\?)", false),
            ("^(Bool)", false),
            ("^(Int)", false),
            ("^(Int16)", false),
            ("^(Int32)", false),
            ("^(Int64)", false),
            ("^(Int8)", false),
            ("^(Nat)", false),
            ("^(Nat16)", false),
            ("^(Nat32)", false),
            ("^(Nat64)", false),
            ("^(Nat8)", false),
            ("^(Principal)", false),
            ("^(Text)", false),
            ("^(\\[)", false),
            ("^(\\\\no_else)", false),
            ("^(\\])", false),
            ("^(\\^)", false),
            ("^(_)", false),
            ("^(and)", false),
            ("^(assert)", false),
            ("^(case)", false),
            ("^(debug)", false),
            ("^(do)", false),
            ("^(else)", false),
            ("^(false)", false),
            ("^(flexible)", false),
            ("^(for)", false),
            ("^(func)", false),
            ("^(if)", false),
            ("^(ignore)", false),
            ("^(in)", false),
            ("^(let)", false),
            ("^(module)", false),
            ("^(not)", false),
            ("^(null)", false),
            ("^(or)", false),
            ("^(prim)", false),
            ("^(private)", false),
            ("^(public)", false),
            ("^(return)", false),
            ("^(stable)", false),
            ("^(switch)", false),
            ("^(true)", false),
            ("^(var)", false),
            ("^(while)", false),
            ("^(\\{)", false),
            ("^(\\|)", false),
            ("^(\\})", false),
            (r"^(\s*)", true),
        ];
        __lalrpop_util::lexer::MatcherBuilder::new(__strs.iter().copied()).unwrap()
    }
}
pub(crate) use self::__lalrpop_util::lexer::Token;

#[allow(unused_variables)]
fn __action0<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Literal, usize),
) -> Literal
{
    __0
}

#[allow(unused_variables)]
fn __action1<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Pat, usize),
) -> Pat
{
    __0
}

#[allow(unused_variables)]
fn __action2<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, PrimType, usize),
) -> PrimType
{
    __0
}

#[allow(unused_variables)]
fn __action3<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Type, usize),
) -> Type
{
    __0
}

#[allow(unused_variables)]
fn __action4<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Decs, usize),
) -> Decs
{
    __0
}

#[allow(unused_variables)]
fn __action5<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> Exp
{
    unreachable!()
}

#[allow(unused_variables)]
fn __action6<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Exp, usize),
) -> Exp
{
    __0
}

#[allow(unused_variables)]
fn __action7<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> usize
{
    __0.replace('_', "").parse().unwrap()
}

#[allow(unused_variables)]
fn __action8<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> Id
{
    __0.to_string()
}

#[allow(unused_variables)]
fn __action9<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Node<Id>, usize),
) -> Id_
{
    __0
}

#[allow(unused_variables)]
fn __action10<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> Literal
{
    Literal::Null
}

#[allow(unused_variables)]
fn __action11<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> Literal
{
    Literal::Bool(true)
}

#[allow(unused_variables)]
fn __action12<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> Literal
{
    Literal::Bool(false)
}

#[allow(unused_variables)]
fn __action13<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
    (_, __1, _): (usize, &'input str, usize),
) -> Literal
{
    Literal::Unit
}

#[allow(unused_variables)]
fn __action14<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> Literal
{
    Literal::Float(__0.to_string())
}

#[allow(unused_variables)]
fn __action15<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> Literal
{
    Literal::Float(__0.to_string())
}

#[allow(unused_variables)]
fn __action16<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> Literal
{
    Literal::Nat(__0.to_string())
}

#[allow(unused_variables)]
fn __action17<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> Literal
{
    Literal::Nat(__0.to_string())
}

#[allow(unused_variables)]
fn __action18<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> Literal
{
    Literal::Char(__0.to_string())
}

#[allow(unused_variables)]
fn __action19<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, s, _): (usize, String, usize),
) -> Literal
{
    Literal::Text(s)
}

#[allow(unused_variables)]
fn __action20<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> String
{
    __0.to_string()
}

#[allow(unused_variables)]
fn __action21<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Node<Pat>, usize),
) -> Pat_
{
    __0
}

#[allow(unused_variables)]
fn __action22<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> Pat
{
    Pat::Wild
}

#[allow(unused_variables)]
fn __action23<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Id_, usize),
) -> Pat
{
    Pat::Var(__0)
}

#[allow(unused_variables)]
fn __action24<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Literal, usize),
) -> Pat
{
    Pat::Literal(__0)
}

#[allow(unused_variables)]
fn __action25<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, ps, _): (usize, Delim<Pat_>, usize),
    (_, _, _): (usize, &'input str, usize),
) -> Pat
{
    get_one(ps).map(Pat::Paren).unwrap_or_else(Pat::Tuple)
}

#[allow(unused_variables)]
fn __action26<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Node<Pat>, usize),
) -> Pat_
{
    __0
}

#[allow(unused_variables)]
fn __action27<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Pat, usize),
) -> Pat
{
    __0
}

#[allow(unused_variables)]
fn __action28<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Node<Pat>, usize),
) -> Pat_
{
    __0
}

#[allow(unused_variables)]
fn __action29<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, p, _): (usize, Pat_, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, t, _): (usize, Type_, usize),
) -> Pat
{
    Pat::Annot(p, t)
}

#[allow(unused_variables)]
fn __action30<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Pat, usize),
) -> Pat
{
    __0
}

#[allow(unused_variables)]
fn __action31<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Pat, usize),
) -> Pat
{
    __0
}

#[allow(unused_variables)]
fn __action32<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, s, _): (usize, Id_, usize),
) -> Pat
{
    Pat::Variant(s, None)
}

#[allow(unused_variables)]
fn __action33<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, s, _): (usize, Id_, usize),
    (_, p, _): (usize, Pat_, usize),
) -> Pat
{
    Pat::Variant(s, Some(p))
}

#[allow(unused_variables)]
fn __action34<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Node<Pat>, usize),
) -> Pat_
{
    __0
}

#[allow(unused_variables)]
fn __action35<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Pat, usize),
) -> Pat
{
    __0
}

#[allow(unused_variables)]
fn __action36<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
    (_, __1, _): (usize, &'input str, usize),
) -> PrimType
{
    PrimType::Unit
}

#[allow(unused_variables)]
fn __action37<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> PrimType
{
    PrimType::Bool
}

#[allow(unused_variables)]
fn __action38<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> PrimType
{
    PrimType::Nat
}

#[allow(unused_variables)]
fn __action39<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> PrimType
{
    PrimType::Nat8
}

#[allow(unused_variables)]
fn __action40<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> PrimType
{
    PrimType::Nat16
}

#[allow(unused_variables)]
fn __action41<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> PrimType
{
    PrimType::Nat32
}

#[allow(unused_variables)]
fn __action42<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> PrimType
{
    PrimType::Nat64
}

#[allow(unused_variables)]
fn __action43<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> PrimType
{
    PrimType::Int
}

#[allow(unused_variables)]
fn __action44<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> PrimType
{
    PrimType::Int8
}

#[allow(unused_variables)]
fn __action45<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> PrimType
{
    PrimType::Int16
}

#[allow(unused_variables)]
fn __action46<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> PrimType
{
    PrimType::Int32
}

#[allow(unused_variables)]
fn __action47<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> PrimType
{
    PrimType::Int64
}

#[allow(unused_variables)]
fn __action48<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> PrimType
{
    PrimType::Principal
}

#[allow(unused_variables)]
fn __action49<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> PrimType
{
    PrimType::Text
}

#[allow(unused_variables)]
fn __action50<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Node<Type>, usize),
) -> Type_
{
    __0
}

#[allow(unused_variables)]
fn __action51<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, PrimType, usize),
) -> Type
{
    Type::Prim(__0)
}

#[allow(unused_variables)]
fn __action52<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Decs, usize),
) -> Decs
{
    __0
}

#[allow(unused_variables)]
fn __action53<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Node<Exp>, usize),
) -> Exp_
{
    __0
}

#[allow(unused_variables)]
fn __action54<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Literal, usize),
) -> Exp
{
    Exp::Literal(__0)
}

#[allow(unused_variables)]
fn __action55<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, es, _): (usize, Delim<Exp_>, usize),
    (_, _, _): (usize, &'input str, usize),
) -> Exp
{
    get_one(es).map(Exp::Paren).unwrap_or_else(Exp::Tuple)
}

#[allow(unused_variables)]
fn __action56<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> Mut
{
    Mut::Var
}

#[allow(unused_variables)]
fn __action57<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> Mut
{
    Mut::Const
}

#[allow(unused_variables)]
fn __action58<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Node<Exp>, usize),
) -> Exp_
{
    __0
}

#[allow(unused_variables)]
fn __action59<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Exp, usize),
) -> Exp
{
    __0
}

#[allow(unused_variables)]
fn __action60<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Exp, usize),
) -> Exp
{
    __0
}

#[allow(unused_variables)]
fn __action61<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, ds, _): (usize, Decs, usize),
    (_, _, _): (usize, &'input str, usize),
) -> Exp
{
    Exp::Block(ds)
}

#[allow(unused_variables)]
fn __action62<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Node<Exp>, usize),
) -> Exp_
{
    __0
}

#[allow(unused_variables)]
fn __action63<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, efs, _): (usize, Delim<Node<ExpField>>, usize),
    (_, _, _): (usize, &'input str, usize),
) -> Exp
{
    Exp::Object(efs)
}

#[allow(unused_variables)]
fn __action64<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Id, usize),
) -> String
{
    __0
}

#[allow(unused_variables)]
fn __action65<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Delim<Node<Case>>, usize),
) -> Cases
{
    __0
}

#[allow(unused_variables)]
fn __action66<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, pat, _): (usize, Pat_, usize),
    (_, exp, _): (usize, Exp_, usize),
) -> Case
{
    Case{pat, exp}
}

#[allow(unused_variables)]
fn __action67<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Node<ExpField>, usize),
) -> Node<ExpField>
{
    __0
}

#[allow(unused_variables)]
fn __action68<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, mut_, _): (usize, Mut, usize),
    (_, id, _): (usize, Id_, usize),
    (_, typ, _): (usize, core::option::Option<Type_>, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, exp, _): (usize, Exp_, usize),
) -> ExpField
{
    ExpField{ mut_, id, exp, typ }
}

#[allow(unused_variables)]
fn __action69<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Delim<Dec_>, usize),
) -> Decs
{
    __0
}

#[allow(unused_variables)]
fn __action70<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Node<Dec>, usize),
) -> Dec_
{
    __0
}

#[allow(unused_variables)]
fn __action71<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Dec, usize),
) -> Dec
{
    __0
}

#[allow(unused_variables)]
fn __action72<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Dec, usize),
) -> Dec
{
    __0
}

#[allow(unused_variables)]
fn __action73<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Exp, usize),
) -> Dec
{
    Dec::Exp(__0)
}

#[allow(unused_variables)]
fn __action74<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Node<Dec>, usize),
) -> Dec_
{
    __0
}

#[allow(unused_variables)]
fn __action75<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, p, _): (usize, Pat_, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, e, _): (usize, Exp_, usize),
) -> Dec
{
    Dec::Let(p, e)
}

#[allow(unused_variables)]
fn __action76<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, i, _): (usize, core::option::Option<Id_>, usize),
    (_, s, _): (usize, core::option::Option<&'input str>, usize),
    (_, ob, _): (usize, DecFields, usize),
) -> Dec
{
    Dec::LetModule(i, Sugar(s.is_some()), ob)
}

#[allow(unused_variables)]
fn __action77<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, sp, _): (usize, SortPat_, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, i, _): (usize, core::option::Option<Id_>, usize),
    (_, p, _): (usize, Pat_, usize),
    (_, t, _): (usize, core::option::Option<(&'input str, Type_)>, usize),
    (_, b, _): (usize, Exp_, usize),
) -> Dec
{
    Dec::Func((i, sp, Delim::new(), p, t.map(|t|{t.1}), Sugar(false), b))
}

#[allow(unused_variables)]
fn __action78<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, sp, _): (usize, SortPat_, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, i, _): (usize, core::option::Option<Id_>, usize),
    (_, p, _): (usize, Pat_, usize),
    (_, t, _): (usize, core::option::Option<(&'input str, Type_)>, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, e, _): (usize, Exp_, usize),
) -> Dec
{
    Dec::Func((i, sp, Delim::new(), p, t.map(|t|{t.1}), Sugar(true), e))
}

#[allow(unused_variables)]
fn __action79<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Node<SortPat>, usize),
) -> SortPat_
{
    __0
}

#[allow(unused_variables)]
fn __action80<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> SortPat
{
    SortPat::Local
}

#[allow(unused_variables)]
fn __action81<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Node<Dec>, usize),
) -> Dec_
{
    __0
}

#[allow(unused_variables)]
fn __action82<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, p, _): (usize, Pat_, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, e, _): (usize, Exp_, usize),
) -> Dec
{
    Dec::Var(p, e)
}

#[allow(unused_variables)]
fn __action83<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> UnOp
{
    UnOp::Pos
}

#[allow(unused_variables)]
fn __action84<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> UnOp
{
    UnOp::Neg
}

#[allow(unused_variables)]
fn __action85<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> UnOp
{
    UnOp::Not
}

#[allow(unused_variables)]
fn __action86<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> BinOp
{
    BinOp::Add
}

#[allow(unused_variables)]
fn __action87<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> BinOp
{
    BinOp::Sub
}

#[allow(unused_variables)]
fn __action88<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> BinOp
{
    BinOp::Mul
}

#[allow(unused_variables)]
fn __action89<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> BinOp
{
    BinOp::Div
}

#[allow(unused_variables)]
fn __action90<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> BinOp
{
    BinOp::Mod
}

#[allow(unused_variables)]
fn __action91<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> BinOp
{
    BinOp::Pow
}

#[allow(unused_variables)]
fn __action92<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> BinOp
{
    BinOp::WAdd
}

#[allow(unused_variables)]
fn __action93<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> BinOp
{
    BinOp::WSub
}

#[allow(unused_variables)]
fn __action94<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> BinOp
{
    BinOp::WMul
}

#[allow(unused_variables)]
fn __action95<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> BinOp
{
    BinOp::WPow
}

#[allow(unused_variables)]
fn __action96<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> BinOp
{
    BinOp::And
}

#[allow(unused_variables)]
fn __action97<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> BinOp
{
    BinOp::Or
}

#[allow(unused_variables)]
fn __action98<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> BinOp
{
    BinOp::Xor
}

#[allow(unused_variables)]
fn __action99<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> BinOp
{
    BinOp::ShL
}

#[allow(unused_variables)]
fn __action100<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> BinOp
{
    BinOp::RotL
}

#[allow(unused_variables)]
fn __action101<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> BinOp
{
    BinOp::RotR
}

#[allow(unused_variables)]
fn __action102<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> BinOp
{
    BinOp::Cat
}

#[allow(unused_variables)]
fn __action103<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, dfs, _): (usize, Delim<DecField_>, usize),
    (_, _, _): (usize, &'input str, usize),
) -> DecFields
{
    dfs
}

#[allow(unused_variables)]
fn __action104<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Node<Vis>, usize),
) -> Vis_
{
    __0
}

#[allow(unused_variables)]
fn __action105<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> Vis
{
    Vis::Private
}

#[allow(unused_variables)]
fn __action106<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> Vis
{
    Vis::Private
}

#[allow(unused_variables)]
fn __action107<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Node<Stab>, usize),
) -> Stab_
{
    __0
}

#[allow(unused_variables)]
fn __action108<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> Stab
{
    Stab::Stable
}

#[allow(unused_variables)]
fn __action109<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> Stab
{
    Stab::Flexible
}

#[allow(unused_variables)]
fn __action110<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Node<DecField>, usize),
) -> DecField_
{
    __0
}

#[allow(unused_variables)]
fn __action111<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, vis, _): (usize, core::option::Option<Vis_>, usize),
    (_, stab, _): (usize, core::option::Option<Stab_>, usize),
    (_, dec, _): (usize, Dec_, usize),
) -> DecField
{
    DecField{ vis, stab, dec }
}

#[allow(unused_variables)]
fn __action112<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Stab_, usize),
) -> core::option::Option<Stab_>
{
    Some(__0)
}

#[allow(unused_variables)]
fn __action113<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> core::option::Option<Stab_>
{
    None
}

#[allow(unused_variables)]
fn __action114<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Stab_, usize),
) -> Stab_
{
    __0
}

#[allow(unused_variables)]
fn __action115<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Vis_, usize),
) -> core::option::Option<Vis_>
{
    Some(__0)
}

#[allow(unused_variables)]
fn __action116<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> core::option::Option<Vis_>
{
    None
}

#[allow(unused_variables)]
fn __action117<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Vis_, usize),
) -> Vis_
{
    __0
}

#[allow(unused_variables)]
fn __action118<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, start, _): (usize, usize, usize),
    (_, t, _): (usize, DecField, usize),
    (_, end, _): (usize, usize, usize),
) -> Node<DecField>
{
    {
        let (line, col) = lookup.get(start);
        node(t, Source::Known { span: start..end, line, col })
    }
}

#[allow(unused_variables)]
fn __action119<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, start, _): (usize, usize, usize),
    (_, t, _): (usize, Stab, usize),
    (_, end, _): (usize, usize, usize),
) -> Node<Stab>
{
    {
        let (line, col) = lookup.get(start);
        node(t, Source::Known { span: start..end, line, col })
    }
}

#[allow(unused_variables)]
fn __action120<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, start, _): (usize, usize, usize),
    (_, t, _): (usize, Vis, usize),
    (_, end, _): (usize, usize, usize),
) -> Node<Vis>
{
    {
        let (line, col) = lookup.get(start);
        node(t, Source::Known { span: start..end, line, col })
    }
}

#[allow(unused_variables)]
fn __action121<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, mut v, _): (usize, alloc::vec::Vec<DecField_>, usize),
    (_, e, _): (usize, core::option::Option<DecField_>, usize),
) -> Delim<DecField_>
{
    match e {
        None => {
            let has_trailing = v.len() > 0;
            Delim{ vec:v, has_trailing }
        },
        Some(e) => {
            v.push(e);
            Delim{ vec:v, has_trailing: false }
        }
    }
}

#[allow(unused_variables)]
fn __action122<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, start, _): (usize, usize, usize),
    (_, t, _): (usize, Dec, usize),
    (_, end, _): (usize, usize, usize),
) -> Node<Dec>
{
    {
        let (line, col) = lookup.get(start);
        node(t, Source::Known { span: start..end, line, col })
    }
}

#[allow(unused_variables)]
fn __action123<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, start, _): (usize, usize, usize),
    (_, t, _): (usize, SortPat, usize),
    (_, end, _): (usize, usize, usize),
) -> Node<SortPat>
{
    {
        let (line, col) = lookup.get(start);
        node(t, Source::Known { span: start..end, line, col })
    }
}

#[allow(unused_variables)]
fn __action124<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, core::option::Option<Id_>, usize),
) -> core::option::Option<Id_>
{
    __0
}

#[allow(unused_variables)]
fn __action125<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Id_, usize),
) -> core::option::Option<Id_>
{
    Some(__0)
}

#[allow(unused_variables)]
fn __action126<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> core::option::Option<Id_>
{
    None
}

#[allow(unused_variables)]
fn __action127<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, (&'input str, Type_), usize),
) -> core::option::Option<(&'input str, Type_)>
{
    Some(__0)
}

#[allow(unused_variables)]
fn __action128<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> core::option::Option<(&'input str, Type_)>
{
    None
}

#[allow(unused_variables)]
fn __action129<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
    (_, __1, _): (usize, Type_, usize),
) -> (&'input str, Type_)
{
    (__0, __1)
}

#[allow(unused_variables)]
fn __action130<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> core::option::Option<&'input str>
{
    Some(__0)
}

#[allow(unused_variables)]
fn __action131<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> core::option::Option<&'input str>
{
    None
}

#[allow(unused_variables)]
fn __action132<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Id_, usize),
) -> core::option::Option<Id_>
{
    Some(__0)
}

#[allow(unused_variables)]
fn __action133<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> core::option::Option<Id_>
{
    None
}

#[allow(unused_variables)]
fn __action134<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Id_, usize),
) -> Id_
{
    __0
}

#[allow(unused_variables)]
fn __action135<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, start, _): (usize, usize, usize),
    (_, t, _): (usize, Dec, usize),
    (_, end, _): (usize, usize, usize),
) -> Node<Dec>
{
    {
        let (line, col) = lookup.get(start);
        node(t, Source::Known { span: start..end, line, col })
    }
}

#[allow(unused_variables)]
fn __action136<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Exp, usize),
) -> Exp
{
    __0
}

#[allow(unused_variables)]
fn __action137<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, e1, _): (usize, Exp_, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, e2, _): (usize, Exp_, usize),
) -> Exp
{
    Exp::Assign(e1, e2)
}

#[allow(unused_variables)]
fn __action138<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, e1, _): (usize, Exp_, usize),
    (_, e2, _): (usize, Exp_, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, e3, _): (usize, Exp_, usize),
) -> Exp
{
    Exp::If(e1, e2, Some(e3))
}

#[allow(unused_variables)]
fn __action139<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, e1, _): (usize, Exp_, usize),
    (_, e2, _): (usize, Exp_, usize),
    (_, _, _): (usize, &'input str, usize),
) -> Exp
{
    Exp::If(e1, e2, None)
}

#[allow(unused_variables)]
fn __action140<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, e, _): (usize, core::option::Option<Exp_>, usize),
) -> Exp
{
    Exp::Return(e)
}

#[allow(unused_variables)]
fn __action141<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, e, _): (usize, Exp_, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, cs, _): (usize, Cases, usize),
    (_, _, _): (usize, &'input str, usize),
) -> Exp
{
    Exp::Switch(e, cs)
}

#[allow(unused_variables)]
fn __action142<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, e1, _): (usize, Exp_, usize),
    (_, e2, _): (usize, Exp_, usize),
) -> Exp
{
    Exp::While(e1, e2)
}

#[allow(unused_variables)]
fn __action143<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, p, _): (usize, Pat_, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, e1, _): (usize, Exp_, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, e2, _): (usize, Exp_, usize),
) -> Exp
{
    Exp::For(p, e1, e2)
}

#[allow(unused_variables)]
fn __action144<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, e, _): (usize, Exp_, usize),
) -> Exp
{
    Exp::Ignore(e)
}

#[allow(unused_variables)]
fn __action145<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, e, _): (usize, Exp_, usize),
) -> Exp
{
    Exp::Do(e)
}

#[allow(unused_variables)]
fn __action146<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, e, _): (usize, Exp_, usize),
) -> Exp
{
    Exp::DoOpt(e)
}

#[allow(unused_variables)]
fn __action147<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, e, _): (usize, Exp_, usize),
) -> Exp
{
    Exp::Assert(e)
}

#[allow(unused_variables)]
fn __action148<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, e, _): (usize, Exp_, usize),
) -> Exp
{
    Exp::Debug(e)
}

#[allow(unused_variables)]
fn __action149<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, start, _): (usize, usize, usize),
    (_, t, _): (usize, Dec, usize),
    (_, end, _): (usize, usize, usize),
) -> Node<Dec>
{
    {
        let (line, col) = lookup.get(start);
        node(t, Source::Known { span: start..end, line, col })
    }
}

#[allow(unused_variables)]
fn __action150<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, mut v, _): (usize, alloc::vec::Vec<Dec_>, usize),
    (_, e, _): (usize, core::option::Option<Dec_>, usize),
) -> Delim<Dec_>
{
    match e {
        None => {
            let has_trailing = v.len() > 0;
            Delim{ vec:v, has_trailing }
        },
        Some(e) => {
            v.push(e);
            Delim{ vec:v, has_trailing: false }
        }
    }
}

#[allow(unused_variables)]
fn __action151<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Type_, usize),
) -> core::option::Option<Type_>
{
    Some(__0)
}

#[allow(unused_variables)]
fn __action152<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> core::option::Option<Type_>
{
    None
}

#[allow(unused_variables)]
fn __action153<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, __0, _): (usize, Type_, usize),
) -> Type_
{
    __0
}

#[allow(unused_variables)]
fn __action154<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, start, _): (usize, usize, usize),
    (_, t, _): (usize, ExpField, usize),
    (_, end, _): (usize, usize, usize),
) -> Node<ExpField>
{
    {
        let (line, col) = lookup.get(start);
        node(t, Source::Known { span: start..end, line, col })
    }
}

#[allow(unused_variables)]
fn __action155<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, mut v, _): (usize, alloc::vec::Vec<Node<Case>>, usize),
    (_, e, _): (usize, core::option::Option<Node<Case>>, usize),
) -> Delim<Node<Case>>
{
    match e {
        None => {
            let has_trailing = v.len() > 0;
            Delim{ vec:v, has_trailing }
        },
        Some(e) => {
            v.push(e);
            Delim{ vec:v, has_trailing: false }
        }
    }
}

#[allow(unused_variables)]
fn __action156<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, start, _): (usize, usize, usize),
    (_, t, _): (usize, Case, usize),
    (_, end, _): (usize, usize, usize),
) -> Node<Case>
{
    {
        let (line, col) = lookup.get(start);
        node(t, Source::Known { span: start..end, line, col })
    }
}

#[allow(unused_variables)]
fn __action157<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, mut v, _): (usize, alloc::vec::Vec<Node<ExpField>>, usize),
    (_, e, _): (usize, core::option::Option<Node<ExpField>>, usize),
) -> Delim<Node<ExpField>>
{
    match e {
        None => {
            let has_trailing = v.len() > 0;
            Delim{ vec:v, has_trailing }
        },
        Some(e) => {
            v.push(e);
            Delim{ vec:v, has_trailing: false }
        }
    }
}

#[allow(unused_variables)]
fn __action158<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, start, _): (usize, usize, usize),
    (_, t, _): (usize, Exp, usize),
    (_, end, _): (usize, usize, usize),
) -> Node<Exp>
{
    {
        let (line, col) = lookup.get(start);
        node(t, Source::Known { span: start..end, line, col })
    }
}

#[allow(unused_variables)]
fn __action159<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Exp, usize),
) -> Exp
{
    __0
}

#[allow(unused_variables)]
fn __action160<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Dec_, usize),
) -> Exp
{
    dec_node_into_exp(__0)
}

#[allow(unused_variables)]
fn __action161<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, start, _): (usize, usize, usize),
    (_, t, _): (usize, Exp, usize),
    (_, end, _): (usize, usize, usize),
) -> Node<Exp>
{
    {
        let (line, col) = lookup.get(start);
        node(t, Source::Known { span: start..end, line, col })
    }
}

#[allow(unused_variables)]
fn __action162<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Exp_, usize),
) -> Delim<Exp_>
{
    {
        Delim{ vec:vec!(__0), has_trailing: false }
    }
}

#[allow(unused_variables)]
fn __action163<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, mut v, _): (usize, alloc::vec::Vec<Exp_>, usize),
    (_, e, _): (usize, core::option::Option<Exp_>, usize),
) -> Delim<Exp_>
{
    match e {
        None => {
            Delim{ vec:v, has_trailing: true }
        },
        Some(e) => {
            v.push(e);
            Delim{ vec:v, has_trailing: false }
        }
    }
}

#[allow(unused_variables)]
fn __action164<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Node<Exp>, usize),
) -> Exp_
{
    __0
}

#[allow(unused_variables)]
fn __action165<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, start, _): (usize, usize, usize),
    (_, t, _): (usize, Exp, usize),
    (_, end, _): (usize, usize, usize),
) -> Node<Exp>
{
    {
        let (line, col) = lookup.get(start);
        node(t, Source::Known { span: start..end, line, col })
    }
}

#[allow(unused_variables)]
fn __action166<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, start, _): (usize, usize, usize),
    (_, t, _): (usize, Type, usize),
    (_, end, _): (usize, usize, usize),
) -> Node<Type>
{
    {
        let (line, col) = lookup.get(start);
        node(t, Source::Known { span: start..end, line, col })
    }
}

#[allow(unused_variables)]
fn __action167<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, start, _): (usize, usize, usize),
    (_, t, _): (usize, Pat, usize),
    (_, end, _): (usize, usize, usize),
) -> Node<Pat>
{
    {
        let (line, col) = lookup.get(start);
        node(t, Source::Known { span: start..end, line, col })
    }
}

#[allow(unused_variables)]
fn __action168<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, start, _): (usize, usize, usize),
    (_, t, _): (usize, Pat, usize),
    (_, end, _): (usize, usize, usize),
) -> Node<Pat>
{
    {
        let (line, col) = lookup.get(start);
        node(t, Source::Known { span: start..end, line, col })
    }
}

#[allow(unused_variables)]
fn __action169<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, start, _): (usize, usize, usize),
    (_, t, _): (usize, Pat, usize),
    (_, end, _): (usize, usize, usize),
) -> Node<Pat>
{
    {
        let (line, col) = lookup.get(start);
        node(t, Source::Known { span: start..end, line, col })
    }
}

#[allow(unused_variables)]
fn __action170<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Pat_, usize),
) -> Delim<Pat_>
{
    {
        Delim{ vec:vec!(__0), has_trailing: false }
    }
}

#[allow(unused_variables)]
fn __action171<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, mut v, _): (usize, alloc::vec::Vec<Pat_>, usize),
    (_, e, _): (usize, core::option::Option<Pat_>, usize),
) -> Delim<Pat_>
{
    match e {
        None => {
            Delim{ vec:v, has_trailing: true }
        },
        Some(e) => {
            v.push(e);
            Delim{ vec:v, has_trailing: false }
        }
    }
}

#[allow(unused_variables)]
fn __action172<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, start, _): (usize, usize, usize),
    (_, t, _): (usize, Pat, usize),
    (_, end, _): (usize, usize, usize),
) -> Node<Pat>
{
    {
        let (line, col) = lookup.get(start);
        node(t, Source::Known { span: start..end, line, col })
    }
}

#[allow(unused_variables)]
fn __action173<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, start, _): (usize, usize, usize),
    (_, t, _): (usize, Id, usize),
    (_, end, _): (usize, usize, usize),
) -> Node<Id>
{
    {
        let (line, col) = lookup.get(start);
        node(t, Source::Known { span: start..end, line, col })
    }
}

#[allow(unused_variables)]
fn __action174<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Pat_, usize),
) -> core::option::Option<Pat_>
{
    Some(__0)
}

#[allow(unused_variables)]
fn __action175<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> core::option::Option<Pat_>
{
    None
}

#[allow(unused_variables)]
fn __action176<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Pat_, usize),
) -> alloc::vec::Vec<Pat_>
{
    alloc::vec![__0]
}

#[allow(unused_variables)]
fn __action177<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, v, _): (usize, alloc::vec::Vec<Pat_>, usize),
    (_, e, _): (usize, Pat_, usize),
) -> alloc::vec::Vec<Pat_>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
fn __action178<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Pat_, usize),
    (_, _, _): (usize, &'input str, usize),
) -> Pat_
{
    __0
}

#[allow(unused_variables)]
fn __action179<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, start, _): (usize, usize, usize),
    (_, t, _): (usize, Exp, usize),
    (_, end, _): (usize, usize, usize),
) -> Node<Exp>
{
    {
        let (line, col) = lookup.get(start);
        node(t, Source::Known { span: start..end, line, col })
    }
}

#[allow(unused_variables)]
fn __action180<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Exp, usize),
) -> Exp
{
    __0
}

#[allow(unused_variables)]
fn __action181<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Dec_, usize),
) -> Exp
{
    dec_node_into_exp(__0)
}

#[allow(unused_variables)]
fn __action182<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Exp_, usize),
) -> alloc::vec::Vec<Exp_>
{
    alloc::vec![__0]
}

#[allow(unused_variables)]
fn __action183<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, v, _): (usize, alloc::vec::Vec<Exp_>, usize),
    (_, e, _): (usize, Exp_, usize),
) -> alloc::vec::Vec<Exp_>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
fn __action184<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Exp_, usize),
    (_, _, _): (usize, &'input str, usize),
) -> Exp_
{
    __0
}

#[allow(unused_variables)]
fn __action185<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Exp, usize),
) -> Exp
{
    __0
}

#[allow(unused_variables)]
fn __action186<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Dec_, usize),
) -> Exp
{
    dec_node_into_exp(__0)
}

#[allow(unused_variables)]
fn __action187<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Node<ExpField>, usize),
) -> core::option::Option<Node<ExpField>>
{
    Some(__0)
}

#[allow(unused_variables)]
fn __action188<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> core::option::Option<Node<ExpField>>
{
    None
}

#[allow(unused_variables)]
fn __action189<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> alloc::vec::Vec<Node<ExpField>>
{
    alloc::vec![]
}

#[allow(unused_variables)]
fn __action190<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, v, _): (usize, alloc::vec::Vec<Node<ExpField>>, usize),
) -> alloc::vec::Vec<Node<ExpField>>
{
    v
}

#[allow(unused_variables)]
fn __action191<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Node<ExpField>, usize),
    (_, _, _): (usize, &'input str, usize),
) -> Node<ExpField>
{
    __0
}

#[allow(unused_variables)]
fn __action192<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Node<Case>, usize),
) -> core::option::Option<Node<Case>>
{
    Some(__0)
}

#[allow(unused_variables)]
fn __action193<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> core::option::Option<Node<Case>>
{
    None
}

#[allow(unused_variables)]
fn __action194<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> alloc::vec::Vec<Node<Case>>
{
    alloc::vec![]
}

#[allow(unused_variables)]
fn __action195<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, v, _): (usize, alloc::vec::Vec<Node<Case>>, usize),
) -> alloc::vec::Vec<Node<Case>>
{
    v
}

#[allow(unused_variables)]
fn __action196<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Node<Case>, usize),
    (_, _, _): (usize, &'input str, usize),
) -> Node<Case>
{
    __0
}

#[allow(unused_variables)]
fn __action197<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Dec_, usize),
) -> core::option::Option<Dec_>
{
    Some(__0)
}

#[allow(unused_variables)]
fn __action198<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> core::option::Option<Dec_>
{
    None
}

#[allow(unused_variables)]
fn __action199<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> alloc::vec::Vec<Dec_>
{
    alloc::vec![]
}

#[allow(unused_variables)]
fn __action200<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, v, _): (usize, alloc::vec::Vec<Dec_>, usize),
) -> alloc::vec::Vec<Dec_>
{
    v
}

#[allow(unused_variables)]
fn __action201<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Dec_, usize),
    (_, _, _): (usize, &'input str, usize),
) -> Dec_
{
    __0
}

#[allow(unused_variables)]
fn __action202<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Exp_, usize),
) -> core::option::Option<Exp_>
{
    Some(__0)
}

#[allow(unused_variables)]
fn __action203<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> core::option::Option<Exp_>
{
    None
}

#[allow(unused_variables)]
fn __action204<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Node<Exp>, usize),
) -> Exp_
{
    __0
}

#[allow(unused_variables)]
fn __action205<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Node<Exp>, usize),
) -> Exp_
{
    __0
}

#[allow(unused_variables)]
fn __action206<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, e1, _): (usize, Exp_, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, e2, _): (usize, Exp_, usize),
) -> Exp
{
    Exp::Rel(e1, RelOp::Eq, e2)
}

#[allow(unused_variables)]
fn __action207<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, e1, _): (usize, Exp_, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, e2, _): (usize, Exp_, usize),
) -> Exp
{
    Exp::Rel(e1, RelOp::Neq, e2)
}

#[allow(unused_variables)]
fn __action208<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Exp, usize),
) -> Exp
{
    __0
}

#[allow(unused_variables)]
fn __action209<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, DecField_, usize),
) -> core::option::Option<DecField_>
{
    Some(__0)
}

#[allow(unused_variables)]
fn __action210<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> core::option::Option<DecField_>
{
    None
}

#[allow(unused_variables)]
fn __action211<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> alloc::vec::Vec<DecField_>
{
    alloc::vec![]
}

#[allow(unused_variables)]
fn __action212<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, v, _): (usize, alloc::vec::Vec<DecField_>, usize),
) -> alloc::vec::Vec<DecField_>
{
    v
}

#[allow(unused_variables)]
fn __action213<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, DecField_, usize),
    (_, _, _): (usize, &'input str, usize),
) -> DecField_
{
    __0
}

#[allow(unused_variables)]
fn __action214<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> usize
{
    __lookbehind.clone()
}

#[allow(unused_variables)]
fn __action215<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> usize
{
    __lookahead.clone()
}

#[allow(unused_variables)]
fn __action216<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, DecField_, usize),
) -> alloc::vec::Vec<DecField_>
{
    alloc::vec![__0]
}

#[allow(unused_variables)]
fn __action217<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, v, _): (usize, alloc::vec::Vec<DecField_>, usize),
    (_, e, _): (usize, DecField_, usize),
) -> alloc::vec::Vec<DecField_>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
fn __action218<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, e1, _): (usize, Exp_, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, e2, _): (usize, Exp_, usize),
) -> Exp
{
    Exp::Or(e1, e2)
}

#[allow(unused_variables)]
fn __action219<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Exp, usize),
) -> Exp
{
    __0
}

#[allow(unused_variables)]
fn __action220<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Node<Exp>, usize),
) -> Exp_
{
    __0
}

#[allow(unused_variables)]
fn __action221<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, start, _): (usize, usize, usize),
    (_, t, _): (usize, Exp, usize),
    (_, end, _): (usize, usize, usize),
) -> Node<Exp>
{
    {
        let (line, col) = lookup.get(start);
        node(t, Source::Known { span: start..end, line, col })
    }
}

#[allow(unused_variables)]
fn __action222<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, start, _): (usize, usize, usize),
    (_, t, _): (usize, Exp, usize),
    (_, end, _): (usize, usize, usize),
) -> Node<Exp>
{
    {
        let (line, col) = lookup.get(start);
        node(t, Source::Known { span: start..end, line, col })
    }
}

#[allow(unused_variables)]
fn __action223<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Exp, usize),
) -> Exp
{
    __0
}

#[allow(unused_variables)]
fn __action224<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Exp, usize),
) -> Exp
{
    __0
}

#[allow(unused_variables)]
fn __action225<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Id, usize),
) -> Exp
{
    Exp::Var(__0)
}

#[allow(unused_variables)]
fn __action226<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, sl, _): (usize, String, usize),
) -> Exp
{
    Exp::Prim(sl)
}

#[allow(unused_variables)]
fn __action227<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Dec_, usize),
) -> alloc::vec::Vec<Dec_>
{
    alloc::vec![__0]
}

#[allow(unused_variables)]
fn __action228<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, v, _): (usize, alloc::vec::Vec<Dec_>, usize),
    (_, e, _): (usize, Dec_, usize),
) -> alloc::vec::Vec<Dec_>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
fn __action229<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Node<Case>, usize),
) -> alloc::vec::Vec<Node<Case>>
{
    alloc::vec![__0]
}

#[allow(unused_variables)]
fn __action230<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, v, _): (usize, alloc::vec::Vec<Node<Case>>, usize),
    (_, e, _): (usize, Node<Case>, usize),
) -> alloc::vec::Vec<Node<Case>>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
fn __action231<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Node<ExpField>, usize),
) -> alloc::vec::Vec<Node<ExpField>>
{
    alloc::vec![__0]
}

#[allow(unused_variables)]
fn __action232<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, v, _): (usize, alloc::vec::Vec<Node<ExpField>>, usize),
    (_, e, _): (usize, Node<ExpField>, usize),
) -> alloc::vec::Vec<Node<ExpField>>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
fn __action233<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Exp, usize),
) -> Exp
{
    __0
}

#[allow(unused_variables)]
fn __action234<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, e1, _): (usize, Exp_, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, e2, _): (usize, Exp_, usize),
) -> Exp
{
    Exp::Assign(e1, e2)
}

#[allow(unused_variables)]
fn __action235<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, e1, _): (usize, Exp_, usize),
    (_, e2, _): (usize, Exp_, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, e3, _): (usize, Exp_, usize),
) -> Exp
{
    Exp::If(e1, e2, Some(e3))
}

#[allow(unused_variables)]
fn __action236<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, e1, _): (usize, Exp_, usize),
    (_, e2, _): (usize, Exp_, usize),
    (_, _, _): (usize, &'input str, usize),
) -> Exp
{
    Exp::If(e1, e2, None)
}

#[allow(unused_variables)]
fn __action237<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, e, _): (usize, core::option::Option<Exp_>, usize),
) -> Exp
{
    Exp::Return(e)
}

#[allow(unused_variables)]
fn __action238<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, e, _): (usize, Exp_, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, cs, _): (usize, Cases, usize),
    (_, _, _): (usize, &'input str, usize),
) -> Exp
{
    Exp::Switch(e, cs)
}

#[allow(unused_variables)]
fn __action239<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, e1, _): (usize, Exp_, usize),
    (_, e2, _): (usize, Exp_, usize),
) -> Exp
{
    Exp::While(e1, e2)
}

#[allow(unused_variables)]
fn __action240<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, p, _): (usize, Pat_, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, e1, _): (usize, Exp_, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, e2, _): (usize, Exp_, usize),
) -> Exp
{
    Exp::For(p, e1, e2)
}

#[allow(unused_variables)]
fn __action241<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, e, _): (usize, Exp_, usize),
) -> Exp
{
    Exp::Ignore(e)
}

#[allow(unused_variables)]
fn __action242<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, e, _): (usize, Exp_, usize),
) -> Exp
{
    Exp::Do(e)
}

#[allow(unused_variables)]
fn __action243<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, e, _): (usize, Exp_, usize),
) -> Exp
{
    Exp::DoOpt(e)
}

#[allow(unused_variables)]
fn __action244<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, e, _): (usize, Exp_, usize),
) -> Exp
{
    Exp::Assert(e)
}

#[allow(unused_variables)]
fn __action245<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, e, _): (usize, Exp_, usize),
) -> Exp
{
    Exp::Debug(e)
}

#[allow(unused_variables)]
fn __action246<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Exp, usize),
) -> Exp
{
    __0
}

#[allow(unused_variables)]
fn __action247<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Dec_, usize),
) -> Exp
{
    dec_node_into_exp(__0)
}

#[allow(unused_variables)]
fn __action248<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Exp_, usize),
) -> core::option::Option<Exp_>
{
    Some(__0)
}

#[allow(unused_variables)]
fn __action249<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> core::option::Option<Exp_>
{
    None
}

#[allow(unused_variables)]
fn __action250<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Node<Exp>, usize),
) -> Exp_
{
    __0
}

#[allow(unused_variables)]
fn __action251<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Node<Exp>, usize),
) -> Exp_
{
    __0
}

#[allow(unused_variables)]
fn __action252<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, e1, _): (usize, Exp_, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, e2, _): (usize, Exp_, usize),
) -> Exp
{
    Exp::Rel(e1, RelOp::Eq, e2)
}

#[allow(unused_variables)]
fn __action253<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, e1, _): (usize, Exp_, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, e2, _): (usize, Exp_, usize),
) -> Exp
{
    Exp::Rel(e1, RelOp::Neq, e2)
}

#[allow(unused_variables)]
fn __action254<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Exp, usize),
) -> Exp
{
    __0
}

#[allow(unused_variables)]
fn __action255<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, start, _): (usize, usize, usize),
    (_, t, _): (usize, Exp, usize),
    (_, end, _): (usize, usize, usize),
) -> Node<Exp>
{
    {
        let (line, col) = lookup.get(start);
        node(t, Source::Known { span: start..end, line, col })
    }
}

#[allow(unused_variables)]
fn __action256<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, e1, _): (usize, Exp_, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, e2, _): (usize, Exp_, usize),
) -> Exp
{
    Exp::Bin(e1, BinOp::Add, e2)
}

#[allow(unused_variables)]
fn __action257<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, e1, _): (usize, Exp_, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, e2, _): (usize, Exp_, usize),
) -> Exp
{
    Exp::Bin(e1, BinOp::WAdd, e2)
}

#[allow(unused_variables)]
fn __action258<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, e1, _): (usize, Exp_, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, e2, _): (usize, Exp_, usize),
) -> Exp
{
    Exp::Bin(e1, BinOp::Sub, e2)
}

#[allow(unused_variables)]
fn __action259<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, e, _): (usize, Exp_, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, t, _): (usize, Type_, usize),
) -> Exp
{
    Exp::Annot(e, t)
}

#[allow(unused_variables)]
fn __action260<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Exp, usize),
) -> Exp
{
    __0
}

#[allow(unused_variables)]
fn __action261<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, e1, _): (usize, Exp_, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, e2, _): (usize, Exp_, usize),
) -> Exp
{
    Exp::And(e1, e2)
}

#[allow(unused_variables)]
fn __action262<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Exp, usize),
) -> Exp
{
    __0
}

#[allow(unused_variables)]
fn __action263<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Node<Exp>, usize),
) -> Exp_
{
    __0
}

#[allow(unused_variables)]
fn __action264<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Node<Exp>, usize),
) -> Exp_
{
    __0
}

#[allow(unused_variables)]
fn __action265<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, start, _): (usize, usize, usize),
    (_, t, _): (usize, Exp, usize),
    (_, end, _): (usize, usize, usize),
) -> Node<Exp>
{
    {
        let (line, col) = lookup.get(start);
        node(t, Source::Known { span: start..end, line, col })
    }
}

#[allow(unused_variables)]
fn __action266<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, start, _): (usize, usize, usize),
    (_, t, _): (usize, Exp, usize),
    (_, end, _): (usize, usize, usize),
) -> Node<Exp>
{
    {
        let (line, col) = lookup.get(start);
        node(t, Source::Known { span: start..end, line, col })
    }
}

#[allow(unused_variables)]
fn __action267<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, e1, _): (usize, Exp_, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, e2, _): (usize, Exp_, usize),
) -> Exp
{
    Exp::Bin(e1, BinOp::Mul, e2)
}

#[allow(unused_variables)]
fn __action268<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, e1, _): (usize, Exp_, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, e2, _): (usize, Exp_, usize),
) -> Exp
{
    Exp::Bin(e1, BinOp::Div, e2)
}

#[allow(unused_variables)]
fn __action269<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Exp, usize),
) -> Exp
{
    __0
}

#[allow(unused_variables)]
fn __action270<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Node<Exp>, usize),
) -> Exp_
{
    __0
}

#[allow(unused_variables)]
fn __action271<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, e1, _): (usize, Exp_, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, e2, _): (usize, Exp_, usize),
) -> Exp
{
    Exp::Or(e1, e2)
}

#[allow(unused_variables)]
fn __action272<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Exp, usize),
) -> Exp
{
    __0
}

#[allow(unused_variables)]
fn __action273<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Node<Exp>, usize),
) -> Exp_
{
    __0
}

#[allow(unused_variables)]
fn __action274<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, start, _): (usize, usize, usize),
    (_, t, _): (usize, Exp, usize),
    (_, end, _): (usize, usize, usize),
) -> Node<Exp>
{
    {
        let (line, col) = lookup.get(start);
        node(t, Source::Known { span: start..end, line, col })
    }
}

#[allow(unused_variables)]
fn __action275<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, start, _): (usize, usize, usize),
    (_, t, _): (usize, Exp, usize),
    (_, end, _): (usize, usize, usize),
) -> Node<Exp>
{
    {
        let (line, col) = lookup.get(start);
        node(t, Source::Known { span: start..end, line, col })
    }
}

#[allow(unused_variables)]
fn __action276<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, start, _): (usize, usize, usize),
    (_, t, _): (usize, Exp, usize),
    (_, end, _): (usize, usize, usize),
) -> Node<Exp>
{
    {
        let (line, col) = lookup.get(start);
        node(t, Source::Known { span: start..end, line, col })
    }
}

#[allow(unused_variables)]
fn __action277<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, e1, _): (usize, Exp_, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, e2, _): (usize, Exp_, usize),
) -> Exp
{
    Exp::Bin(e1, BinOp::Add, e2)
}

#[allow(unused_variables)]
fn __action278<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, e1, _): (usize, Exp_, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, e2, _): (usize, Exp_, usize),
) -> Exp
{
    Exp::Bin(e1, BinOp::WAdd, e2)
}

#[allow(unused_variables)]
fn __action279<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, e1, _): (usize, Exp_, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, e2, _): (usize, Exp_, usize),
) -> Exp
{
    Exp::Bin(e1, BinOp::Sub, e2)
}

#[allow(unused_variables)]
fn __action280<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, e, _): (usize, Exp_, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, t, _): (usize, Type_, usize),
) -> Exp
{
    Exp::Annot(e, t)
}

#[allow(unused_variables)]
fn __action281<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Exp, usize),
) -> Exp
{
    __0
}

#[allow(unused_variables)]
fn __action282<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, e1, _): (usize, Exp_, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, e2, _): (usize, Exp_, usize),
) -> Exp
{
    Exp::And(e1, e2)
}

#[allow(unused_variables)]
fn __action283<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Exp, usize),
) -> Exp
{
    __0
}

#[allow(unused_variables)]
fn __action284<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Node<Exp>, usize),
) -> Exp_
{
    __0
}

#[allow(unused_variables)]
fn __action285<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Node<Exp>, usize),
) -> Exp_
{
    __0
}

#[allow(unused_variables)]
fn __action286<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, start, _): (usize, usize, usize),
    (_, t, _): (usize, Exp, usize),
    (_, end, _): (usize, usize, usize),
) -> Node<Exp>
{
    {
        let (line, col) = lookup.get(start);
        node(t, Source::Known { span: start..end, line, col })
    }
}

#[allow(unused_variables)]
fn __action287<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, e1, _): (usize, Exp_, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, e2, _): (usize, Exp_, usize),
) -> Exp
{
    Exp::Bin(e1, BinOp::BitOr, e2)
}

#[allow(unused_variables)]
fn __action288<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Exp, usize),
) -> Exp
{
    __0
}

#[allow(unused_variables)]
fn __action289<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Node<Exp>, usize),
) -> Exp_
{
    __0
}

#[allow(unused_variables)]
fn __action290<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, start, _): (usize, usize, usize),
    (_, t, _): (usize, Exp, usize),
    (_, end, _): (usize, usize, usize),
) -> Node<Exp>
{
    {
        let (line, col) = lookup.get(start);
        node(t, Source::Known { span: start..end, line, col })
    }
}

#[allow(unused_variables)]
fn __action291<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, e1, _): (usize, Exp_, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, e2, _): (usize, Exp_, usize),
) -> Exp
{
    Exp::Bin(e1, BinOp::BitAnd, e2)
}

#[allow(unused_variables)]
fn __action292<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Exp, usize),
) -> Exp
{
    __0
}

#[allow(unused_variables)]
fn __action293<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Node<Exp>, usize),
) -> Exp_
{
    __0
}

#[allow(unused_variables)]
fn __action294<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, start, _): (usize, usize, usize),
    (_, t, _): (usize, Exp, usize),
    (_, end, _): (usize, usize, usize),
) -> Node<Exp>
{
    {
        let (line, col) = lookup.get(start);
        node(t, Source::Known { span: start..end, line, col })
    }
}

#[allow(unused_variables)]
fn __action295<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, start, _): (usize, usize, usize),
    (_, t, _): (usize, Exp, usize),
    (_, end, _): (usize, usize, usize),
) -> Node<Exp>
{
    {
        let (line, col) = lookup.get(start);
        node(t, Source::Known { span: start..end, line, col })
    }
}

#[allow(unused_variables)]
fn __action296<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, e1, _): (usize, Exp_, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, e2, _): (usize, Exp_, usize),
) -> Exp
{
    Exp::Bin(e1, BinOp::Mul, e2)
}

#[allow(unused_variables)]
fn __action297<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, e1, _): (usize, Exp_, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, e2, _): (usize, Exp_, usize),
) -> Exp
{
    Exp::Bin(e1, BinOp::Div, e2)
}

#[allow(unused_variables)]
fn __action298<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Exp, usize),
) -> Exp
{
    __0
}

#[allow(unused_variables)]
fn __action299<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Node<Exp>, usize),
) -> Exp_
{
    __0
}

#[allow(unused_variables)]
fn __action300<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, start, _): (usize, usize, usize),
    (_, t, _): (usize, Exp, usize),
    (_, end, _): (usize, usize, usize),
) -> Node<Exp>
{
    {
        let (line, col) = lookup.get(start);
        node(t, Source::Known { span: start..end, line, col })
    }
}

#[allow(unused_variables)]
fn __action301<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, e1, _): (usize, Exp_, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, e2, _): (usize, Exp_, usize),
) -> Exp
{
    Exp::Bin(e1, BinOp::BitOr, e2)
}

#[allow(unused_variables)]
fn __action302<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Exp, usize),
) -> Exp
{
    __0
}

#[allow(unused_variables)]
fn __action303<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Node<Exp>, usize),
) -> Exp_
{
    __0
}

#[allow(unused_variables)]
fn __action304<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, start, _): (usize, usize, usize),
    (_, t, _): (usize, Exp, usize),
    (_, end, _): (usize, usize, usize),
) -> Node<Exp>
{
    {
        let (line, col) = lookup.get(start);
        node(t, Source::Known { span: start..end, line, col })
    }
}

#[allow(unused_variables)]
fn __action305<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Exp, usize),
) -> Exp
{
    __0
}

#[allow(unused_variables)]
fn __action306<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, x, _): (usize, Id_, usize),
    (_, e, _): (usize, core::option::Option<Exp_>, usize),
) -> Exp
{
    Exp::Variant(x, e)
}

#[allow(unused_variables)]
fn __action307<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, e, _): (usize, Exp_, usize),
) -> Exp
{
    Exp::Opt(e)
}

#[allow(unused_variables)]
fn __action308<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, u, _): (usize, UnOp, usize),
    (_, e, _): (usize, Exp_, usize),
) -> Exp
{
    Exp::Un(u, e)
}

#[allow(unused_variables)]
fn __action309<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, e, _): (usize, Exp_, usize),
) -> Exp
{
    Exp::Not(e)
}

#[allow(unused_variables)]
fn __action310<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Node<Exp>, usize),
) -> Exp_
{
    __0
}

#[allow(unused_variables)]
fn __action311<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, start, _): (usize, usize, usize),
    (_, t, _): (usize, Exp, usize),
    (_, end, _): (usize, usize, usize),
) -> Node<Exp>
{
    {
        let (line, col) = lookup.get(start);
        node(t, Source::Known { span: start..end, line, col })
    }
}

#[allow(unused_variables)]
fn __action312<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Exp_, usize),
) -> core::option::Option<Exp_>
{
    Some(__0)
}

#[allow(unused_variables)]
fn __action313<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> core::option::Option<Exp_>
{
    None
}

#[allow(unused_variables)]
fn __action314<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Exp_, usize),
) -> Exp_
{
    __0
}

#[allow(unused_variables)]
fn __action315<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Exp, usize),
) -> Exp
{
    __0
}

#[allow(unused_variables)]
fn __action316<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, v, _): (usize, Mut, usize),
    (_, es, _): (usize, Delim<Exp_>, usize),
    (_, _, _): (usize, &'input str, usize),
) -> Exp
{
    Exp::Array(v, es)
}

#[allow(unused_variables)]
fn __action317<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, e1, _): (usize, Exp_, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, e2, _): (usize, Exp_, usize),
    (_, _, _): (usize, &'input str, usize),
) -> Exp
{
    Exp::Idx(e1, e2)
}

#[allow(unused_variables)]
fn __action318<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, e1, _): (usize, Exp_, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, i, _): (usize, usize, usize),
) -> Exp
{
    Exp::Proj(e1, i)
}

#[allow(unused_variables)]
fn __action319<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, e1, _): (usize, Exp_, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, i, _): (usize, Id_, usize),
) -> Exp
{
    Exp::Dot(e1, i)
}

#[allow(unused_variables)]
fn __action320<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, e1, _): (usize, Exp_, usize),
    (_, e2, _): (usize, Exp_, usize),
) -> Exp
{
    Exp::Call(e1, None, e2)
}

#[allow(unused_variables)]
fn __action321<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, e, _): (usize, Exp_, usize),
    (_, _, _): (usize, &'input str, usize),
) -> Exp
{
    Exp::Bang(e)
}

#[allow(unused_variables)]
fn __action322<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, start, _): (usize, usize, usize),
    (_, t, _): (usize, Exp, usize),
    (_, end, _): (usize, usize, usize),
) -> Node<Exp>
{
    {
        let (line, col) = lookup.get(start);
        node(t, Source::Known { span: start..end, line, col })
    }
}

#[allow(unused_variables)]
fn __action323<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, e1, _): (usize, Exp_, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, e2, _): (usize, Exp_, usize),
) -> Exp
{
    Exp::Bin(e1, BinOp::BitAnd, e2)
}

#[allow(unused_variables)]
fn __action324<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Exp, usize),
) -> Exp
{
    __0
}

#[allow(unused_variables)]
fn __action325<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Node<Exp>, usize),
) -> Exp_
{
    __0
}

#[allow(unused_variables)]
fn __action326<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, start, _): (usize, usize, usize),
    (_, t, _): (usize, Exp, usize),
    (_, end, _): (usize, usize, usize),
) -> Node<Exp>
{
    {
        let (line, col) = lookup.get(start);
        node(t, Source::Known { span: start..end, line, col })
    }
}

#[allow(unused_variables)]
fn __action327<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Exp, usize),
) -> Exp
{
    __0
}

#[allow(unused_variables)]
fn __action328<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, x, _): (usize, Id_, usize),
    (_, e, _): (usize, core::option::Option<Exp_>, usize),
) -> Exp
{
    Exp::Variant(x, e)
}

#[allow(unused_variables)]
fn __action329<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, e, _): (usize, Exp_, usize),
) -> Exp
{
    Exp::Opt(e)
}

#[allow(unused_variables)]
fn __action330<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, u, _): (usize, UnOp, usize),
    (_, e, _): (usize, Exp_, usize),
) -> Exp
{
    Exp::Un(u, e)
}

#[allow(unused_variables)]
fn __action331<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, e, _): (usize, Exp_, usize),
) -> Exp
{
    Exp::Not(e)
}

#[allow(unused_variables)]
fn __action332<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Node<Exp>, usize),
) -> Exp_
{
    __0
}

#[allow(unused_variables)]
fn __action333<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Node<Exp>, usize),
) -> Exp_
{
    __0
}

#[allow(unused_variables)]
fn __action334<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, mut v, _): (usize, alloc::vec::Vec<Exp_>, usize),
    (_, e, _): (usize, core::option::Option<Exp_>, usize),
) -> Delim<Exp_>
{
    match e {
        None => {
            let has_trailing = v.len() > 0;
            Delim{ vec:v, has_trailing }
        },
        Some(e) => {
            v.push(e);
            Delim{ vec:v, has_trailing: false }
        }
    }
}

#[allow(unused_variables)]
fn __action335<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Node<Exp>, usize),
) -> Exp_
{
    __0
}

#[allow(unused_variables)]
fn __action336<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, start, _): (usize, usize, usize),
    (_, t, _): (usize, Exp, usize),
    (_, end, _): (usize, usize, usize),
) -> Node<Exp>
{
    {
        let (line, col) = lookup.get(start);
        node(t, Source::Known { span: start..end, line, col })
    }
}

#[allow(unused_variables)]
fn __action337<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Exp_, usize),
) -> core::option::Option<Exp_>
{
    Some(__0)
}

#[allow(unused_variables)]
fn __action338<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> core::option::Option<Exp_>
{
    None
}

#[allow(unused_variables)]
fn __action339<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> alloc::vec::Vec<Exp_>
{
    alloc::vec![]
}

#[allow(unused_variables)]
fn __action340<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, v, _): (usize, alloc::vec::Vec<Exp_>, usize),
) -> alloc::vec::Vec<Exp_>
{
    v
}

#[allow(unused_variables)]
fn __action341<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Exp_, usize),
    (_, _, _): (usize, &'input str, usize),
) -> Exp_
{
    __0
}

#[allow(unused_variables)]
fn __action342<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, start, _): (usize, usize, usize),
    (_, t, _): (usize, Exp, usize),
    (_, end, _): (usize, usize, usize),
) -> Node<Exp>
{
    {
        let (line, col) = lookup.get(start);
        node(t, Source::Known { span: start..end, line, col })
    }
}

#[allow(unused_variables)]
fn __action343<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, start, _): (usize, usize, usize),
    (_, t, _): (usize, Exp, usize),
    (_, end, _): (usize, usize, usize),
) -> Node<Exp>
{
    {
        let (line, col) = lookup.get(start);
        node(t, Source::Known { span: start..end, line, col })
    }
}

#[allow(unused_variables)]
fn __action344<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Exp_, usize),
) -> core::option::Option<Exp_>
{
    Some(__0)
}

#[allow(unused_variables)]
fn __action345<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> core::option::Option<Exp_>
{
    None
}

#[allow(unused_variables)]
fn __action346<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Exp_, usize),
) -> Exp_
{
    __0
}

#[allow(unused_variables)]
fn __action347<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Node<Exp>, usize),
) -> Exp_
{
    __0
}

#[allow(unused_variables)]
fn __action348<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Exp, usize),
) -> Exp
{
    __0
}

#[allow(unused_variables)]
fn __action349<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, v, _): (usize, Mut, usize),
    (_, es, _): (usize, Delim<Exp_>, usize),
    (_, _, _): (usize, &'input str, usize),
) -> Exp
{
    Exp::Array(v, es)
}

#[allow(unused_variables)]
fn __action350<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, e1, _): (usize, Exp_, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, e2, _): (usize, Exp_, usize),
    (_, _, _): (usize, &'input str, usize),
) -> Exp
{
    Exp::Idx(e1, e2)
}

#[allow(unused_variables)]
fn __action351<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, e1, _): (usize, Exp_, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, i, _): (usize, usize, usize),
) -> Exp
{
    Exp::Proj(e1, i)
}

#[allow(unused_variables)]
fn __action352<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, e1, _): (usize, Exp_, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, i, _): (usize, Id_, usize),
) -> Exp
{
    Exp::Dot(e1, i)
}

#[allow(unused_variables)]
fn __action353<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, e1, _): (usize, Exp_, usize),
    (_, e2, _): (usize, Exp_, usize),
) -> Exp
{
    Exp::Call(e1, None, e2)
}

#[allow(unused_variables)]
fn __action354<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, e, _): (usize, Exp_, usize),
    (_, _, _): (usize, &'input str, usize),
) -> Exp
{
    Exp::Bang(e)
}

#[allow(unused_variables)]
fn __action355<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Node<Exp>, usize),
) -> Exp_
{
    __0
}

#[allow(unused_variables)]
fn __action356<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, start, _): (usize, usize, usize),
    (_, t, _): (usize, Exp, usize),
    (_, end, _): (usize, usize, usize),
) -> Node<Exp>
{
    {
        let (line, col) = lookup.get(start);
        node(t, Source::Known { span: start..end, line, col })
    }
}

#[allow(unused_variables)]
fn __action357<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Exp, usize),
) -> Exp
{
    __0
}

#[allow(unused_variables)]
fn __action358<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Exp, usize),
) -> Exp
{
    __0
}

#[allow(unused_variables)]
fn __action359<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Id, usize),
) -> Exp
{
    Exp::Var(__0)
}

#[allow(unused_variables)]
fn __action360<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, sl, _): (usize, String, usize),
) -> Exp
{
    Exp::Prim(sl)
}

#[allow(unused_variables)]
fn __action361<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, __0, _): (usize, Exp_, usize),
) -> alloc::vec::Vec<Exp_>
{
    alloc::vec![__0]
}

#[allow(unused_variables)]
fn __action362<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, v, _): (usize, alloc::vec::Vec<Exp_>, usize),
    (_, e, _): (usize, Exp_, usize),
) -> alloc::vec::Vec<Exp_>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
fn __action363<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    (_, start, _): (usize, usize, usize),
    (_, t, _): (usize, Exp, usize),
    (_, end, _): (usize, usize, usize),
) -> Node<Exp>
{
    {
        let (line, col) = lookup.get(start);
        node(t, Source::Known { span: start..end, line, col })
    }
}

#[allow(unused_variables)]
fn __action364<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, core::option::Option<Id_>, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, DecFields, usize),
) -> Dec
{
    let __start0 = __2.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action130(
        lookup,
        input,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action76(
        lookup,
        input,
        __0,
        __1,
        __temp0,
        __3,
    )
}

#[allow(unused_variables)]
fn __action365<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, core::option::Option<Id_>, usize),
    __2: (usize, DecFields, usize),
) -> Dec
{
    let __start0 = __1.2.clone();
    let __end0 = __2.0.clone();
    let __temp0 = __action131(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action76(
        lookup,
        input,
        __0,
        __1,
        __temp0,
        __2,
    )
}

#[allow(unused_variables)]
fn __action366<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, Exp, usize),
) -> Node<Exp>
{
    let __start0 = __1.2.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action214(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action158(
        lookup,
        input,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action367<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, Case, usize),
) -> Node<Case>
{
    let __start0 = __1.2.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action214(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action156(
        lookup,
        input,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action368<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, Dec, usize),
) -> Node<Dec>
{
    let __start0 = __1.2.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action214(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action149(
        lookup,
        input,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action369<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, DecField, usize),
) -> Node<DecField>
{
    let __start0 = __1.2.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action214(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action118(
        lookup,
        input,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action370<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, Dec, usize),
) -> Node<Dec>
{
    let __start0 = __1.2.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action214(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action135(
        lookup,
        input,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action371<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, Dec, usize),
) -> Node<Dec>
{
    let __start0 = __1.2.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action214(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action122(
        lookup,
        input,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action372<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, Exp, usize),
) -> Node<Exp>
{
    let __start0 = __1.2.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action214(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action275(
        lookup,
        input,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action373<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, Exp, usize),
) -> Node<Exp>
{
    let __start0 = __1.2.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action214(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action179(
        lookup,
        input,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action374<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, Exp, usize),
) -> Node<Exp>
{
    let __start0 = __1.2.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action214(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action294(
        lookup,
        input,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action375<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, Exp, usize),
) -> Node<Exp>
{
    let __start0 = __1.2.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action214(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action265(
        lookup,
        input,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action376<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, Exp, usize),
) -> Node<Exp>
{
    let __start0 = __1.2.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action214(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action295(
        lookup,
        input,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action377<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, Exp, usize),
) -> Node<Exp>
{
    let __start0 = __1.2.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action214(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action266(
        lookup,
        input,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action378<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, Exp, usize),
) -> Node<Exp>
{
    let __start0 = __1.2.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action214(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action276(
        lookup,
        input,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action379<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, Exp, usize),
) -> Node<Exp>
{
    let __start0 = __1.2.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action214(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action255(
        lookup,
        input,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action380<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, Exp, usize),
) -> Node<Exp>
{
    let __start0 = __1.2.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action214(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action300(
        lookup,
        input,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action381<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, Exp, usize),
) -> Node<Exp>
{
    let __start0 = __1.2.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action214(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action286(
        lookup,
        input,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action382<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, Exp, usize),
) -> Node<Exp>
{
    let __start0 = __1.2.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action214(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action322(
        lookup,
        input,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action383<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, Exp, usize),
) -> Node<Exp>
{
    let __start0 = __1.2.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action214(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action290(
        lookup,
        input,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action384<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, Exp, usize),
) -> Node<Exp>
{
    let __start0 = __1.2.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action214(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action326(
        lookup,
        input,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action385<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, Exp, usize),
) -> Node<Exp>
{
    let __start0 = __1.2.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action214(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action304(
        lookup,
        input,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action386<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, Exp, usize),
) -> Node<Exp>
{
    let __start0 = __1.2.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action214(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action274(
        lookup,
        input,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action387<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, Exp, usize),
) -> Node<Exp>
{
    let __start0 = __1.2.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action214(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action221(
        lookup,
        input,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action388<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, ExpField, usize),
) -> Node<ExpField>
{
    let __start0 = __1.2.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action214(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action154(
        lookup,
        input,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action389<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, Exp, usize),
) -> Node<Exp>
{
    let __start0 = __1.2.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action214(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action161(
        lookup,
        input,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action390<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, Exp, usize),
) -> Node<Exp>
{
    let __start0 = __1.2.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action214(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action336(
        lookup,
        input,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action391<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, Exp, usize),
) -> Node<Exp>
{
    let __start0 = __1.2.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action214(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action356(
        lookup,
        input,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action392<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, Exp, usize),
) -> Node<Exp>
{
    let __start0 = __1.2.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action214(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action222(
        lookup,
        input,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action393<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, Exp, usize),
) -> Node<Exp>
{
    let __start0 = __1.2.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action214(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action165(
        lookup,
        input,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action394<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, Exp, usize),
) -> Node<Exp>
{
    let __start0 = __1.2.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action214(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action363(
        lookup,
        input,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action395<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, Exp, usize),
) -> Node<Exp>
{
    let __start0 = __1.2.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action214(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action342(
        lookup,
        input,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action396<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, Exp, usize),
) -> Node<Exp>
{
    let __start0 = __1.2.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action214(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action343(
        lookup,
        input,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action397<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, Exp, usize),
) -> Node<Exp>
{
    let __start0 = __1.2.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action214(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action311(
        lookup,
        input,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action398<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, Id, usize),
) -> Node<Id>
{
    let __start0 = __1.2.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action214(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action173(
        lookup,
        input,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action399<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, Pat, usize),
) -> Node<Pat>
{
    let __start0 = __1.2.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action214(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action167(
        lookup,
        input,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action400<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, Pat, usize),
) -> Node<Pat>
{
    let __start0 = __1.2.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action214(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action168(
        lookup,
        input,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action401<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, Pat, usize),
) -> Node<Pat>
{
    let __start0 = __1.2.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action214(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action169(
        lookup,
        input,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action402<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, Pat, usize),
) -> Node<Pat>
{
    let __start0 = __1.2.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action214(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action172(
        lookup,
        input,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action403<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, SortPat, usize),
) -> Node<SortPat>
{
    let __start0 = __1.2.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action214(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action123(
        lookup,
        input,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action404<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, Stab, usize),
) -> Node<Stab>
{
    let __start0 = __1.2.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action214(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action119(
        lookup,
        input,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action405<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, Type, usize),
) -> Node<Type>
{
    let __start0 = __1.2.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action214(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action166(
        lookup,
        input,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action406<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, Vis, usize),
) -> Node<Vis>
{
    let __start0 = __1.2.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action214(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action120(
        lookup,
        input,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action407<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
) -> Node<Exp>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action215(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action366(
        lookup,
        input,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
fn __action408<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Case, usize),
) -> Node<Case>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action215(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action367(
        lookup,
        input,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
fn __action409<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Dec, usize),
) -> Node<Dec>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action215(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action368(
        lookup,
        input,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
fn __action410<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, DecField, usize),
) -> Node<DecField>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action215(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action369(
        lookup,
        input,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
fn __action411<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Dec, usize),
) -> Node<Dec>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action215(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action370(
        lookup,
        input,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
fn __action412<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Dec, usize),
) -> Node<Dec>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action215(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action371(
        lookup,
        input,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
fn __action413<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
) -> Node<Exp>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action215(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action372(
        lookup,
        input,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
fn __action414<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
) -> Node<Exp>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action215(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action373(
        lookup,
        input,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
fn __action415<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
) -> Node<Exp>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action215(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action374(
        lookup,
        input,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
fn __action416<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
) -> Node<Exp>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action215(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action375(
        lookup,
        input,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
fn __action417<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
) -> Node<Exp>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action215(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action376(
        lookup,
        input,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
fn __action418<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
) -> Node<Exp>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action215(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action377(
        lookup,
        input,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
fn __action419<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
) -> Node<Exp>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action215(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action378(
        lookup,
        input,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
fn __action420<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
) -> Node<Exp>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action215(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action379(
        lookup,
        input,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
fn __action421<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
) -> Node<Exp>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action215(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action380(
        lookup,
        input,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
fn __action422<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
) -> Node<Exp>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action215(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action381(
        lookup,
        input,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
fn __action423<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
) -> Node<Exp>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action215(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action382(
        lookup,
        input,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
fn __action424<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
) -> Node<Exp>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action215(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action383(
        lookup,
        input,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
fn __action425<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
) -> Node<Exp>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action215(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action384(
        lookup,
        input,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
fn __action426<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
) -> Node<Exp>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action215(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action385(
        lookup,
        input,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
fn __action427<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
) -> Node<Exp>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action215(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action386(
        lookup,
        input,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
fn __action428<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
) -> Node<Exp>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action215(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action387(
        lookup,
        input,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
fn __action429<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, ExpField, usize),
) -> Node<ExpField>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action215(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action388(
        lookup,
        input,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
fn __action430<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
) -> Node<Exp>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action215(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action389(
        lookup,
        input,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
fn __action431<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
) -> Node<Exp>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action215(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action390(
        lookup,
        input,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
fn __action432<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
) -> Node<Exp>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action215(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action391(
        lookup,
        input,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
fn __action433<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
) -> Node<Exp>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action215(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action392(
        lookup,
        input,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
fn __action434<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
) -> Node<Exp>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action215(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action393(
        lookup,
        input,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
fn __action435<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
) -> Node<Exp>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action215(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action394(
        lookup,
        input,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
fn __action436<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
) -> Node<Exp>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action215(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action395(
        lookup,
        input,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
fn __action437<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
) -> Node<Exp>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action215(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action396(
        lookup,
        input,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
fn __action438<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
) -> Node<Exp>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action215(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action397(
        lookup,
        input,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
fn __action439<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Id, usize),
) -> Node<Id>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action215(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action398(
        lookup,
        input,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
fn __action440<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Pat, usize),
) -> Node<Pat>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action215(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action399(
        lookup,
        input,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
fn __action441<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Pat, usize),
) -> Node<Pat>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action215(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action400(
        lookup,
        input,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
fn __action442<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Pat, usize),
) -> Node<Pat>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action215(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action401(
        lookup,
        input,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
fn __action443<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Pat, usize),
) -> Node<Pat>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action215(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action402(
        lookup,
        input,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
fn __action444<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, SortPat, usize),
) -> Node<SortPat>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action215(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action403(
        lookup,
        input,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
fn __action445<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Stab, usize),
) -> Node<Stab>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action215(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action404(
        lookup,
        input,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
fn __action446<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Type, usize),
) -> Node<Type>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action215(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action405(
        lookup,
        input,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
fn __action447<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Vis, usize),
) -> Node<Vis>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action215(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action406(
        lookup,
        input,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
fn __action448<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Type, usize),
) -> Type_
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action446(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action50(
        lookup,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action449<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, Type, usize),
) -> Type_
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action448(
        lookup,
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action153(
        lookup,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action450<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, Type, usize),
) -> (&'input str, Type_)
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action448(
        lookup,
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action129(
        lookup,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action451<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp_, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Type, usize),
) -> Exp
{
    let __start0 = __2.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action448(
        lookup,
        input,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action280(
        lookup,
        input,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action452<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp_, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Type, usize),
) -> Exp
{
    let __start0 = __2.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action448(
        lookup,
        input,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action259(
        lookup,
        input,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action453<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Pat_, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Type, usize),
) -> Pat
{
    let __start0 = __2.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action448(
        lookup,
        input,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action29(
        lookup,
        input,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action454<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, Type, usize),
) -> core::option::Option<Type_>
{
    let __start0 = __0.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action449(
        lookup,
        input,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action151(
        lookup,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action455<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Mut, usize),
    __1: (usize, Id_, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, Type, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, Exp_, usize),
) -> ExpField
{
    let __start0 = __2.0.clone();
    let __end0 = __3.2.clone();
    let __temp0 = __action454(
        lookup,
        input,
        __2,
        __3,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action68(
        lookup,
        input,
        __0,
        __1,
        __temp0,
        __4,
        __5,
    )
}

#[allow(unused_variables)]
fn __action456<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Mut, usize),
    __1: (usize, Id_, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, Exp_, usize),
) -> ExpField
{
    let __start0 = __1.2.clone();
    let __end0 = __2.0.clone();
    let __temp0 = __action152(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action68(
        lookup,
        input,
        __0,
        __1,
        __temp0,
        __2,
        __3,
    )
}

#[allow(unused_variables)]
fn __action457<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, Type, usize),
) -> core::option::Option<(&'input str, Type_)>
{
    let __start0 = __0.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action450(
        lookup,
        input,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action127(
        lookup,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action458<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, SortPat_, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, core::option::Option<Id_>, usize),
    __3: (usize, Pat_, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, Type, usize),
    __6: (usize, Exp_, usize),
) -> Dec
{
    let __start0 = __4.0.clone();
    let __end0 = __5.2.clone();
    let __temp0 = __action457(
        lookup,
        input,
        __4,
        __5,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action77(
        lookup,
        input,
        __0,
        __1,
        __2,
        __3,
        __temp0,
        __6,
    )
}

#[allow(unused_variables)]
fn __action459<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, SortPat_, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, core::option::Option<Id_>, usize),
    __3: (usize, Pat_, usize),
    __4: (usize, Exp_, usize),
) -> Dec
{
    let __start0 = __3.2.clone();
    let __end0 = __4.0.clone();
    let __temp0 = __action128(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action77(
        lookup,
        input,
        __0,
        __1,
        __2,
        __3,
        __temp0,
        __4,
    )
}

#[allow(unused_variables)]
fn __action460<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, SortPat_, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, core::option::Option<Id_>, usize),
    __3: (usize, Pat_, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, Type, usize),
    __6: (usize, &'input str, usize),
    __7: (usize, Exp_, usize),
) -> Dec
{
    let __start0 = __4.0.clone();
    let __end0 = __5.2.clone();
    let __temp0 = __action457(
        lookup,
        input,
        __4,
        __5,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action78(
        lookup,
        input,
        __0,
        __1,
        __2,
        __3,
        __temp0,
        __6,
        __7,
    )
}

#[allow(unused_variables)]
fn __action461<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, SortPat_, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, core::option::Option<Id_>, usize),
    __3: (usize, Pat_, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, Exp_, usize),
) -> Dec
{
    let __start0 = __3.2.clone();
    let __end0 = __4.0.clone();
    let __temp0 = __action128(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action78(
        lookup,
        input,
        __0,
        __1,
        __2,
        __3,
        __temp0,
        __4,
        __5,
    )
}

#[allow(unused_variables)]
fn __action462<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, DecField, usize),
) -> DecField_
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action410(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action110(
        lookup,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action463<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, DecField, usize),
    __1: (usize, &'input str, usize),
) -> DecField_
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action462(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action213(
        lookup,
        input,
        __temp0,
        __1,
    )
}

#[allow(unused_variables)]
fn __action464<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, DecField, usize),
) -> core::option::Option<DecField_>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action462(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action209(
        lookup,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action465<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, DecField, usize),
    __1: (usize, &'input str, usize),
) -> alloc::vec::Vec<DecField_>
{
    let __start0 = __0.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action463(
        lookup,
        input,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action216(
        lookup,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action466<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, alloc::vec::Vec<DecField_>, usize),
    __1: (usize, DecField, usize),
    __2: (usize, &'input str, usize),
) -> alloc::vec::Vec<DecField_>
{
    let __start0 = __1.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action463(
        lookup,
        input,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action217(
        lookup,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action467<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, core::option::Option<DecField_>, usize),
) -> Delim<DecField_>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action211(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action121(
        lookup,
        input,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
fn __action468<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, alloc::vec::Vec<DecField_>, usize),
    __1: (usize, core::option::Option<DecField_>, usize),
) -> Delim<DecField_>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action212(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action121(
        lookup,
        input,
        __temp0,
        __1,
    )
}

#[allow(unused_variables)]
fn __action469<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Dec, usize),
) -> Dec_
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action409(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action70(
        lookup,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action470<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Dec, usize),
    __1: (usize, &'input str, usize),
) -> Dec_
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action469(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action201(
        lookup,
        input,
        __temp0,
        __1,
    )
}

#[allow(unused_variables)]
fn __action471<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, core::option::Option<Vis_>, usize),
    __1: (usize, core::option::Option<Stab_>, usize),
    __2: (usize, Dec, usize),
) -> DecField
{
    let __start0 = __2.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action469(
        lookup,
        input,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action111(
        lookup,
        input,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action472<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Dec, usize),
) -> core::option::Option<Dec_>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action469(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action197(
        lookup,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action473<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Dec, usize),
    __1: (usize, &'input str, usize),
) -> alloc::vec::Vec<Dec_>
{
    let __start0 = __0.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action470(
        lookup,
        input,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action227(
        lookup,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action474<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, alloc::vec::Vec<Dec_>, usize),
    __1: (usize, Dec, usize),
    __2: (usize, &'input str, usize),
) -> alloc::vec::Vec<Dec_>
{
    let __start0 = __1.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action470(
        lookup,
        input,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action228(
        lookup,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action475<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, core::option::Option<Dec_>, usize),
) -> Delim<Dec_>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action199(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action150(
        lookup,
        input,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
fn __action476<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, alloc::vec::Vec<Dec_>, usize),
    __1: (usize, core::option::Option<Dec_>, usize),
) -> Delim<Dec_>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action200(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action150(
        lookup,
        input,
        __temp0,
        __1,
    )
}

#[allow(unused_variables)]
fn __action477<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, ExpField, usize),
) -> Node<ExpField>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action429(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action67(
        lookup,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action478<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, ExpField, usize),
    __1: (usize, &'input str, usize),
) -> Node<ExpField>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action477(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action191(
        lookup,
        input,
        __temp0,
        __1,
    )
}

#[allow(unused_variables)]
fn __action479<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, ExpField, usize),
) -> core::option::Option<Node<ExpField>>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action477(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action187(
        lookup,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action480<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, ExpField, usize),
    __1: (usize, &'input str, usize),
) -> alloc::vec::Vec<Node<ExpField>>
{
    let __start0 = __0.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action478(
        lookup,
        input,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action231(
        lookup,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action481<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, alloc::vec::Vec<Node<ExpField>>, usize),
    __1: (usize, ExpField, usize),
    __2: (usize, &'input str, usize),
) -> alloc::vec::Vec<Node<ExpField>>
{
    let __start0 = __1.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action478(
        lookup,
        input,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action232(
        lookup,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action482<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, core::option::Option<Node<ExpField>>, usize),
) -> Delim<Node<ExpField>>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action189(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action157(
        lookup,
        input,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
fn __action483<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, alloc::vec::Vec<Node<ExpField>>, usize),
    __1: (usize, core::option::Option<Node<ExpField>>, usize),
) -> Delim<Node<ExpField>>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action190(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action157(
        lookup,
        input,
        __temp0,
        __1,
    )
}

#[allow(unused_variables)]
fn __action484<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
) -> Exp_
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action431(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action335(
        lookup,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action485<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
    __1: (usize, &'input str, usize),
) -> Exp_
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action484(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action341(
        lookup,
        input,
        __temp0,
        __1,
    )
}

#[allow(unused_variables)]
fn __action486<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
) -> core::option::Option<Exp_>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action484(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action337(
        lookup,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action487<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
    __1: (usize, &'input str, usize),
) -> alloc::vec::Vec<Exp_>
{
    let __start0 = __0.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action485(
        lookup,
        input,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action361(
        lookup,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action488<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, alloc::vec::Vec<Exp_>, usize),
    __1: (usize, Exp, usize),
    __2: (usize, &'input str, usize),
) -> alloc::vec::Vec<Exp_>
{
    let __start0 = __1.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action485(
        lookup,
        input,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action362(
        lookup,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action489<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, core::option::Option<Exp_>, usize),
) -> Delim<Exp_>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action339(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action334(
        lookup,
        input,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
fn __action490<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, alloc::vec::Vec<Exp_>, usize),
    __1: (usize, core::option::Option<Exp_>, usize),
) -> Delim<Exp_>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action340(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action334(
        lookup,
        input,
        __temp0,
        __1,
    )
}

#[allow(unused_variables)]
fn __action491<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
) -> Exp_
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action414(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action164(
        lookup,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action492<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
    __1: (usize, &'input str, usize),
) -> Exp_
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action491(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action184(
        lookup,
        input,
        __temp0,
        __1,
    )
}

#[allow(unused_variables)]
fn __action493<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, Pat_, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, Exp, usize),
) -> Dec
{
    let __start0 = __3.0.clone();
    let __end0 = __3.2.clone();
    let __temp0 = __action491(
        lookup,
        input,
        __3,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action75(
        lookup,
        input,
        __0,
        __1,
        __2,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action494<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, SortPat_, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, core::option::Option<Id_>, usize),
    __3: (usize, Pat_, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, Type, usize),
    __6: (usize, &'input str, usize),
    __7: (usize, Exp, usize),
) -> Dec
{
    let __start0 = __7.0.clone();
    let __end0 = __7.2.clone();
    let __temp0 = __action491(
        lookup,
        input,
        __7,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action460(
        lookup,
        input,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action495<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, SortPat_, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, core::option::Option<Id_>, usize),
    __3: (usize, Pat_, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, Exp, usize),
) -> Dec
{
    let __start0 = __5.0.clone();
    let __end0 = __5.2.clone();
    let __temp0 = __action491(
        lookup,
        input,
        __5,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action461(
        lookup,
        input,
        __0,
        __1,
        __2,
        __3,
        __4,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action496<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, Pat_, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, Exp, usize),
) -> Dec
{
    let __start0 = __3.0.clone();
    let __end0 = __3.2.clone();
    let __temp0 = __action491(
        lookup,
        input,
        __3,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action82(
        lookup,
        input,
        __0,
        __1,
        __2,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action497<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
) -> Delim<Exp_>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action491(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action162(
        lookup,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action498<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Mut, usize),
    __1: (usize, Id_, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, Type, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, Exp, usize),
) -> ExpField
{
    let __start0 = __5.0.clone();
    let __end0 = __5.2.clone();
    let __temp0 = __action491(
        lookup,
        input,
        __5,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action455(
        lookup,
        input,
        __0,
        __1,
        __2,
        __3,
        __4,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action499<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Mut, usize),
    __1: (usize, Id_, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, Exp, usize),
) -> ExpField
{
    let __start0 = __3.0.clone();
    let __end0 = __3.2.clone();
    let __temp0 = __action491(
        lookup,
        input,
        __3,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action456(
        lookup,
        input,
        __0,
        __1,
        __2,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action500<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp_, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Exp, usize),
) -> Exp
{
    let __start0 = __2.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action491(
        lookup,
        input,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action234(
        lookup,
        input,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action501<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Pat_, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, Exp, usize),
    __5: (usize, &'input str, usize),
    __6: (usize, Exp_, usize),
) -> Exp
{
    let __start0 = __4.0.clone();
    let __end0 = __4.2.clone();
    let __temp0 = __action491(
        lookup,
        input,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action240(
        lookup,
        input,
        __0,
        __1,
        __2,
        __3,
        __temp0,
        __5,
        __6,
    )
}

#[allow(unused_variables)]
fn __action502<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp_, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Exp, usize),
) -> Exp
{
    let __start0 = __2.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action491(
        lookup,
        input,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action137(
        lookup,
        input,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action503<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Pat_, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, Exp, usize),
    __5: (usize, &'input str, usize),
    __6: (usize, Exp_, usize),
) -> Exp
{
    let __start0 = __4.0.clone();
    let __end0 = __4.2.clone();
    let __temp0 = __action491(
        lookup,
        input,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action143(
        lookup,
        input,
        __0,
        __1,
        __2,
        __3,
        __temp0,
        __5,
        __6,
    )
}

#[allow(unused_variables)]
fn __action504<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp_, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Exp, usize),
    __3: (usize, &'input str, usize),
) -> Exp
{
    let __start0 = __2.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action491(
        lookup,
        input,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action350(
        lookup,
        input,
        __0,
        __1,
        __temp0,
        __3,
    )
}

#[allow(unused_variables)]
fn __action505<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp_, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Exp, usize),
    __3: (usize, &'input str, usize),
) -> Exp
{
    let __start0 = __2.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action491(
        lookup,
        input,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action317(
        lookup,
        input,
        __0,
        __1,
        __temp0,
        __3,
    )
}

#[allow(unused_variables)]
fn __action506<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
) -> core::option::Option<Exp_>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action491(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action202(
        lookup,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action507<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
    __1: (usize, &'input str, usize),
) -> alloc::vec::Vec<Exp_>
{
    let __start0 = __0.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action492(
        lookup,
        input,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action182(
        lookup,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action508<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, alloc::vec::Vec<Exp_>, usize),
    __1: (usize, Exp, usize),
    __2: (usize, &'input str, usize),
) -> alloc::vec::Vec<Exp_>
{
    let __start0 = __1.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action492(
        lookup,
        input,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action183(
        lookup,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action509<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Case, usize),
    __1: (usize, &'input str, usize),
) -> Node<Case>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action408(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action196(
        lookup,
        input,
        __temp0,
        __1,
    )
}

#[allow(unused_variables)]
fn __action510<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Case, usize),
) -> core::option::Option<Node<Case>>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action408(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action192(
        lookup,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action511<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Case, usize),
    __1: (usize, &'input str, usize),
) -> alloc::vec::Vec<Node<Case>>
{
    let __start0 = __0.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action509(
        lookup,
        input,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action229(
        lookup,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action512<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, alloc::vec::Vec<Node<Case>>, usize),
    __1: (usize, Case, usize),
    __2: (usize, &'input str, usize),
) -> alloc::vec::Vec<Node<Case>>
{
    let __start0 = __1.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action509(
        lookup,
        input,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action230(
        lookup,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action513<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, core::option::Option<Node<Case>>, usize),
) -> Delim<Node<Case>>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action194(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action155(
        lookup,
        input,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
fn __action514<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, alloc::vec::Vec<Node<Case>>, usize),
    __1: (usize, core::option::Option<Node<Case>>, usize),
) -> Delim<Node<Case>>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action195(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action155(
        lookup,
        input,
        __temp0,
        __1,
    )
}

#[allow(unused_variables)]
fn __action515<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Pat, usize),
) -> Pat_
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action441(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action28(
        lookup,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action516<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Pat, usize),
    __1: (usize, &'input str, usize),
) -> Pat_
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action515(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action178(
        lookup,
        input,
        __temp0,
        __1,
    )
}

#[allow(unused_variables)]
fn __action517<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Pat, usize),
) -> Delim<Pat_>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action515(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action170(
        lookup,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action518<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Pat, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Type, usize),
) -> Pat
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action515(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action453(
        lookup,
        input,
        __temp0,
        __1,
        __2,
    )
}

#[allow(unused_variables)]
fn __action519<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Pat, usize),
) -> core::option::Option<Pat_>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action515(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action174(
        lookup,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action520<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Pat, usize),
    __1: (usize, &'input str, usize),
) -> alloc::vec::Vec<Pat_>
{
    let __start0 = __0.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action516(
        lookup,
        input,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action176(
        lookup,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action521<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, alloc::vec::Vec<Pat_>, usize),
    __1: (usize, Pat, usize),
    __2: (usize, &'input str, usize),
) -> alloc::vec::Vec<Pat_>
{
    let __start0 = __1.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action516(
        lookup,
        input,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action177(
        lookup,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action522<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
) -> Exp_
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action432(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action347(
        lookup,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action523<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
) -> Exp_
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action522(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action346(
        lookup,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action524<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
) -> core::option::Option<Exp_>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action523(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action344(
        lookup,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action525<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, Id_, usize),
    __2: (usize, Exp, usize),
) -> Exp
{
    let __start0 = __2.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action524(
        lookup,
        input,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action328(
        lookup,
        input,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action526<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, Id_, usize),
) -> Exp
{
    let __start0 = __1.2.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action345(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action328(
        lookup,
        input,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action527<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
) -> Exp_
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action433(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action204(
        lookup,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action528<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
) -> Exp_
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action527(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action314(
        lookup,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action529<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, Exp, usize),
    __2: (usize, Exp_, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, Exp_, usize),
) -> Exp
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action527(
        lookup,
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action235(
        lookup,
        input,
        __0,
        __temp0,
        __2,
        __3,
        __4,
    )
}

#[allow(unused_variables)]
fn __action530<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, Exp, usize),
    __2: (usize, Exp_, usize),
    __3: (usize, &'input str, usize),
) -> Exp
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action527(
        lookup,
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action236(
        lookup,
        input,
        __0,
        __temp0,
        __2,
        __3,
    )
}

#[allow(unused_variables)]
fn __action531<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, Exp, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, Cases, usize),
    __4: (usize, &'input str, usize),
) -> Exp
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action527(
        lookup,
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action238(
        lookup,
        input,
        __0,
        __temp0,
        __2,
        __3,
        __4,
    )
}

#[allow(unused_variables)]
fn __action532<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, Exp, usize),
    __2: (usize, Exp_, usize),
) -> Exp
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action527(
        lookup,
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action239(
        lookup,
        input,
        __0,
        __temp0,
        __2,
    )
}

#[allow(unused_variables)]
fn __action533<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, Exp, usize),
    __2: (usize, Exp_, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, Exp_, usize),
) -> Exp
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action527(
        lookup,
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action138(
        lookup,
        input,
        __0,
        __temp0,
        __2,
        __3,
        __4,
    )
}

#[allow(unused_variables)]
fn __action534<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, Exp, usize),
    __2: (usize, Exp_, usize),
    __3: (usize, &'input str, usize),
) -> Exp
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action527(
        lookup,
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action139(
        lookup,
        input,
        __0,
        __temp0,
        __2,
        __3,
    )
}

#[allow(unused_variables)]
fn __action535<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, Exp, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, Cases, usize),
    __4: (usize, &'input str, usize),
) -> Exp
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action527(
        lookup,
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action141(
        lookup,
        input,
        __0,
        __temp0,
        __2,
        __3,
        __4,
    )
}

#[allow(unused_variables)]
fn __action536<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, Exp, usize),
    __2: (usize, Exp_, usize),
) -> Exp
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action527(
        lookup,
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action142(
        lookup,
        input,
        __0,
        __temp0,
        __2,
    )
}

#[allow(unused_variables)]
fn __action537<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp_, usize),
    __1: (usize, Exp, usize),
) -> Exp
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action527(
        lookup,
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action353(
        lookup,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action538<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp_, usize),
    __1: (usize, Exp, usize),
) -> Exp
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action527(
        lookup,
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action320(
        lookup,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action539<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
) -> core::option::Option<Exp_>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action528(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action312(
        lookup,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action540<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, Id_, usize),
    __2: (usize, Exp, usize),
) -> Exp
{
    let __start0 = __2.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action539(
        lookup,
        input,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action306(
        lookup,
        input,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action541<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, Id_, usize),
) -> Exp
{
    let __start0 = __1.2.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action313(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action306(
        lookup,
        input,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action542<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Id, usize),
) -> Id_
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action439(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action9(
        lookup,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action543<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Id, usize),
) -> Id_
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action542(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action134(
        lookup,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action544<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Mut, usize),
    __1: (usize, Id, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, Type, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, Exp, usize),
) -> ExpField
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action542(
        lookup,
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action498(
        lookup,
        input,
        __0,
        __temp0,
        __2,
        __3,
        __4,
        __5,
    )
}

#[allow(unused_variables)]
fn __action545<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Mut, usize),
    __1: (usize, Id, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, Exp, usize),
) -> ExpField
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action542(
        lookup,
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action499(
        lookup,
        input,
        __0,
        __temp0,
        __2,
        __3,
    )
}

#[allow(unused_variables)]
fn __action546<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp_, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Id, usize),
) -> Exp
{
    let __start0 = __2.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action542(
        lookup,
        input,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action352(
        lookup,
        input,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action547<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp_, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Id, usize),
) -> Exp
{
    let __start0 = __2.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action542(
        lookup,
        input,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action319(
        lookup,
        input,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action548<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, Id, usize),
    __2: (usize, Exp, usize),
) -> Exp
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action542(
        lookup,
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action525(
        lookup,
        input,
        __0,
        __temp0,
        __2,
    )
}

#[allow(unused_variables)]
fn __action549<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, Id, usize),
) -> Exp
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action542(
        lookup,
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action526(
        lookup,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action550<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, Id, usize),
    __2: (usize, Exp, usize),
) -> Exp
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action542(
        lookup,
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action540(
        lookup,
        input,
        __0,
        __temp0,
        __2,
    )
}

#[allow(unused_variables)]
fn __action551<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, Id, usize),
) -> Exp
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action542(
        lookup,
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action541(
        lookup,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action552<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Id, usize),
) -> core::option::Option<Id_>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action542(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action125(
        lookup,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action553<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Id, usize),
) -> Pat
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action542(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action23(
        lookup,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action554<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, Id, usize),
) -> Pat
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action542(
        lookup,
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action32(
        lookup,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action555<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, Id, usize),
    __2: (usize, Pat_, usize),
) -> Pat
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action542(
        lookup,
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action33(
        lookup,
        input,
        __0,
        __temp0,
        __2,
    )
}

#[allow(unused_variables)]
fn __action556<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Id, usize),
) -> core::option::Option<Id_>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action543(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action132(
        lookup,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action557<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, Id, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, DecFields, usize),
) -> Dec
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action556(
        lookup,
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action364(
        lookup,
        input,
        __0,
        __temp0,
        __2,
        __3,
    )
}

#[allow(unused_variables)]
fn __action558<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, DecFields, usize),
) -> Dec
{
    let __start0 = __0.2.clone();
    let __end0 = __1.0.clone();
    let __temp0 = __action133(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action364(
        lookup,
        input,
        __0,
        __temp0,
        __1,
        __2,
    )
}

#[allow(unused_variables)]
fn __action559<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, Id, usize),
    __2: (usize, DecFields, usize),
) -> Dec
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action556(
        lookup,
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action365(
        lookup,
        input,
        __0,
        __temp0,
        __2,
    )
}

#[allow(unused_variables)]
fn __action560<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, DecFields, usize),
) -> Dec
{
    let __start0 = __0.2.clone();
    let __end0 = __1.0.clone();
    let __temp0 = __action133(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action365(
        lookup,
        input,
        __0,
        __temp0,
        __1,
    )
}

#[allow(unused_variables)]
fn __action561<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, SortPat_, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Id, usize),
    __3: (usize, Pat_, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, Type, usize),
    __6: (usize, Exp_, usize),
) -> Dec
{
    let __start0 = __2.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action556(
        lookup,
        input,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action458(
        lookup,
        input,
        __0,
        __1,
        __temp0,
        __3,
        __4,
        __5,
        __6,
    )
}

#[allow(unused_variables)]
fn __action562<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, SortPat_, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Pat_, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, Type, usize),
    __5: (usize, Exp_, usize),
) -> Dec
{
    let __start0 = __1.2.clone();
    let __end0 = __2.0.clone();
    let __temp0 = __action133(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action458(
        lookup,
        input,
        __0,
        __1,
        __temp0,
        __2,
        __3,
        __4,
        __5,
    )
}

#[allow(unused_variables)]
fn __action563<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, SortPat_, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Id, usize),
    __3: (usize, Pat_, usize),
    __4: (usize, Exp_, usize),
) -> Dec
{
    let __start0 = __2.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action556(
        lookup,
        input,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action459(
        lookup,
        input,
        __0,
        __1,
        __temp0,
        __3,
        __4,
    )
}

#[allow(unused_variables)]
fn __action564<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, SortPat_, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Pat_, usize),
    __3: (usize, Exp_, usize),
) -> Dec
{
    let __start0 = __1.2.clone();
    let __end0 = __2.0.clone();
    let __temp0 = __action133(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action459(
        lookup,
        input,
        __0,
        __1,
        __temp0,
        __2,
        __3,
    )
}

#[allow(unused_variables)]
fn __action565<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Id, usize),
) -> core::option::Option<Id_>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action552(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action124(
        lookup,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action566<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> core::option::Option<Id_>
{
    let __start0 = __lookbehind.clone();
    let __end0 = __lookahead.clone();
    let __temp0 = __action126(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action124(
        lookup,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action567<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, SortPat_, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Id, usize),
    __3: (usize, Pat_, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, Type, usize),
    __6: (usize, &'input str, usize),
    __7: (usize, Exp, usize),
) -> Dec
{
    let __start0 = __2.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action565(
        lookup,
        input,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action494(
        lookup,
        input,
        __0,
        __1,
        __temp0,
        __3,
        __4,
        __5,
        __6,
        __7,
    )
}

#[allow(unused_variables)]
fn __action568<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, SortPat_, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Pat_, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, Type, usize),
    __5: (usize, &'input str, usize),
    __6: (usize, Exp, usize),
) -> Dec
{
    let __start0 = __1.2.clone();
    let __end0 = __2.0.clone();
    let __temp0 = __action566(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action494(
        lookup,
        input,
        __0,
        __1,
        __temp0,
        __2,
        __3,
        __4,
        __5,
        __6,
    )
}

#[allow(unused_variables)]
fn __action569<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, SortPat_, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Id, usize),
    __3: (usize, Pat_, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, Exp, usize),
) -> Dec
{
    let __start0 = __2.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action565(
        lookup,
        input,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action495(
        lookup,
        input,
        __0,
        __1,
        __temp0,
        __3,
        __4,
        __5,
    )
}

#[allow(unused_variables)]
fn __action570<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, SortPat_, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Pat_, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, Exp, usize),
) -> Dec
{
    let __start0 = __1.2.clone();
    let __end0 = __2.0.clone();
    let __temp0 = __action566(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action495(
        lookup,
        input,
        __0,
        __1,
        __temp0,
        __2,
        __3,
        __4,
    )
}

#[allow(unused_variables)]
fn __action571<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Stab, usize),
) -> Stab_
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action445(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action107(
        lookup,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action572<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Stab, usize),
) -> Stab_
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action571(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action114(
        lookup,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action573<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Stab, usize),
) -> core::option::Option<Stab_>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action572(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action112(
        lookup,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action574<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, core::option::Option<Vis_>, usize),
    __1: (usize, Stab, usize),
    __2: (usize, Dec, usize),
) -> DecField
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action573(
        lookup,
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action471(
        lookup,
        input,
        __0,
        __temp0,
        __2,
    )
}

#[allow(unused_variables)]
fn __action575<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, core::option::Option<Vis_>, usize),
    __1: (usize, Dec, usize),
) -> DecField
{
    let __start0 = __0.2.clone();
    let __end0 = __1.0.clone();
    let __temp0 = __action113(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action471(
        lookup,
        input,
        __0,
        __temp0,
        __1,
    )
}

#[allow(unused_variables)]
fn __action576<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Vis, usize),
) -> Vis_
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action447(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action104(
        lookup,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action577<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Vis, usize),
) -> Vis_
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action576(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action117(
        lookup,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action578<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Vis, usize),
) -> core::option::Option<Vis_>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action577(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action115(
        lookup,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action579<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Vis, usize),
    __1: (usize, Stab, usize),
    __2: (usize, Dec, usize),
) -> DecField
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action578(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action574(
        lookup,
        input,
        __temp0,
        __1,
        __2,
    )
}

#[allow(unused_variables)]
fn __action580<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Stab, usize),
    __1: (usize, Dec, usize),
) -> DecField
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action116(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action574(
        lookup,
        input,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
fn __action581<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Vis, usize),
    __1: (usize, Dec, usize),
) -> DecField
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action578(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action575(
        lookup,
        input,
        __temp0,
        __1,
    )
}

#[allow(unused_variables)]
fn __action582<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Dec, usize),
) -> DecField
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action116(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action575(
        lookup,
        input,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
fn __action583<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
) -> Exp_
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action407(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action62(
        lookup,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action584<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, SortPat_, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Id, usize),
    __3: (usize, Pat_, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, Type, usize),
    __6: (usize, Exp, usize),
) -> Dec
{
    let __start0 = __6.0.clone();
    let __end0 = __6.2.clone();
    let __temp0 = __action583(
        lookup,
        input,
        __6,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action561(
        lookup,
        input,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action585<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, SortPat_, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Pat_, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, Type, usize),
    __5: (usize, Exp, usize),
) -> Dec
{
    let __start0 = __5.0.clone();
    let __end0 = __5.2.clone();
    let __temp0 = __action583(
        lookup,
        input,
        __5,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action562(
        lookup,
        input,
        __0,
        __1,
        __2,
        __3,
        __4,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action586<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, SortPat_, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Id, usize),
    __3: (usize, Pat_, usize),
    __4: (usize, Exp, usize),
) -> Dec
{
    let __start0 = __4.0.clone();
    let __end0 = __4.2.clone();
    let __temp0 = __action583(
        lookup,
        input,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action563(
        lookup,
        input,
        __0,
        __1,
        __2,
        __3,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action587<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, SortPat_, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Pat_, usize),
    __3: (usize, Exp, usize),
) -> Dec
{
    let __start0 = __3.0.clone();
    let __end0 = __3.2.clone();
    let __temp0 = __action583(
        lookup,
        input,
        __3,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action564(
        lookup,
        input,
        __0,
        __1,
        __2,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action588<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, Exp, usize),
) -> Exp
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action583(
        lookup,
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action242(
        lookup,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action589<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Exp, usize),
) -> Exp
{
    let __start0 = __2.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action583(
        lookup,
        input,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action243(
        lookup,
        input,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action590<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, Exp, usize),
) -> Exp
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action583(
        lookup,
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action145(
        lookup,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action591<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Exp, usize),
) -> Exp
{
    let __start0 = __2.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action583(
        lookup,
        input,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action146(
        lookup,
        input,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action592<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, DecField, usize),
) -> Delim<DecField_>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action464(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action467(
        lookup,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action593<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> Delim<DecField_>
{
    let __start0 = __lookbehind.clone();
    let __end0 = __lookahead.clone();
    let __temp0 = __action210(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action467(
        lookup,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action594<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, alloc::vec::Vec<DecField_>, usize),
    __1: (usize, DecField, usize),
) -> Delim<DecField_>
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action464(
        lookup,
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action468(
        lookup,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action595<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, alloc::vec::Vec<DecField_>, usize),
) -> Delim<DecField_>
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action210(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action468(
        lookup,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action596<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Dec, usize),
) -> Dec_
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action411(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action74(
        lookup,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action597<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Dec, usize),
) -> Exp
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action596(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action186(
        lookup,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action598<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Dec, usize),
) -> Exp
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action596(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action247(
        lookup,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action599<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Dec, usize),
) -> Dec_
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action412(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action81(
        lookup,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action600<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Dec, usize),
) -> Exp
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action599(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action160(
        lookup,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action601<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Dec, usize),
) -> Exp
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action599(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action181(
        lookup,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action602<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Dec, usize),
) -> Delim<Dec_>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action472(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action475(
        lookup,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action603<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> Delim<Dec_>
{
    let __start0 = __lookbehind.clone();
    let __end0 = __lookahead.clone();
    let __temp0 = __action198(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action475(
        lookup,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action604<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, alloc::vec::Vec<Dec_>, usize),
    __1: (usize, Dec, usize),
) -> Delim<Dec_>
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action472(
        lookup,
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action476(
        lookup,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action605<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, alloc::vec::Vec<Dec_>, usize),
) -> Delim<Dec_>
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action198(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action476(
        lookup,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action606<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
) -> Exp_
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action415(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action285(
        lookup,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action607<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Exp_, usize),
) -> Exp
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action606(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action271(
        lookup,
        input,
        __temp0,
        __1,
        __2,
    )
}

#[allow(unused_variables)]
fn __action608<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
) -> Exp_
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action416(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action264(
        lookup,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action609<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Exp_, usize),
) -> Exp
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action608(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action218(
        lookup,
        input,
        __temp0,
        __1,
        __2,
    )
}

#[allow(unused_variables)]
fn __action610<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
) -> Exp_
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action417(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action284(
        lookup,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action611<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Exp, usize),
) -> Exp
{
    let __start0 = __2.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action610(
        lookup,
        input,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action607(
        lookup,
        input,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action612<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Exp_, usize),
) -> Exp
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action610(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action282(
        lookup,
        input,
        __temp0,
        __1,
        __2,
    )
}

#[allow(unused_variables)]
fn __action613<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
) -> Exp_
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action418(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action263(
        lookup,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action614<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Exp, usize),
) -> Exp
{
    let __start0 = __2.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action613(
        lookup,
        input,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action609(
        lookup,
        input,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action615<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Exp_, usize),
) -> Exp
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action613(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action261(
        lookup,
        input,
        __temp0,
        __1,
        __2,
    )
}

#[allow(unused_variables)]
fn __action616<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
) -> Exp_
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action419(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action273(
        lookup,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action617<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Exp, usize),
) -> Exp
{
    let __start0 = __2.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action616(
        lookup,
        input,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action612(
        lookup,
        input,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action618<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Exp_, usize),
) -> Exp
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action616(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action277(
        lookup,
        input,
        __temp0,
        __1,
        __2,
    )
}

#[allow(unused_variables)]
fn __action619<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Exp_, usize),
) -> Exp
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action616(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action278(
        lookup,
        input,
        __temp0,
        __1,
        __2,
    )
}

#[allow(unused_variables)]
fn __action620<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Exp_, usize),
) -> Exp
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action616(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action279(
        lookup,
        input,
        __temp0,
        __1,
        __2,
    )
}

#[allow(unused_variables)]
fn __action621<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Type, usize),
) -> Exp
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action616(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action451(
        lookup,
        input,
        __temp0,
        __1,
        __2,
    )
}

#[allow(unused_variables)]
fn __action622<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp_, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Exp, usize),
) -> Exp
{
    let __start0 = __2.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action616(
        lookup,
        input,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action252(
        lookup,
        input,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action623<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp_, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Exp, usize),
) -> Exp
{
    let __start0 = __2.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action616(
        lookup,
        input,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action253(
        lookup,
        input,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action624<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
) -> Exp_
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action420(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action220(
        lookup,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action625<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Exp, usize),
) -> Exp
{
    let __start0 = __2.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action624(
        lookup,
        input,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action615(
        lookup,
        input,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action626<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Exp_, usize),
) -> Exp
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action624(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action256(
        lookup,
        input,
        __temp0,
        __1,
        __2,
    )
}

#[allow(unused_variables)]
fn __action627<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Exp_, usize),
) -> Exp
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action624(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action257(
        lookup,
        input,
        __temp0,
        __1,
        __2,
    )
}

#[allow(unused_variables)]
fn __action628<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Exp_, usize),
) -> Exp
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action624(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action258(
        lookup,
        input,
        __temp0,
        __1,
        __2,
    )
}

#[allow(unused_variables)]
fn __action629<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Type, usize),
) -> Exp
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action624(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action452(
        lookup,
        input,
        __temp0,
        __1,
        __2,
    )
}

#[allow(unused_variables)]
fn __action630<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp_, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Exp, usize),
) -> Exp
{
    let __start0 = __2.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action624(
        lookup,
        input,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action206(
        lookup,
        input,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action631<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp_, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Exp, usize),
) -> Exp
{
    let __start0 = __2.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action624(
        lookup,
        input,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action207(
        lookup,
        input,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action632<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
) -> Exp_
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action421(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action299(
        lookup,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action633<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Exp, usize),
) -> Exp
{
    let __start0 = __2.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action632(
        lookup,
        input,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action618(
        lookup,
        input,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action634<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Exp, usize),
) -> Exp
{
    let __start0 = __2.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action632(
        lookup,
        input,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action619(
        lookup,
        input,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action635<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Exp, usize),
) -> Exp
{
    let __start0 = __2.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action632(
        lookup,
        input,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        lookup,
        input,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action636<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp_, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Exp, usize),
) -> Exp
{
    let __start0 = __2.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action632(
        lookup,
        input,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action296(
        lookup,
        input,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action637<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp_, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Exp, usize),
) -> Exp
{
    let __start0 = __2.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action632(
        lookup,
        input,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action297(
        lookup,
        input,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action638<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
) -> Exp_
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action422(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action270(
        lookup,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action639<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Exp, usize),
) -> Exp
{
    let __start0 = __2.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action638(
        lookup,
        input,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action626(
        lookup,
        input,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action640<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Exp, usize),
) -> Exp
{
    let __start0 = __2.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action638(
        lookup,
        input,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action627(
        lookup,
        input,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action641<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Exp, usize),
) -> Exp
{
    let __start0 = __2.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action638(
        lookup,
        input,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action628(
        lookup,
        input,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action642<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp_, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Exp, usize),
) -> Exp
{
    let __start0 = __2.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action638(
        lookup,
        input,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action267(
        lookup,
        input,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action643<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp_, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Exp, usize),
) -> Exp
{
    let __start0 = __2.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action638(
        lookup,
        input,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action268(
        lookup,
        input,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action644<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
) -> Exp_
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action423(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action303(
        lookup,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action645<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Exp, usize),
) -> Exp
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action644(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action636(
        lookup,
        input,
        __temp0,
        __1,
        __2,
    )
}

#[allow(unused_variables)]
fn __action646<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Exp, usize),
) -> Exp
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action644(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action637(
        lookup,
        input,
        __temp0,
        __1,
        __2,
    )
}

#[allow(unused_variables)]
fn __action647<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp_, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Exp, usize),
) -> Exp
{
    let __start0 = __2.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action644(
        lookup,
        input,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action301(
        lookup,
        input,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action648<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
) -> Exp_
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action424(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action289(
        lookup,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action649<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Exp, usize),
) -> Exp
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action648(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action642(
        lookup,
        input,
        __temp0,
        __1,
        __2,
    )
}

#[allow(unused_variables)]
fn __action650<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Exp, usize),
) -> Exp
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action648(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action643(
        lookup,
        input,
        __temp0,
        __1,
        __2,
    )
}

#[allow(unused_variables)]
fn __action651<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp_, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Exp, usize),
) -> Exp
{
    let __start0 = __2.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action648(
        lookup,
        input,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action287(
        lookup,
        input,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action652<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
) -> Exp_
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action425(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action325(
        lookup,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action653<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Exp, usize),
) -> Exp
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action652(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action647(
        lookup,
        input,
        __temp0,
        __1,
        __2,
    )
}

#[allow(unused_variables)]
fn __action654<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp_, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Exp, usize),
) -> Exp
{
    let __start0 = __2.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action652(
        lookup,
        input,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action323(
        lookup,
        input,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action655<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
) -> Exp_
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action426(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action293(
        lookup,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action656<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Exp, usize),
) -> Exp
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action655(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action651(
        lookup,
        input,
        __temp0,
        __1,
        __2,
    )
}

#[allow(unused_variables)]
fn __action657<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp_, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Exp, usize),
) -> Exp
{
    let __start0 = __2.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action655(
        lookup,
        input,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action291(
        lookup,
        input,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action658<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
) -> Exp_
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action427(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action251(
        lookup,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action659<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Exp, usize),
) -> Exp
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action658(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action622(
        lookup,
        input,
        __temp0,
        __1,
        __2,
    )
}

#[allow(unused_variables)]
fn __action660<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Exp, usize),
) -> Exp
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action658(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action623(
        lookup,
        input,
        __temp0,
        __1,
        __2,
    )
}

#[allow(unused_variables)]
fn __action661<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Exp, usize),
) -> Exp
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action658(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action500(
        lookup,
        input,
        __temp0,
        __1,
        __2,
    )
}

#[allow(unused_variables)]
fn __action662<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
) -> Exp_
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action428(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action205(
        lookup,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action663<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Exp, usize),
) -> Exp
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action662(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action630(
        lookup,
        input,
        __temp0,
        __1,
        __2,
    )
}

#[allow(unused_variables)]
fn __action664<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Exp, usize),
) -> Exp
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action662(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action631(
        lookup,
        input,
        __temp0,
        __1,
        __2,
    )
}

#[allow(unused_variables)]
fn __action665<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Exp, usize),
) -> Exp
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action662(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action502(
        lookup,
        input,
        __temp0,
        __1,
        __2,
    )
}

#[allow(unused_variables)]
fn __action666<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, ExpField, usize),
) -> Delim<Node<ExpField>>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action479(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action482(
        lookup,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action667<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> Delim<Node<ExpField>>
{
    let __start0 = __lookbehind.clone();
    let __end0 = __lookahead.clone();
    let __temp0 = __action188(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action482(
        lookup,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action668<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, alloc::vec::Vec<Node<ExpField>>, usize),
    __1: (usize, ExpField, usize),
) -> Delim<Node<ExpField>>
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action479(
        lookup,
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action483(
        lookup,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action669<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, alloc::vec::Vec<Node<ExpField>>, usize),
) -> Delim<Node<ExpField>>
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action188(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action483(
        lookup,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action670<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
) -> Exp_
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action430(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action58(
        lookup,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action671<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, Pat_, usize),
    __2: (usize, Exp, usize),
) -> Case
{
    let __start0 = __2.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action670(
        lookup,
        input,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action66(
        lookup,
        input,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action672<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, Exp, usize),
    __2: (usize, Exp, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, Exp, usize),
) -> Exp
{
    let __start0 = __2.0.clone();
    let __end0 = __2.2.clone();
    let __start1 = __4.0.clone();
    let __end1 = __4.2.clone();
    let __temp0 = __action670(
        lookup,
        input,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action670(
        lookup,
        input,
        __4,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action529(
        lookup,
        input,
        __0,
        __1,
        __temp0,
        __3,
        __temp1,
    )
}

#[allow(unused_variables)]
fn __action673<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, Exp, usize),
    __2: (usize, Exp, usize),
    __3: (usize, &'input str, usize),
) -> Exp
{
    let __start0 = __2.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action670(
        lookup,
        input,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action530(
        lookup,
        input,
        __0,
        __1,
        __temp0,
        __3,
    )
}

#[allow(unused_variables)]
fn __action674<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, Exp, usize),
    __2: (usize, Exp, usize),
) -> Exp
{
    let __start0 = __2.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action670(
        lookup,
        input,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action532(
        lookup,
        input,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action675<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Pat_, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, Exp, usize),
    __5: (usize, &'input str, usize),
    __6: (usize, Exp, usize),
) -> Exp
{
    let __start0 = __6.0.clone();
    let __end0 = __6.2.clone();
    let __temp0 = __action670(
        lookup,
        input,
        __6,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action501(
        lookup,
        input,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action676<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, Exp, usize),
) -> Exp
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action670(
        lookup,
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action241(
        lookup,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action677<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, Exp, usize),
) -> Exp
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action670(
        lookup,
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action244(
        lookup,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action678<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, Exp, usize),
) -> Exp
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action670(
        lookup,
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action245(
        lookup,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action679<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, Exp, usize),
    __2: (usize, Exp, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, Exp, usize),
) -> Exp
{
    let __start0 = __2.0.clone();
    let __end0 = __2.2.clone();
    let __start1 = __4.0.clone();
    let __end1 = __4.2.clone();
    let __temp0 = __action670(
        lookup,
        input,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action670(
        lookup,
        input,
        __4,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action533(
        lookup,
        input,
        __0,
        __1,
        __temp0,
        __3,
        __temp1,
    )
}

#[allow(unused_variables)]
fn __action680<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, Exp, usize),
    __2: (usize, Exp, usize),
    __3: (usize, &'input str, usize),
) -> Exp
{
    let __start0 = __2.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action670(
        lookup,
        input,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action534(
        lookup,
        input,
        __0,
        __1,
        __temp0,
        __3,
    )
}

#[allow(unused_variables)]
fn __action681<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, Exp, usize),
    __2: (usize, Exp, usize),
) -> Exp
{
    let __start0 = __2.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action670(
        lookup,
        input,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action536(
        lookup,
        input,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action682<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Pat_, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, Exp, usize),
    __5: (usize, &'input str, usize),
    __6: (usize, Exp, usize),
) -> Exp
{
    let __start0 = __6.0.clone();
    let __end0 = __6.2.clone();
    let __temp0 = __action670(
        lookup,
        input,
        __6,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action503(
        lookup,
        input,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action683<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, Exp, usize),
) -> Exp
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action670(
        lookup,
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action144(
        lookup,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action684<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, Exp, usize),
) -> Exp
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action670(
        lookup,
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action147(
        lookup,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action685<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, Exp, usize),
) -> Exp
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action670(
        lookup,
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action148(
        lookup,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action686<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
) -> Delim<Exp_>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action486(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action489(
        lookup,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action687<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> Delim<Exp_>
{
    let __start0 = __lookbehind.clone();
    let __end0 = __lookahead.clone();
    let __temp0 = __action338(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action489(
        lookup,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action688<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, alloc::vec::Vec<Exp_>, usize),
    __1: (usize, Exp, usize),
) -> Delim<Exp_>
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action486(
        lookup,
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action490(
        lookup,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action689<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, alloc::vec::Vec<Exp_>, usize),
) -> Delim<Exp_>
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action338(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action490(
        lookup,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action690<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
) -> Exp_
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action434(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action53(
        lookup,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action691<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
) -> Exp_
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action435(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action355(
        lookup,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action692<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Exp, usize),
    __3: (usize, &'input str, usize),
) -> Exp
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action691(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action504(
        lookup,
        input,
        __temp0,
        __1,
        __2,
        __3,
    )
}

#[allow(unused_variables)]
fn __action693<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, usize, usize),
) -> Exp
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action691(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action351(
        lookup,
        input,
        __temp0,
        __1,
        __2,
    )
}

#[allow(unused_variables)]
fn __action694<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Id, usize),
) -> Exp
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action691(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action546(
        lookup,
        input,
        __temp0,
        __1,
        __2,
    )
}

#[allow(unused_variables)]
fn __action695<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
    __1: (usize, Exp, usize),
) -> Exp
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action691(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action537(
        lookup,
        input,
        __temp0,
        __1,
    )
}

#[allow(unused_variables)]
fn __action696<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
    __1: (usize, &'input str, usize),
) -> Exp
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action691(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action354(
        lookup,
        input,
        __temp0,
        __1,
    )
}

#[allow(unused_variables)]
fn __action697<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
) -> Exp_
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action436(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action333(
        lookup,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action698<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Exp, usize),
    __3: (usize, &'input str, usize),
) -> Exp
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action697(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action505(
        lookup,
        input,
        __temp0,
        __1,
        __2,
        __3,
    )
}

#[allow(unused_variables)]
fn __action699<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, usize, usize),
) -> Exp
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action697(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action318(
        lookup,
        input,
        __temp0,
        __1,
        __2,
    )
}

#[allow(unused_variables)]
fn __action700<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Id, usize),
) -> Exp
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action697(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action547(
        lookup,
        input,
        __temp0,
        __1,
        __2,
    )
}

#[allow(unused_variables)]
fn __action701<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
    __1: (usize, Exp, usize),
) -> Exp
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action697(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action538(
        lookup,
        input,
        __temp0,
        __1,
    )
}

#[allow(unused_variables)]
fn __action702<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
    __1: (usize, &'input str, usize),
) -> Exp
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action697(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action321(
        lookup,
        input,
        __temp0,
        __1,
    )
}

#[allow(unused_variables)]
fn __action703<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
) -> Exp_
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action437(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action332(
        lookup,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action704<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Exp, usize),
) -> Exp
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action703(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action654(
        lookup,
        input,
        __temp0,
        __1,
        __2,
    )
}

#[allow(unused_variables)]
fn __action705<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, UnOp, usize),
    __1: (usize, Exp, usize),
) -> Exp
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action703(
        lookup,
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action330(
        lookup,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action706<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, Exp, usize),
) -> Exp
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action703(
        lookup,
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action331(
        lookup,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action707<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
) -> Exp_
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action438(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action310(
        lookup,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action708<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Exp, usize),
) -> Exp
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action707(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action657(
        lookup,
        input,
        __temp0,
        __1,
        __2,
    )
}

#[allow(unused_variables)]
fn __action709<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, Exp, usize),
) -> Exp
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action707(
        lookup,
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action329(
        lookup,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action710<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, Exp, usize),
) -> Exp
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action707(
        lookup,
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action307(
        lookup,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action711<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, UnOp, usize),
    __1: (usize, Exp, usize),
) -> Exp
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action707(
        lookup,
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action308(
        lookup,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action712<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, Exp, usize),
) -> Exp
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action707(
        lookup,
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action309(
        lookup,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action713<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
) -> Exp_
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action413(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action250(
        lookup,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action714<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Exp, usize),
) -> core::option::Option<Exp_>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action713(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action248(
        lookup,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action715<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, Exp, usize),
) -> Exp
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action714(
        lookup,
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action237(
        lookup,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action716<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, &'input str, usize),
) -> Exp
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action249(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action237(
        lookup,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action717<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, alloc::vec::Vec<Exp_>, usize),
    __1: (usize, Exp, usize),
) -> Delim<Exp_>
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action506(
        lookup,
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action163(
        lookup,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action718<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, alloc::vec::Vec<Exp_>, usize),
) -> Delim<Exp_>
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action203(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action163(
        lookup,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action719<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, Exp, usize),
) -> Exp
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action506(
        lookup,
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action140(
        lookup,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action720<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, &'input str, usize),
) -> Exp
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action203(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action140(
        lookup,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action721<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Case, usize),
) -> Delim<Node<Case>>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action510(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action513(
        lookup,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action722<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> Delim<Node<Case>>
{
    let __start0 = __lookbehind.clone();
    let __end0 = __lookahead.clone();
    let __temp0 = __action193(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action513(
        lookup,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action723<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, alloc::vec::Vec<Node<Case>>, usize),
    __1: (usize, Case, usize),
) -> Delim<Node<Case>>
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action510(
        lookup,
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action514(
        lookup,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action724<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, alloc::vec::Vec<Node<Case>>, usize),
) -> Delim<Node<Case>>
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action193(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action514(
        lookup,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action725<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Pat, usize),
) -> Pat_
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action440(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action34(
        lookup,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action726<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Pat, usize),
) -> Pat_
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action442(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action26(
        lookup,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action727<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, Pat, usize),
) -> Pat_
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action443(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action21(
        lookup,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action728<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, SortPat, usize),
) -> SortPat_
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action444(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action79(
        lookup,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action729<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, alloc::vec::Vec<Pat_>, usize),
    __1: (usize, Pat, usize),
) -> Delim<Pat_>
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action519(
        lookup,
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action171(
        lookup,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action730<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, alloc::vec::Vec<Pat_>, usize),
) -> Delim<Pat_>
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action175(
        lookup,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action171(
        lookup,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action731<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, Pat, usize),
    __2: (usize, Exp, usize),
) -> Case
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action726(
        lookup,
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action671(
        lookup,
        input,
        __0,
        __temp0,
        __2,
    )
}

#[allow(unused_variables)]
fn __action732<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, Id, usize),
    __2: (usize, Pat, usize),
) -> Pat
{
    let __start0 = __2.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action726(
        lookup,
        input,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action555(
        lookup,
        input,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action733<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, SortPat_, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Id, usize),
    __3: (usize, Pat, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, Type, usize),
    __6: (usize, Exp, usize),
) -> Dec
{
    let __start0 = __3.0.clone();
    let __end0 = __3.2.clone();
    let __temp0 = __action727(
        lookup,
        input,
        __3,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action584(
        lookup,
        input,
        __0,
        __1,
        __2,
        __temp0,
        __4,
        __5,
        __6,
    )
}

#[allow(unused_variables)]
fn __action734<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, SortPat_, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Pat, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, Type, usize),
    __5: (usize, Exp, usize),
) -> Dec
{
    let __start0 = __2.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action727(
        lookup,
        input,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action585(
        lookup,
        input,
        __0,
        __1,
        __temp0,
        __3,
        __4,
        __5,
    )
}

#[allow(unused_variables)]
fn __action735<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, SortPat_, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Id, usize),
    __3: (usize, Pat, usize),
    __4: (usize, Exp, usize),
) -> Dec
{
    let __start0 = __3.0.clone();
    let __end0 = __3.2.clone();
    let __temp0 = __action727(
        lookup,
        input,
        __3,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action586(
        lookup,
        input,
        __0,
        __1,
        __2,
        __temp0,
        __4,
    )
}

#[allow(unused_variables)]
fn __action736<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, SortPat_, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Pat, usize),
    __3: (usize, Exp, usize),
) -> Dec
{
    let __start0 = __2.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action727(
        lookup,
        input,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action587(
        lookup,
        input,
        __0,
        __1,
        __temp0,
        __3,
    )
}

#[allow(unused_variables)]
fn __action737<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, SortPat_, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Id, usize),
    __3: (usize, Pat, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, Type, usize),
    __6: (usize, &'input str, usize),
    __7: (usize, Exp, usize),
) -> Dec
{
    let __start0 = __3.0.clone();
    let __end0 = __3.2.clone();
    let __temp0 = __action727(
        lookup,
        input,
        __3,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action567(
        lookup,
        input,
        __0,
        __1,
        __2,
        __temp0,
        __4,
        __5,
        __6,
        __7,
    )
}

#[allow(unused_variables)]
fn __action738<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, SortPat_, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Pat, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, Type, usize),
    __5: (usize, &'input str, usize),
    __6: (usize, Exp, usize),
) -> Dec
{
    let __start0 = __2.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action727(
        lookup,
        input,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action568(
        lookup,
        input,
        __0,
        __1,
        __temp0,
        __3,
        __4,
        __5,
        __6,
    )
}

#[allow(unused_variables)]
fn __action739<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, SortPat_, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Id, usize),
    __3: (usize, Pat, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, Exp, usize),
) -> Dec
{
    let __start0 = __3.0.clone();
    let __end0 = __3.2.clone();
    let __temp0 = __action727(
        lookup,
        input,
        __3,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action569(
        lookup,
        input,
        __0,
        __1,
        __2,
        __temp0,
        __4,
        __5,
    )
}

#[allow(unused_variables)]
fn __action740<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, SortPat_, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Pat, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, Exp, usize),
) -> Dec
{
    let __start0 = __2.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action727(
        lookup,
        input,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action570(
        lookup,
        input,
        __0,
        __1,
        __temp0,
        __3,
        __4,
    )
}

#[allow(unused_variables)]
fn __action741<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, Pat, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, Exp, usize),
) -> Dec
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action725(
        lookup,
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action493(
        lookup,
        input,
        __0,
        __temp0,
        __2,
        __3,
    )
}

#[allow(unused_variables)]
fn __action742<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, Pat, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, Exp, usize),
) -> Dec
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action725(
        lookup,
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action496(
        lookup,
        input,
        __0,
        __temp0,
        __2,
        __3,
    )
}

#[allow(unused_variables)]
fn __action743<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Pat, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, Exp, usize),
    __5: (usize, &'input str, usize),
    __6: (usize, Exp, usize),
) -> Exp
{
    let __start0 = __2.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action725(
        lookup,
        input,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action675(
        lookup,
        input,
        __0,
        __1,
        __temp0,
        __3,
        __4,
        __5,
        __6,
    )
}

#[allow(unused_variables)]
fn __action744<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Pat, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, Exp, usize),
    __5: (usize, &'input str, usize),
    __6: (usize, Exp, usize),
) -> Exp
{
    let __start0 = __2.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action725(
        lookup,
        input,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action682(
        lookup,
        input,
        __0,
        __1,
        __temp0,
        __3,
        __4,
        __5,
        __6,
    )
}

#[allow(unused_variables)]
fn __action745<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, SortPat, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Id, usize),
    __3: (usize, Pat, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, Type, usize),
    __6: (usize, Exp, usize),
) -> Dec
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action728(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action733(
        lookup,
        input,
        __temp0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
    )
}

#[allow(unused_variables)]
fn __action746<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, SortPat, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Pat, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, Type, usize),
    __5: (usize, Exp, usize),
) -> Dec
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action728(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action734(
        lookup,
        input,
        __temp0,
        __1,
        __2,
        __3,
        __4,
        __5,
    )
}

#[allow(unused_variables)]
fn __action747<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, SortPat, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Id, usize),
    __3: (usize, Pat, usize),
    __4: (usize, Exp, usize),
) -> Dec
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action728(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action735(
        lookup,
        input,
        __temp0,
        __1,
        __2,
        __3,
        __4,
    )
}

#[allow(unused_variables)]
fn __action748<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, SortPat, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Pat, usize),
    __3: (usize, Exp, usize),
) -> Dec
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action728(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action736(
        lookup,
        input,
        __temp0,
        __1,
        __2,
        __3,
    )
}

#[allow(unused_variables)]
fn __action749<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, SortPat, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Id, usize),
    __3: (usize, Pat, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, Type, usize),
    __6: (usize, &'input str, usize),
    __7: (usize, Exp, usize),
) -> Dec
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action728(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action737(
        lookup,
        input,
        __temp0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __7,
    )
}

#[allow(unused_variables)]
fn __action750<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, SortPat, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Pat, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, Type, usize),
    __5: (usize, &'input str, usize),
    __6: (usize, Exp, usize),
) -> Dec
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action728(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action738(
        lookup,
        input,
        __temp0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
    )
}

#[allow(unused_variables)]
fn __action751<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, SortPat, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Id, usize),
    __3: (usize, Pat, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, Exp, usize),
) -> Dec
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action728(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action739(
        lookup,
        input,
        __temp0,
        __1,
        __2,
        __3,
        __4,
        __5,
    )
}

#[allow(unused_variables)]
fn __action752<
    'input,
>(
    lookup: &LineColLookup<'input>,
    input: &'input str,
    __0: (usize, SortPat, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Pat, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, Exp, usize),
) -> Dec
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action728(
        lookup,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action740(
        lookup,
        input,
        __temp0,
        __1,
        __2,
        __3,
        __4,
    )
}

pub trait __ToTriple<'input, >
{
    fn to_triple(value: Self) -> Result<(usize,Token<'input>,usize), __lalrpop_util::ParseError<usize, Token<'input>, &'static str>>;
}

impl<'input, > __ToTriple<'input, > for (usize, Token<'input>, usize)
{
    fn to_triple(value: Self) -> Result<(usize,Token<'input>,usize), __lalrpop_util::ParseError<usize, Token<'input>, &'static str>> {
        Ok(value)
    }
}
impl<'input, > __ToTriple<'input, > for Result<(usize, Token<'input>, usize), &'static str>
{
    fn to_triple(value: Self) -> Result<(usize,Token<'input>,usize), __lalrpop_util::ParseError<usize, Token<'input>, &'static str>> {
        match value {
            Ok(v) => Ok(v),
            Err(error) => Err(__lalrpop_util::ParseError::User { error }),
        }
    }
}
